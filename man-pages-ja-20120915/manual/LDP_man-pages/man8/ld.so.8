.\" This is in the public domain
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH LD.SO 8 2012\-04\-17 GNU "Linux Programmer's Manual"
.SH 名前
ld.so, ld\-linux.so* \- 動的なリンカ/ローダ
.SH 書式
動的リンカは、動的にリンクされたプログラムやライブラリの実行によって 間接的に実行することができる (ELF
の場合、動的リンカにコマンドラインオプションを渡すことはできず、 プログラムの \fB.interp\fP セクションに入っている動的リンカが実行される)。
また以下のように直接実行することもできる
.P
\fI/lib/ld\-linux.so.*\fP [OPTIONS] [PROGRAM [ARGUMENTS]]
.SH 説明
プログラム \fBld.so\fP と \fBld\-linux.so*\fP はプログラムに必要な共有ライブラリを見つけてロードし、
プログラムの実行を準備してから起動させる。
.LP
Linux のバイナリは、コンパイルの時に \fBld\fP(1)  に対して \fB\-static\fP オプションが指定されていない限り、動的リンク
(実行時リンク) が必要となる。
.LP
プログラム \fBld.so\fP は a.out バイナリを扱う。 これはずっと昔に使われていたフォーマットである。 \fBld\-linux.so*\fP
(libc5 では \fI/lib/ld\-linux.so.1\fP, glibc2 では \fI/lib/ld\-linux.so.2\fP)  は ELF
バイナリを扱う。 このフォーマットは多くの人が最近何年も使っている。 それ以外の点では両方とも同じように動作し、 同じサポートファイルとプログラム
\fBldd\fP(1), \fBldconfig\fP(8), \fI/etc/ld.so.conf\fP を使用する。
.LP
プログラムで必要とされる共有ライブラリは、 以下の順序で検索される。
.IP o 3
(ELF のみ)  バイナリの動的セクション属性 DT_RPATH が存在し、 DT_RUNPATH 属性が存在しない場合は、 DT_RPATH
で指定されたディレクトリを使用する。 DT_RPATH の使用は推奨されない。
.IP o
環境変数 \fBLD_LIBRARY_PATH\fP を用いる。 ただし実行ファイルが set\-user\-ID/set\-group\-ID バイナリの場合、
これは無視される。
.IP o
(ELF のみ)  バイナリの動的セクション属性 DT_RUNPATH が存在すれば、 DT_RUNPATH で指定されたディレクトリを使用する。
.IP o
キャッシュファイル \fI/etc/ld.so.cache\fP を探す。
このファイルは、 (ld.so.conf で追加指定されたものも含めた) ライブラリ検索パスから
見つかったライブラリファイルの情報を集めたものである。
ただし、バイナリがリンカオプション \fB\-z nodeflib\fP でリンクされている場合は、
デフォルトのライブラリパスにある ライブラリはスキップされる。
ハードウェア機能ディレクトリ (下記参照) にインストールされたライブラリは、
他のライブラリよりも優先される。
.IP o
デフォルトパスである \fI/lib\fP、 次いで \fI/usr/lib\fP を用いる。 バイナリがリンカオプション \fB\-z nodeflib\fP
でリンクされている場合、このステップはスキップされる。
.SS "$ORIGIN と rpath"
.PP
.\" ld.so also understands $LIB, with the same meaning as $ORIGIN/lib,
.\" it appears.
.\"
.\" There is also $PLATFORM.  This is a kind of wildcard
.\" of directories related at AT_HWCAP.  To get an idea of the
.\" places that $PLATFORM would match, look at the output of the
.\" following:
.\"
.\" mkdir /tmp/d
.\" LD_LIBRARY_PATH=/tmp/d strace -e open /bin/date 2>&1 | grep /tmp/d
.\"
.\" ld.so lets names be abbreviated, so $O will work for $ORIGIN;
.\" Don't do this!!
\fBld.so\fP では、rpath 指定 (DT_RPATH や DT_RUNPATH) 中に \fI$ORIGIN\fP という文字列
(\fI${ORIGIN}\fP も等価) を使うことができる。 \fI$ORIGIN\fP はアプリケーションの実行ファイルが入っているディレクトリを表す。
これを使って \fIsomedir/app\fP に置かれたアプリケーションを \fIgcc \-Wl,\-rpath,'$ORIGIN/../lib'\fP
でコンパイルすると、 \fIsomedir\fP がディレクトリ階層のどこにあっても、アプリケーションは \fIsomedir/lib\fP
にある対応する共有ライブラリを見つけることができる。 この機能を使うと、 特別なディレクトリではなく任意のディレクトリにインストールしても
"ややこしい設定なしで" 独自の共有ライブラリを使えるアプリケーションを作成することができる。
.SH オプション
.TP 
\fB\-\-list\fP
全ての依存関係とその解決法をリストする。
.TP 
\fB\-\-verify\fP
プログラムが動的にリンクされているかと、 動的リンカがそのプログラムを扱えるかを検証する。
.TP 
\fB\-\-library\-path PATH\fP
\fBLD_LIBRARY_PATH\fP 環境変数の設定ではなく、
指定した PATH を使用する (下記参照)。
.TP 
\fB\-\-inhibit\-rpath LIST\fP
LIST にあるオブジェクト名の RPATH と RUNPATH の情報を無視する。 \fBld.so\fP が set\-user\-ID か
set\-group\-ID されている場合、 このオプションは無視される。
.TP 
\fB\-\-audit LIST\fP
LIST で指定された名前のオブジェクトを監査者として使用する。
.SH ハードウェア機能
いくつかのライブラリは、(すべての CPU に存在するわけではない)ハードウェア固有
の命令を使ってコンパイルされている。そのようなライブラリは、
\fI/usr/lib/sse2/\fP のような、必要なハードウェア機能 (hardware capability) を規
定する名前のディレクトリにインストールすべきである。
動的リンカは、マシンのハードウェアに基づいてこれらのディレクトリを確認し、
指定されたライブラリに最も適したバージョンを選択する。
ハードウェア機能ディレクトリはつなげることができ、
複数の CPU 機能を組み合わることができる。
対応しているハードウェア機能名のリストは CPU に依存する。
現在のところ、以下の名前が認識される。
.TP 
\fBAlpha\fP
ev4, ev5, ev56, ev6, ev67
.TP 
\fBMIPS\fP
loongson2e, loongson2f, octeon, octeon2
.TP 
\fBPowerPC\fP
4xxmac, altivec, arch_2_05, arch_2_06, booke, cellbe, dfp, efpdouble,
efpsingle, fpu, ic_snoop, mmu, notb, pa6t, power4, power5, power5+, power6x,
ppc32, ppc601, ppc64, smt, spe, ucache, vsx
.TP 
\fBSPARC\fP
flush, muldiv, stbar, swap, ultra3, v9, v9v, v9v2
.TP 
\fBs390\fP
dfp, eimm, esan3, etf3enh, g5, highgprs, hpage, ldisp, msa, stfle, z900,
z990, z9\-109, z10, zarch
.TP 
.TP 
\fBx86 (32\-bit のみ)\fP
acpi, apic, clflush, cmov, cx8, dts, fxsr, ht, i386, i486, i586, i686, mca,
mmx, mtrr, pat, pbe, pge, pn, pse36, sep, ss, sse, sse2, tm
.SH 環境変数
4 つの重要な環境変数がある。
.TP 
\fBLD_BIND_NOW\fP
(libc5; glibc 2.1.1 以降)  空文字列でない場合、 動的リンカはプログラムの開始時に全てのシンボルを解決する。
空文字列の場合、解決しなければならない関数呼び出しが 最初に参照された時点で解決する。 デバッガを使っているときに役立つ。
.TP 
\fBLD_LIBRARY_PATH\fP
コロン区切りのディレクトリリスト。 実行時に ELF ライブラリを検索するディレクトリを指定する。 \fBPATH\fP 環境変数と同じように指定する。
.TP 
\fBLD_PRELOAD\fP
スペース区切りで ELF 共有ライブラリを指定する。 これはユーザーが指定でき、すべてのライブラリに先立ってロードされる。
他の共有ライブラリにある関数を選択的に置き換えるために用いることができる。 set\-user\-ID/set\-group\-ID された ELF
バイナリに対して、 標準的な検索パスにあるライブラリのうち set\-user\-ID されているものはロードしない。
.TP 
\fBLD_TRACE_LOADED_OBJECTS\fP
(ELF のみ)  空文字列でない場合、 プログラムを普通に実行するのではなく、 \fBldd\fP(1)
を実行したときのように動的ライブラリの依存関係をリスト表示させる。
.LP
そして、それほど知られていない環境変数もある。 多くは廃れてしまったものか内部でのみ使用される環境変数である。
.TP 
\fBLD_AOUT_LIBRARY_PATH\fP
(libc5)  a.out バイナリにのみ使われる環境変数で、 \fBLD_LIBRARY_PATH\fP と同じ役割をする。 ld\-linux.so.1
の古いバージョンでは \fBLD_ELF_LIBRARY_PATH\fP もサポートしていた。
.TP 
\fBLD_AOUT_PRELOAD\fP
(libc5)  a.out バイナリにのみ使われる環境変数で、 \fBLD_PRELOAD\fP と同じ役割をする。 ld\-linux.so.1
の古いバージョンでは \fBLD_ELF_PRELOAD\fP もサポートしていた。
.TP 
\fBLD_AUDIT\fP
(glibc 2.4 以降)  他のオブジェクトよりも前に、別のリンカ名前空間 (そのプロセスで行われる 通常のシンボル結合 (symbol
bindigns) には関与しない名前空間) で ロードされる、ユーザ指定の ELF 共有オブジェクトのコロン区切りのリスト。
これらのライブラリを使って、動的リンカの動作を監査することができる。 set\-user\-ID/set\-group\-ID されたバイナリでは、
\fBLD_AUDIT\fP は無視される。

動的リンカは、いわゆる監査チェックポイント (auditing checkpoints)  において、監査 (audit)
ライブラリの適切な関数を呼び出すことで、 監査ライブラリへの通知を行う。監査チェックポイントの例としては、
新たなライブラリのロード、シンボルの解決、別の共有オブジェクト からのシンボルの呼び出し、などがある。 詳細は \fBrtld\-audit\fP(7)
を参照してほしい。 audit インタフェースは、Solaris で提供されているものと 大部分は互換性がある。Solaris の audit
インタフェースについては、 \fILinker and Libraries Guide\fP の \fIRuntime Linker Auditing
Interface\fP の章に説明がある。
.TP 
\fBLD_BIND_NOT\fP
(glibc 2.1.95 以降)  シンボルを解決した後、GOT (global offset table) と PLT (procedure
linkage table) を更新しない。
.TP 
\fBLD_DEBUG\fP
(glibc 2.1 以降)  動的リンカの詳細なデバッグ情報を出力する。 \fBall\fP に設定した場合、全ての動的リンカが持つデバッグ情報を表示する。
\fBhelp\fP に設定した場合、この環境変数で指定されるカテゴリのヘルプ情報を表示する。 glibc 2.3.4 以降、
set\-user\-ID/set\-group\-ID されたバイナリでは \fBLD_DEBUG\fP は無視される。
.TP 
\fBLD_DEBUG_OUTPUT\fP
(glibc 2.1 以降)  \fBLD_DEBUG\fP の出力を書き込むファイル。 デフォルトは標準出力である。
set\-user\-ID/set\-group\-ID されたバイナリでは、 \fBLD_DEBUG_OUTPUT\fP は無視される。
.TP 
\fBLD_DYNAMIC_WEAK\fP
(glibc 2.1.19 以降)  上書きされる弱いシンボル (昔の glibc の挙動を逆にする)。 セキュリティ上の理由から、glibc
2.3.4 以降、 set\-user\-ID/set\-group\-ID されたバイナリでは \fBLD_DYNAMIC_WEAK\fP は無視される。
.TP 
\fBLD_HWCAP_MASK\fP
(glibc 2.1 以降)  ハードウェア機能のマスク。
.TP 
\fBLD_KEEPDIR\fP
(a.out のみ)(libc5)  ロードする a.out ライブラリの名前において、ディレクトリを無視しない。 このオプションは用いるべきではない。
.TP 
\fBLD_NOWARN\fP
(a.out のみ)(libc5)  a.out ライブラリにおけるマイナーバージョン番号の非互換に 対する警告メッセージを抑制する。
.TP 
\fBLD_ORIGIN_PATH\fP
.\" Only used if $ORIGIN can't be determined by normal means
.\" (from the origin path saved at load time, or from /proc/self/exe)?
(glibc 2.1 以降)  バイナリへのパス (set\-user\-ID されていないプログラムについて)。 セキュリティ上の理由から、glibc
2.3.4 以降、 set\-user\-ID/set\-group\-ID されたバイナリでは \fBLD_ORIGIN_PATH\fP は無視される。
.TP 
\fBLD_POINTER_GUARD\fP
(glibc 2.4 以降)  0 に設定すると、ポインタ保護 (pointer guarding) が無効になる。
それ以外の値の場合はポインタ保護が有効になる。 デフォルトはポインタ保護有効である。
ポインタ保護はセキュリティ機構の一つで、書き込み可能なプログラムメモリ に格納されたコードへのポインタをほぼランダム化することで、
攻撃者がバッファオーバーランやスタック破壊 (stack\-smashing) 攻撃の際に ポインタを乗っ取ることを困難にするものである。
.TP 
\fBLD_PROFILE\fP
(glibc 2.1 以降)  プロファイルを行う共有オブジェクト。 パス名か共有オブジェクト名 (soname) で指定される。 プロフィールの出力は
"\fI$LD_PROFILE_OUTPUT\fP/\fI$LD_PROFILE\fP.profile" という名前の ファイルに書き込まれる。
.TP 
\fBLD_PROFILE_OUTPUT\fP
(glibc 2.1 以降)  \fBLD_PROFILE\fP の出力が書き込まれるディレクトリ。
この変数が定義されていないか、空の文字列が定義されている場合、 デフォルト値は \fI/var/tmp\fP となる。
set\-user\-ID/set\-group\-ID されたプログラムでは、 LD_PROFILE_OUTPUT は無視される。 出力ファイルは常に
\fI/var/profile\fP が使用される。
.TP 
\fBLD_SHOW_AUXV\fP
.\" FIXME
.\" Document LD_TRACE_PRELINKING (e.g.: LD_TRACE_PRELINKING=libx1.so ./prog)
.\" Since glibc 2.3
.\" Also enables DL_DEBUG_PRELINK
(glibc 2.1 以降)  カーネルから渡される補助的な (パラメータの) 配列を表示する。 セキュリティ上の理由から、glibc 2.3.4
以降、 set\-user\-ID/set\-group\-ID されたバイナリでは \fBLD_SHOW_AUXV\fP は無視される。
.TP 
\fBLD_USE_LOAD_BIAS\fP
.\" http://sources.redhat.com/ml/libc-hacker/2003-11/msg00127.html
.\" Subject: [PATCH] Support LD_USE_LOAD_BIAS
.\" Jakub Jelinek
デフォルトでは (つまり、この変数が定義されていない場合)、 実行ファイルと prelink された共有オブジェクトでは、それらが依存する
ライブラリのベースアドレスが尊重される一方、 (prelink されていない) position\-independent executables
(PIEs) と 他の共有オブジェクトでは依存するライブラリのベースアドレスは 尊重されない。 \fBLD_USE_LOAD_BIAS\fP
に値が定義された場合、実行ファイルと PIE のどちらでも ベースアドレスが尊重される。 \fBLD_USE_LOAD_BIAS\fP が値 0
で定義された場合、実行ファイルと PIE のどちらでも ベースアドレスは尊重されない。 set\-user\-ID や set\-group\-ID
されたプログラムでは、 この変数は無視される。
.TP 
\fBLD_VERBOSE\fP
(glibc 2.1 以降)  空文字列でない場合に、 (\fBLD_TRACE_LOADED_OBJECTS\fP を設定するか、 \fB\-\-list\fP
または \fB\-\-verify\fP オプションを動的リンカに指定することにより)  プログラムについての情報を問い合わせると、
プログラムのシンボルバージョン情報を表示する。
.TP 
\fBLD_WARN\fP
(ELF のみ)(glibc 2.1.3 以降)  空文字列でない場合、解決されていないシンボルがあれば警告を出す。
.TP 
\fBLDD_ARGV0\fP
(libc5)  \fBldd\fP(1)  の引き数がない場合に、 \fIargv\fP[0] として使われる値。
.SH ファイル
.PD 0
.TP 
\fI/lib/ld.so\fP
a.out の動的リンカ/ローダ
.TP 
\fI/lib/ld\-linux.so.\fP{\fI1\fP,\fI2\fP}
ELF の動的リンカ/ローダ
.TP 
\fI/etc/ld.so.cache\fP
ライブラリを検索するディレクトリを集めたリストと、 共有ライブラリの候補の整列リストを含むファイル。
.TP 
\fI/etc/ld.so.preload\fP
プログラムの前にロードすべき ELF 共有ライブラリを スペースで区切ったリストが書かれているファイル。
.TP 
\fBlib*.so*\fP
共有ライブラリ
.PD
.SH 注意
\fBld.so\fP の機能は libc のバージョン 4.4.3 以上を用いてコンパイルされた 実行ファイルで使用可能である。 ELF の機能は
Linux 1.1.52 以降と libc5 以降で使用可能である。
.SH 関連項目
.\" .SH AUTHORS
.\" ld.so: David Engel, Eric Youngdale, Peter MacDonald, Hongjiu Lu, Linus
.\"  Torvalds, Lars Wirzenius and Mitch D'Souza
.\" ld-linux.so: Roland McGrath, Ulrich Drepper and others.
.\"
.\" In the above, (libc5) stands for David Engel's ld.so/ld-linux.so.
\fBldd\fP(1), \fBrtld\-audit\fP(7), \fBldconfig\fP(8)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.41 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
