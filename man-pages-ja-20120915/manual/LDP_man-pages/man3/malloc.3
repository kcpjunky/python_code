.\" Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" License.
.\" Modified Sat Jul 24 19:00:59 1993 by Rik Faith (faith@cs.unc.edu)
.\" Clarification concerning realloc, iwj10@cus.cam.ac.uk (Ian Jackson), 950701
.\" Documented MALLOC_CHECK_, Wolfram Gloger (wmglo@dent.med.uni-muenchen.de)
.\" 2007-09-15 mtk: added notes on malloc()'s use of sbrk() and mmap().
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH MALLOC 3 2012\-05\-10 GNU "Linux Programmer's Manual"
.SH 名前
malloc, free, calloc, realloc \- 動的なメモリの割り当てと解放を行う
.SH 書式
.nf
\fB#include <stdlib.h>\fP
.sp
\fBvoid *malloc(size_t \fP\fIsize\fP\fB);\fP
\fBvoid free(void \fP\fI*ptr\fP\fB);\fP
\fBvoid *calloc(size_t \fP\fInmemb\fP\fB, size_t \fP\fIsize\fP\fB);\fP
\fBvoid *realloc(void \fP\fI*ptr\fP\fB, size_t \fP\fIsize\fP\fB);\fP
.fi
.SH 説明
.PP
.\" glibc does this:
\fBmalloc\fP() 関数は \fIsize\fP バイトを割り当て、 割り当てられたメモリに対する
ポインタを返す。\fIメモリの内容は初期化されない\fP。 \fIsize\fP が 0 の場合、
\fBmalloc\fP() は NULL または \fBfree\fP() に後で渡しても問題の起こらない
一意なポインタ値を返す。
.PP
\fBfree\fP() 関数はポインタ \fIptr\fP が指すメモリ空間を解放する。このポインタは、
以前に呼び出された \fBmalloc\fP(), \fBcalloc\fP(), \fBrealloc\fP() のいずれかが返した値で
なければならない。これ以外のポインタを指定したり、すでに \fIfree(ptr)\fP が実行
されていたりした場合の動作は定義されていない。
\fIptr\fP が NULL の場合には、何の動作も行われない。
.PP
.\" glibc does this:
\fBcalloc\fP() 関数は \fIsize\fP バイトの要素 \fInmemb\fP 個からなる配列にメモリを
割り当て、割り当てられたメモリに対するポインタを返す。 メモリの内容は数値ゼロ
(全ビットが 0 のバイト) にセットされる。 \fInmemb\fP か \fIsize\fP が 0 の場合、
\fBcalloc\fP() は NULL または \fBfree\fP() に後で渡しても問題の起こらない一意な
ポインタ値を返す。
.PP
\fBrealloc\fP() は、ポインタ \fIptr\fP が示すメモリブロックのサイズを \fIsize\fP バイト
に変更する。領域の先頭から、新旧のサイズの小さい方の位置までの範囲の内容は
変更されない。新しいサイズが前のサイズよりも大きい場合、追加されたメモリは
初期化 \fIされない\fP。
\fIptr\fP が NULL の場合には \fImalloc(size)\fP と等価である。
\fIsize\fP が 0 で \fIptr\fP が NULL でない場合には、 \fIfree(ptr)\fP と等価である。
\fIptr\fP が NULL 以外の場合、 \fIptr\fP は以前に呼び出された \fBmalloc\fP(), \fBcalloc\fP(),
\fBrealloc\fP() のいずれかが返した値でなければならない。
\fIptr\fP が指す領域が移動されていた場合は \fIfree(ptr)\fP が実行される。
.SH 返り値
関数 \fBcalloc\fP() と \fBmalloc\fP() は、割り当てられたメモリへのポインタを返す。
割り当てられたメモリは、あらゆる種類の変数に対応できるようにアラインメントされる。
エラーの場合、これらの関数は NULL を返す。
\fIsize\fP が 0 で呼び出した \fBmalloc\fP() や、\fInmemb\fP か \fIsize\fP が 0 で呼び出した
\fBcalloc\fP() が成功した場合にも NULL が返される。
.PP
\fBfree\fP() 関数は値を返さない。
.PP
\fBrealloc\fP() 関数は新たに割り当てられたメモリへのポインタを返す。
これはあらゆる種類の変数に対応できるようにアラインメントされており、
\fIptr\fP とは異なることもある。割り当て要求に失敗した場合は NULL が返る。
\fIsize\fP が 0 の場合には、NULL もしくは \fBfree\fP() に渡すことができるポインタが返る。
\fBrealloc\fP() が失敗した場合には、元のブロックは変更されない。
つまり、解放されたり移動されたりはしない。
.SH 準拠
C89, C99.
.SH 注意
デフォルトでは、Linux は楽観的メモリ配置戦略を用いている。つまり、
\fBmalloc\fP() が NULL でない値を返しても、そのメモリが実際に利用可能であること
が保証されない。システムがメモリ不足状態になったとき、メモリ不足解決器 (OOM
killer) によって一つまたは複数のプロセスが削除される。
詳しい情報は、\fBproc\fP(5) の \fI/proc/sys/vm/overcommit_memory\fP と
\fIproc/sys/vm/oom_adj\fP、およびカーネルのソースファイルの
\fIDocumentation/vm/overcommit\-accounting\fP を参照のこと。

通常、 \fBmalloc\fP()  は、ヒープからメモリを割り当て、必要に応じてヒープのサイズを \fBsbrk\fP(2)  を使って調節する。
\fBMMAP_THRESHOLD\fP バイトよりも大きなメモリブロックを割り当てる場合、 glibc の \fBmalloc\fP()  実装は
\fBmmap\fP(2)  を使ってプライベートな無名マッピング (anonymous mapping) として メモリを割り当てる。 デフォルトでは
\fBMMAP_THRESHOLD\fP は 128 kB だが、 \fBmallopt\fP(3)  を使って調整できる。 \fBmmap\fP(2)
を使って行われたメモリ割り当ては \fBRLIMIT_DATA\fP リソース上限の影響を受けない (\fBgetrlimit\fP(2)  参照)。

マルチスレッドアプリケーションでのデータ破損を回避するため、内部では mutexを
使用して、これらの関数で利用されるメモリ管理用のデータ構造を保護している。
複数のスレッドが同時にメモリの確保や解放を行うようなマルチスレッドアプリケー
ションでは、これらの mutex の衝突が起こり得る。マルチスレッドアプリケーション
でのメモリ割り当て処理にスケーラビリティを持たせるために、glibc では mutex の
衝突が検出された際には追加の \fIメモリ割り当て領域\fP を作成する。
追加領域の各々は、(\fBbrk\fP(2) や \fBmmap\fP(2) を使って) システムにより内部的に
割り当てられた大きな領域で、それぞれ独自の mutex により管理されている。

UNIX 98 標準では、 \fBmalloc\fP(), \fBcalloc\fP(), \fBrealloc\fP() は実行に失敗したときに \fIerrno\fP を
\fBENOMEM\fP に設定することになっている。 Glibc ではこれが守られていることを仮定している (またこれらのルーチンの glibc
バージョンはこのことを守っている)。 個人的に別の malloc の実装を使っていて、その malloc が\fIerrno\fP
を設定しない場合には、失敗した際に \fIerrno\fP にエラーの理由を設定しないライブラリルーチンがあるかもしれない。
.LP
\fBmalloc\fP(), \fBcalloc\fP(), \fBrealloc\fP(), \fBfree\fP()  における事故は、 ほとんどの場合はヒープの破壊
(corruption) が原因である。 例えば、割り当てられた領域をオーバーフローする、 同じポインタに二度 free する、などがこれにあたる。
.PP
Linux libc の新しいバージョン (5.4.23 より後) と glibc (2.x) には、
環境変数で動作を調整できる \fBmalloc\fP() 実装が含まれている。
詳細は \fBmallopt\fP(3) を参照のこと。
.SH 関連項目
.\" http://g.oswego.edu/dl/html/malloc.html
.\" A Memory Allocator - by Doug Lea
.\"
.\" http://www.bozemanpass.com/info/linux/malloc/Linux_Heap_Contention.html
.\" Linux Heap, Contention in free() - David Boreham
.\"
.\" http://www.citi.umich.edu/projects/linux-scalability/reports/malloc.html
.\" malloc() Performance in a Multithreaded Linux Environment -
.\"     Check Lever, David Boreham
.\"
\fBbrk\fP(2), \fBmmap\fP(2), \fBalloca\fP(3), \fBmalloc_get_state\fP(3),
\fBmalloc_info\fP(3), \fBmalloc_trim\fP(3), \fBmalloc_usable_size\fP(3),
\fBmallopt\fP(3), \fBmcheck\fP(3), \fBmtrace\fP(3), \fBposix_memalign\fP(3)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.41 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
