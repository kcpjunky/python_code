.\" Copyright (C) 2007, 2010 Michael Kerrisk <mtk.manpages@gmail.com>
.\" and Copyright (c) 1993 by Thomas Koenig (ig25@rz.uni-karlsruhe.de)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" License.
.\" Modified Sat Jul 24 18:34:44 1993 by Rik Faith (faith@cs.unc.edu)
.\" Merged readv.[23], 2002-10-17, aeb
.\" 2007-04-30 mtk, A fairly major rewrite to fix errors and
.\"     add more details.
.\" 2010-11-16, mtk, Added documentation of preadv() and pwritev()
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH READV 2 2010\-11\-17 Linux "Linux Programmer's Manual"
.SH 名前
readv, writev, preadv, pwritev \- 複数のバッファへの読み書きを行なう
.SH 書式
.nf
\fB#include <sys/uio.h>\fP
.sp
\fBssize_t readv(int \fP\fIfd\fP\fB, const struct iovec *\fP\fIiov\fP\fB, int \fP\fIiovcnt\fP\fB);\fP
.sp
\fBssize_t writev(int \fP\fIfd\fP\fB, const struct iovec *\fP\fIiov\fP\fB, int \fP\fIiovcnt\fP\fB);\fP
.sp
\fBssize_t preadv(int \fP\fIfd\fP\fB, const struct iovec *\fP\fIiov\fP\fB, int \fP\fIiovcnt\fP\fB,\fP
\fB               off_t \fP\fIoffset\fP\fB);\fP
.sp
\fBssize_t pwritev(int \fP\fIfd\fP\fB, const struct iovec *\fP\fIiov\fP\fB, int \fP\fIiovcnt\fP\fB,\fP
\fB                off_t \fP\fIoffset\fP\fB);\fP
.fi
.sp
.in -4n
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.in
.sp
\fBpreadv\fP(), \fBpwritev\fP(): _BSD_SOURCE
.SH 説明
\fBreadv\fP() システムコールは、ファイルディスクリプタ \fIfd\fP に関連付けられた
ファイルから、 \fIiovcnt\fP 個のバッファ分のデータを読み込み、 \fIiov\fP で指定
されたバッファに格納する ("scatter input";「ばらまき入力」)。
.PP
\fBwritev\fP() システムコールは、 \fIiov\fP で指定されたバッファから最大 \fIiovcnt\fP
個のバッファ分のデータを取り出し、 ファイルディスクリプタ \fIfd\fP に関連付けら
れたファイルに書き込む ("gather output";「かき集め出力」)。
.PP
ポインタ \fIiov\fP は \fIiovec\fP 構造体の配列へのポインタである。 \fIiovec\fP 構造体は \fI<sys/uio.h>\fP
で以下のように定義されている:
.PP
.br
.in +4n
.nf
struct iovec {
    void  *iov_base;    /* Starting address */
    size_t iov_len;     /* Number of bytes to transfer */
};
.fi
.in
.PP
\fBreadv\fP() システムコールは、複数のバッファにデータを読み込む点を除いて
\fBread\fP(2) と全く同様の動作を行う。
.PP
\fBwritev\fP() システムコールは、複数のバッファのデータを書き出す点以外は
\fBwrite\fP(2) と全く同様の動作を行う。
.PP
バッファは配列の順序で処理される。これは、 \fBreadv\fP()  が \fIiov\fP[0] が完全に一杯になるまでデータを詰めてから、
\fIiov\fP[1] などに進むことを意味する (データが十分ない場合は、 \fIiov\fP が指すバッファのいずれも一杯にならない)。 同様に、
\fBwritev\fP()  は \fIiov\fP[0] の内容を全部書き出してから \fIiov\fP[1] などに進む。
.PP
\fBreadv\fP()  と \fBwritev\fP()  によるデータ転送は atomic に行われる。つまり、 \fBwritev\fP()
によるデータ書き込みは一つのブロックとして行われ、他のプロセスの write による書き込みと混ざり合うことはない (例外に関しては
\fBpipe\fP(7)  を参照のこと)。同様に、 \fBreadv\fP()  はファイルから連続するデータブロックが読み出すことが保証され、
同じファイル記述 (file description; \fBopen\fP(2)  参照) を参照するファイルディスクリプタを持つ他のスレッドやプロセスが
実行した read 操作の影響を受けることはない。
.SS "preadv() と pwritev()"
\fBpreadv\fP() システムコールは \fBreadv\fP() と \fBpreadv\fP(2) の機能を
組み合わせたものである。
\fBreadv\fP() と同じ処理を実行するが、
4 番目の引き数 \fIoffset\fP が追加されており、
この引き数は入力操作を行うファイルオフセットを指定する。

\fBpwritev\fP() システムコールは \fBwritev\fP() と \fBpwrite\fP(2) の機能を
組み合わせたものである。
\fBwritev\fP() と同じ処理を実行するが、
4 番目の引き数 \fIoffset\fP が追加されており、
この引き数は出力操作を行うファイルオフセットを指定する。

これらのシステムコールで、ファイルオフセットは変更されない。
\fIfd\fP が参照するファイルは seek 可能でなければならない。
.SH 返り値
成功した場合、 \fBreadv\fP() と \fBpreadv\fP は読み込んだバイト数を返し、
\fBwritev\fP() と \fBpwritev\fP()は書き込んだバイト数を返す。
エラーの場合 \-1 を返し、\fIerrno\fP を適切に設定する。
.SH エラー
\fBread\fP(2)  や \fBwrite\fP(2)  と同じエラーが定義されている。
さらに、 \fBpreadv\fP() と \fBpwritev\fP() は \fBlseek\fP(2) と同じ理由でも失敗する。
また、追加で以下のエラーが定義されている:
.TP 
\fBEINVAL\fP
\fIiov_len\fP の合計が \fIssize_t\fP の範囲をオーバーフローした。もしくは、 ベクタ数 \fIiovcnt\fP が 0
より小さいか許可された最大値よりも大きかった。
.SH バージョン
\fBpreadv\fP() と \fBpwritev\fP() は Linux 2.6.30 で初めて登場した。
ライブラリによるサポートは glibc 2.10 で追加された。
.SH 準拠
.\" The readv/writev system calls were buggy before Linux 1.3.40.
.\" (Says release.libc.)
\fBreadv\fP(), \fBwritev\fP():
4.4BSD (これらのシステムコールは 4.2BSD で最初に現われた)、POSIX.1\-2001。
Linux libc5 では、 \fIiovcnt\fP 引き数の型として \fIsize_t\fP を、
返り値の型として \fIint\fP を使用していた。

\fBpreadv\fP(), \fBpwritev\fP(): 非標準だが、最近の BSD にも存在する。
.SH 注意
.SS "Linux での注意"
POSIX.1\-2001 では、 \fIiov\fP で渡すことができる要素数に上限を設ける実装が認められている。 実装は、
\fI<limits.h>\fP の \fBIOV_MAX\fP を定義することや、実行時に \fIsysconf(_SC_IOV_MAX)\fP
の返り値経由で、この上限を広告することができる。 Linux では、この仕組みにより広告される上限は 1024 であり、
この値はカーネルでの上限そのものである。 一方で、glibc のラッパー関数は、その関数の内部で呼ばれるカーネル
システムコールがこの上限を超過して失敗したことを検出すると、 追加の動作をする。 \fBreadv\fP()  の場合、ラッパー関数は \fIiov\fP
で指定された全ての要素を格納できる大きさの一時バッファを割り当て、 \fBread\fP(2)  を呼び出す際にそのバッファを渡し、 そのバッファのデータを
\fIiov\fP の各要素の \fIiov_base\fP フィールドが指定する場所にコピーしてから、 そのバッファを解放する。 \fBwritev\fP()
のラッパー関数も、同じように一時バッファを使って \fBwrite\fP(2)  を呼び出す。
.SH バグ
ファイルディスクリプタに対する操作を行う \fBreadv\fP() や \fBwritev\fP() と、
標準入出力ライブラリの関数をごちゃまぜにして呼ぶのはお薦めしない。
どんな結果になるかは定義されておらず、おそらく期待する結果は
得られないだろう。
.SH 例
以下のサンプルコードは \fBwritev\fP()  の使用方法を示すものである。

.in +4n
.nf
char *str0 = "hello ";
char *str1 = "world\en";
struct iovec iov[2];
ssize_t nwritten;

iov[0].iov_base = str0;
iov[0].iov_len = strlen(str0);
iov[1].iov_base = str1;
iov[1].iov_len = strlen(str1);

nwritten = writev(STDOUT_FILENO, iov, 2);
.fi
.in
.SH 関連項目
\fBpread\fP(2), \fBread\fP(2), \fBwrite\fP(2)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.41 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
