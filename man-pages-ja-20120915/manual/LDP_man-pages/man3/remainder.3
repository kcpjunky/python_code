.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\"
.\" Modified 1993-07-24 by Rik Faith (faith@cs.unc.edu)
.\" Modified 2002-08-10 Walter Harms
.\"	(walter.harms@informatik.uni-oldenburg.de)
.\" Modified 2003-11-18, 2004-10-05 aeb
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH REMAINDER 3 2010\-09\-20 "" "Linux Programmer's Manual"
.SH 名前
drem, dremf, dreml, remainder, remainderf, remainderl \- 浮動小数点剰余関数
.SH 書式
.nf
\fB#include <math.h>\fP
.sp
/* C99 版 */
\fBdouble remainder(double \fP\fIx\fP\fB, double \fP\fIy\fP\fB);\fP
\fBfloat remainderf(float \fP\fIx\fP\fB, float \fP\fIy\fP\fB);\fP
\fBlong double remainderl(long double \fP\fIx\fP\fB, long double \fP\fIy\fP\fB);\fP
.sp
/* 廃止された別名 */
\fBdouble drem(double \fP\fIx\fP\fB, double \fP\fIy\fP\fB);\fP
\fBfloat dremf(float \fP\fIx\fP\fB, float \fP\fIy\fP\fB);\fP
\fBlong double dreml(long double \fP\fIx\fP\fB, long double \fP\fIy\fP\fB);\fP
.sp
.fi
\fI\-lm\fP でリンクする。
.sp
.in -4n
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.in
.sp
.ad l
\fBremainder\fP():
.RS 4
_SVID_SOURCE || _BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 || _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED || _ISOC99_SOURCE || _POSIX_C_SOURCE\ >=\ 200112L;
.br
or \fIcc\ \-std=c99\fP
.RE
.br
\fBremainderf\fP(), \fBremainderl\fP():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE
|| _POSIX_C_SOURCE\ >=\ 200112L;
.br
or \fIcc\ \-std=c99\fP
.RE
.br
\fBdrem\fP(), \fBdremf\fP(), \fBdreml\fP():
.RS 4
_SVID_SOURCE || _BSD_SOURCE
.RE
.ad b
.SH 説明
\fBremainder\fP()  関数は \fIx\fP を \fIy\fP で割った余りを計算する。 返り値は \fIx\fP\-\fIn\fP*\fIy\fP である。 ここで
\fIn\fP は \fIx\ /\ y\fP の値を最も近い整数に丸めたものである。 \fIx\fP\-\fIn\fP*\fIy\fP の絶対値が 0.5 の場合、偶数になるように
\fIn\fP が選ばれる。

これらの関数は、現在の丸めモードの影響を受けない (丸めモードについては \fBfenv\fP(3)  を参照)。
.LP
\fBdrem\fP()  関数はこれと全く同じ動作をする。
.SH 返り値
成功すると、これらの関数は浮動小数点の剰余 \fIx\fP\-\fIn\fP*\fIy\fP を返す。 返り値が 0 の場合、その符号は \fIx\fP と同じになる。

\fIx\fP か \fIy\fP が NaN の場合、NaN が返される。

\fIx\fP が無限大で \fIy\fP が NaN でない場合、 領域エラー (domain error) が発生し、NaN が返される。

.\" FIXME . Instead, glibc gives a domain error even if x is a NaN
.\" Interestingly, remquo(3) does not have the same problem.
\fIy\fP がゼロで \fIx\fP が NaN でない場合、 領域エラー (domain error) が発生し、NaN が返される。
.SH エラー
これらの関数を呼び出した際にエラーが発生したかの判定方法についての情報は \fBmath_error\fP(7)  を参照のこと。
.PP
以下のエラーが発生する可能性がある。
.TP 
領域エラー (domain error): \fIx\fP が無限大で \fIy\fP が NaN ではない
.\" .I errno
.\" is set to
.\" .BR EDOM .
不正 (invalid) 浮動小数点例外 (\fBFE_INVALID\fP)  が上がる。
.IP
.\" FIXME . Is it intentional that these functions do not set errno?
.\" They do set errno for the y == 0 case, below.
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6783
これらの関数は、この場合に \fIerrno\fP を設定しない。
.TP 
.\" [XXX see bug above] and \fIx\fP is not a NaN
領域エラー: \fIy\fP がゼロ
\fIerrno\fP に \fBEDOM\fP が設定される。 不正 (invalid) 浮動小数点例外 (\fBFE_INVALID\fP)  が上がる。
.SH 準拠
.\" IEC 60559.
関数 \fBremainder\fP(), \fBremainderf\fP(), \fBremainderl\fP()  は C99 と POSIX.1\-2001
で規定されている。

関数 \fBdrem\fP()  は 4.3BSD に由来する。 \fIfloat\fP と \fIlong double\fP 版の \fBdremf\fP()  と
\fBdreml\fP()  は、Tru64 や glibc2 のようないくつかのシステムに存在する。 これらの関数の使用は避けて、
\fBremainder\fP()  などを使用すること。
.SH バグ
呼び出し

    remainder(nan(""), 0);

.\" FIXME . this bug occurs as at glibc 2.8.
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6779
を行うと、期待通り Nan が返るが、誤って領域エラーが発生する。 正しくはエラーなしの Nan となるべきである。
.SH 例
"remainder(29.0, 3.0)" を呼び出すと \-1 を返す。
.SH 関連項目
\fBdiv\fP(3), \fBfmod\fP(3), \fBremquo\fP(3)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.41 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
