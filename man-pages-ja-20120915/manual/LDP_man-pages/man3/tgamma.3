.\" Copyright 2002 Walter Harms (walter.harms@informatik.uni-oldenburg.de)
.\" Distributed under GPL
.\" Based on glibc infopages
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\" Modified 2004-11-15, fixed error noted by Fabian Kreutz
.\"	 <kreutz@dbs.uni-hannover.de>
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH TGAMMA 3 2010\-09\-20 GNU "Linux Programmer's Manual"
.SH 名前
tgamma, tgammaf, tgammal \- 本当のガンマ関数
.SH 書式
\fB#include <math.h>\fP
.sp
\fBdouble tgamma(double \fP\fIx\fP\fB);\fP
.br
\fBfloat tgammaf(float \fP\fIx\fP\fB);\fP
.br
\fBlong double tgammal(long double \fP\fIx\fP\fB);\fP
.sp
\fI\-lm\fP でリンクする。
.sp
.in -4n
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.in
.sp
.ad l
\fBtgamma\fP(), \fBtgammaf\fP(), \fBtgammal\fP():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE || _POSIX_C_SOURCE\ >=\ 200112L;
.br
or \fIcc\ \-std=c99\fP
.RE
.ad
.SH 説明
ガンマ関数は以下のように定義される:
.sp
     Gamma(x) = t^(x\-1) e^\-t dt の 0 から無限大までの積分
.sp
この関数は正でない整数を除くすべての実数に対して定義されている。 非負の整数 \fIm\fP に関して、以下が成立する:
.sp
    Gamma(m+1) = m!
.sp
より一般的には、すべての \fIx\fP に関して以下が成立する:
.sp
    Gamma(x+1) = x * Gamma(x)
.sp
さらに、極を除くすべての \fIx\fP で次式も成立する:
.sp
    Gamma(x) * Gamma(1 \- x) = PI / sin(PI * x)
.PP
.SH 返り値
成功すると、これらの関数は Gamma(x) を返す。

\fIx\fP が NaN の場合、NaN が返される。

\fIx\fP が正の無限大の場合、正の無限大が返される。

\fIx\fP が負の整数か負の無限大の場合、領域エラー (domain error) が発生し、 NaN が返される。

結果がオーバーフローする場合、範囲エラー (range error) が発生し、 各関数はそれぞれ \fBHUGE_VAL\fP, \fBHUGE_VALF\fP,
\fBHUGE_VALL\fP, を返す。この際、数学的に正しい符号が付与される。

結果がアンダーフローする場合、範囲エラー (range error) が発生し、 関数は 0 をを返す。この際、数学的に正しい符号が付与される。

\fIx\fP が \-0 か +0 の場合、極エラー (pole error) が発生し、 各関数はそれぞれ \fBHUGE_VAL\fP,
\fBHUGE_VALF\fP, \fBHUGE_VALL\fP, を返す。 0 と同じ符号が付与される。
.SH エラー
これらの関数を呼び出した際にエラーが発生したかの判定方法についての情報は \fBmath_error\fP(7)  を参照のこと。
.PP
以下のエラーが発生する可能性がある。
.TP 
領域エラー: \fIx\fP が負の整数か負の無限大
.\" FIXME . errno is not set to EDOM for x == -inf
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6809
\fIerrno\fP に \fBEDOM\fP が設定される。 不正 (invalid) 浮動小数点例外 (\fBFE_INVALID\fP)  が上がる
(「バグ」の節を参照)。
.TP 
極エラー (pole error): \fIx\fP が +0 か \-0
\fIerrno\fP に \fBERANGE\fP が設定される。 0 による除算 (divide\-by\-zero) 浮動小数点例外
(\fBFE_DIVBYZERO\fP)  が上がる。
.TP 
範囲エラー (range error): 結果のオーバーフロー
\fIerrno\fP に \fBERANGE\fP が設定される。 オーバーフロー浮動小数点例外 (\fBFE_OVERFLOW\fP)  が上がる。
.PP
glibc では、C99 や POSIX.1\-2001 で規定されていない以下のエラーも 起こり得る。
.TP 
範囲エラー (range error): 結果のアンダーフロー
.\" e.g., tgamma(-172.5) on glibc 2.8/x86-32
.\" .I errno
.\" is set to
.\" .BR ERANGE .
アンダーフロー浮動小数点例外 (\fBFE_UNDERFLOW\fP)  が上がる。
.IP
.\" FIXME . Is it intentional that errno is not set:
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6810
.\"
.\" glibc (as at 2.8) also supports and an inexact
.\" exception for various cases.
この場合は \fIerrno\fP は設定されない。
.SH バージョン
これらの関数は glibc バージョン 2.1 で初めて登場した。
.SH 準拠
C99, POSIX.1\-2001.
.SH 注意
この関数を「本当の (true) ガンマ関数」と呼ばなければならなかった。 なぜなら、他の値を返す \fBgamma\fP(3)
という関数がすでに存在するからである (詳細については \fBgamma\fP(3)  を参照)。
.SH バグ
.\" Bug raised: http://sources.redhat.com/bugzilla/show_bug.cgi?id=6809
\fIx\fP が負の無限大の場合、 \fIerrno\fP は設定されない (\fBEDOM\fP が設定されるべきである)。

glibc バージョン 2.3.3 以前では、 引き数に +0 や \-0 を渡すと、極エラーではなく、 領域エラーを間違って発生していた
(領域エラーの場合、 \fIerrno\fP に \fBEDOM\fP を設定され、 \fBFE_INVALID\fP 例外が発生する)。
.SH 関連項目
\fBgamma\fP(3), \fBlgamma\fP(3)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.41 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
