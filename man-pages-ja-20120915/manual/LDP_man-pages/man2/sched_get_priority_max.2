.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (C) Tom Bjorkholm & Markus Kuhn, 1996
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,
.\" USA.
.\"
.\" 1996-04-01 Tom Bjorkholm <tomb@mydata.se>
.\"            First version written
.\" 1996-04-10 Markus Kuhn <mskuhn@cip.informatik.uni-erlangen.de>
.\"            revision
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH SCHED_GET_PRIORITY_MAX 2 2006\-03\-23 Linux "Linux Programmer's Manual"
.SH 名前
sched_get_priority_max, sched_get_priority_min \- 静的プライオリティの範囲を取得する
.SH 書式
\fB#include <sched.h>\fP
.sp
\fBint sched_get_priority_max(int \fP\fIpolicy\fP\fB);\fP
.sp
\fBint sched_get_priority_min(int \fP\fIpolicy\fP\fB);\fP
.SH 説明
\fBsched_get_priority_max\fP()  は\fIpolicy\fP によって指定されたスケジューリングのアルゴリズムで
使用されるプライオリティの最大値を返す。 \fBsched_get_priority_min\fP()  は\fIpolicy\fP
によって指定されたスケジューリングのアルゴリズムで 使用されるプライオリティの最小値を返す。 サポートされる \fIpolicy\fP の値は
\fBSCHED_FIFO\fP、 \fBSCHED_RR\fP、 \fBSCHED_OTHER\fP、 \fBSCHED_BATCH\fP
である。これらのスケジューリング方針に関する詳細は \fBsched_setscheduler\fP(2)  に書かれている。

数値的に大きなプライオリティ値を持つプロセスは小さな プライオリティ値を持つプロセスより前にスケジュールされる。 このため
\fBsched_get_priority_max\fP()  が返す値は \fBsched_get_priority_min\fP()  が返す値よりも大きい。

Linux では \fBSCHED_FIFO\fP と \fBSCHED_RR\fP では 1 から 99 の範囲の
静的プライオリティーを持ち、\fBSCHED_OTHER\fP と \fBSCHED_BATCH\fP では プライオリティとして 0 を持つ。
それぞれの方針のスケジューリング・プライオリティの範囲は 変更することができない。

スケジューリング・プライオリティの範囲は他の POSIX システムと 異なっているかもしれない。それで、移植性(portable)のある
アプリケーションでは仮想的な範囲を用い \fBsched_get_priority_max\fP()  と
\fBsched_get_priority_min\fP()  で与えられた間隔にマップして使用することはいい考えである。 POSIX.1\-2001 では
\fBSCHED_FIFO\fP と \fBSCHED_RR\fP における 最大値と最小値の間隔を少なくとも 32 にすることを要求している。

POSIX システムでは \fBsched_get_priority_max\fP()  と \fBsched_get_priority_min\fP()  は
\fI<unistd.h>\fP に \fB_POSIX_PRIORITY_SCHEDULING\fP が定義されている場合にのみ使用可能である。
.SH 返り値
成功した場合は \fBsched_get_priority_max\fP()  と \fBsched_get_priority_min\fP()
は指定されたスケジューリング方針のプライオリティの最大値/最小値を返す。 エラーの場合は \-1 が返され、 \fIerrno\fP が適切に設定される。
.SH エラー
.TP 
\fBEINVAL\fP
引き数 \fIpolicy\fP が定義されているスケジューリング方針と一致しない。
.SH 準拠
POSIX.1\-2001.
.SH 関連項目
\fBsched_getaffinity\fP(2), \fBsched_getparam\fP(2)  \fBsched_getscheduler\fP(2),
\fBsched_setaffinity\fP(2), \fBsched_setparam\fP(2), \fBsched_setscheduler\fP(2),
.PP
\fIProgramming for the real world \- POSIX.4\fP by Bill O. Gallmeister, O'Reilly
& Associates, Inc., ISBN 1\-56592\-074\-0
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.41 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
