.\" Copyright (c) 1995,1997 Paul Gortmaker and Andries Brouwer
.\"
.\" This is free documentation; you can redistribute it and/or
.\" modify it under the terms of the GNU General Public License as
.\" published by the Free Software Foundation; either version 2 of
.\" the License, or (at your option) any later version.
.\"
.\" The GNU General Public License's references to "object code"
.\" and "executables" are to be interpreted as the output of any
.\" document formatting or typesetting system, including
.\" intermediate and printed output.
.\"
.\" This manual is distributed in the hope that it will be useful,
.\" but WITHOUT ANY WARRANTY; without even the implied warranty of
.\" MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\" GNU General Public License for more details.
.\"
.\" You should have received a copy of the GNU General Public
.\" License along with this manual; if not, write to the Free
.\" Software Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111,
.\" USA.
.\"
.\" This man page written 950814 by aeb, based on Paul Gortmaker's HOWTO
.\" (dated v1.0.1, 15/08/95).
.\" Major update, aeb, 970114.
.\" FIXME ? The use of quotes on this page is inconsistent with the
.\" rest of man-pages.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH BOOTPARAM 7 2007\-12\-16 Linux "Linux Programmer's Manual"
.SH 名前
bootparam \- Linux カーネル起動時パラメータの解説
.SH 説明
Linux カーネルは起動するときに「コマンドラインオプション」あるいは 「起動時パラメータ」を受け付ける。 これは一般に、
カーネルには決定できないハードウェアのパラメータをカーネルに渡したい場合や、
カーネルが検出するであろう値を意図的に無効にしたり変更したりする場合に用いる。

カーネルが BIOS から直接起動されるとき (たとえば 'cp zImage /dev/fd0' でフロッピーにコピーしたカーネルから起動するなど)
は、 パラメータを指定する機会はない。 ゆえに、この起動時パラメータ機能を利用するためには、 \fILILO\fP や \fIloadlin\fP
のようにパラメータを指定できるソフトウェアを使用しなければならない。 いくつかのパラメータについては、 \fIrdev\fP
を使ってカーネルイメージそのものを修正することもできる。 詳細は \fBrdev\fP(8)  を参照のこと。

Werner Almesberger による LILO (LInux LOader) プログラムは最も広く使用されている。 LILO
はいろいろなカーネルを選択してブートさせることができ、 設定情報をテキストファイルに保持する (\fBlilo\fP(8)  と
\fBlilo.conf\fP(5)  を参照)。 LILO は DOS, OS/2, Linux, FreeBSD などを起動でき、 非常に柔軟である。

ほかには \fIloadLin\fP もよく使われている Linux ローダである。 これは DOS のプログラムで、DOS プロンプトから
(起動時引数とともに) Linux カーネルを起動できる (いくつかの特定のリソースが利用可能でなければならない)。 loadlin は DOS から
Linux を起動させたい人にあっている。

また loadlin は、DOS のドライバである状態に 設定しなければならないハードウェアを 使っている場合にも非常に便利である。 よくある例は
「SoundBlaster 互換」のサウンドカードで、 これらの中には DOS のドライバを使って いくつか秘密のレジスタをいじってやらないと、 本当の
SB 互換モードにはならないようなものがある。 まずハードウェアについてきたドライバを組み込んで DOS を起動し、 その後 loadlin を使用して
Linux カーネルを読み込めば、 リブートによってカードの設定がリセットされるのを防げるわけだ。
.SS 引数リスト
カーネルのコマンドラインはスペースで区切られた文字列 (\fI起動時引数: boot arguments\fP)
のリストから成っている。ほとんどの起動時引数は次の書式に従う。
.IP
name[=value_1][,value_2]...[,value_10]
.LP
ここで 'name' は、それに対応する値がカーネルのどの部分に渡されるものなのかを 識別するための、他と重ならないキーワードである。 書式中の 10
という制限は実際に存在する。 現在のコードは、キーワードひとつあたり、コンマで区切られたパラメータを 10 個までしか取り扱うことができない。
(しかし、事情が非常に複雑な場合には、同じキーワードを再度利用して 10 個以上のパラメータを与えることができるかもしれない。
対象となるハードウェアの設定関数がそれをサポートしていれば、だが。)

カーネルコマンドラインの扱いはほとんど linux/init/main.c が行なっている。 初めに、カーネルは \&'root=',
\&'nfsroot=', 'nfsaddrs=', 'ro', 'rw', 'debug', 'init' といった特別な引数があるかをチェックする。
これらの意味については後述する。

カーネルは次に設定関数のリスト (配列 bootsetups に含まれている) をスキャンし、 指定された引数文字列 (例えば 'foo') が
特定のデバイスやカーネルの一部に対する設定関数 ('foo_setup()') に関連付けられているかを調べる。 例えばカーネルに
foo=3,4,5,6 のようなパラメータを与えたとすると、 カーネルは配列 bootsetups を調べて、 'foo' が登録されているか調べる。
登録されていたら、'foo' に対応する設定関数 ('foo_setup()') をコールし、 カーネルコマンドラインに与えられた引数である 3, 4,
5, 6 を設定関数に渡す。

\&'foo=bar' という形式の引数のうち、 上記のように設定関数に受け入れられなかったものは、 環境変数と解釈されて設定される。
(あまり役に立たない?) 例としては、'TERM=VT100' がある。

カーネルによって処理されず、環境変数としても解釈されなかった 残りの引数は、プロセス 1 に渡されることになる。 通常このプロセス 1 は
\fIinit\fP プログラムである。 プロセス 1 に渡される引数で最も良く使われるのは、 \&'single' というキーワードである。
これを指定すると init はシングルユーザモードでコンピュータを起動し、 通常使われるデーモンは一切起動しない。 システムにインストールされている
init が どんな引数を受け付けるかは、 マニュアルページで調べること。
.SS 一般的な、デバイス固有ではない起動時引き数
.TP 
\&\fB'init=...'\fP
カーネルが実行する初期コマンドを設定する。 この指定がなされなかったり、指定したコマンドが見つからなかった場合には、 カーネルは
\fI/sbin/init\fP, \fI/etc/init\fP, \fI/bin/init\fP, \fI/bin/sh\fP の順で実行を試み、すべてに失敗したら
panic を起こす。
.TP 
\&\fB'nfsaddrs=...'\fP
nfs のブートアドレスを指定した文字列に設定する。 このブートアドレスはネットワークブートの場合に用いられる。
.TP 
\&\fB'nfsroot=...'\fP
nfs ルートの名前を設定する。 この文字列の先頭が '/'、','、数字のいずれでもでないときは、 \&'/tftpboot/' が先頭に付加される。
この名前はネットワークブートの場合に用いられる。
.TP 
\&\fB'no387'\fP
(カーネルのコンパイル時に \fBCONFIG_BUGi386\fP が指定されたときのみ有効。)  一部の i387 コプロセッサチップには、 32
ビットプロテクトモードでの使用時に生じるバグがある。 例えば初期の ULSI\-387 チップは、 浮動小数点演算を行なうと確実にロックアップしてしまう。
この起動時引数 'no387' を指定すると、 Linux はコプロセッサがあってもそれを無視するようになる。
なおもちろん、カーネルコンパイル時に浮動小数点演算をエミュレートする (kernel math emulation) 指定をしなければならない!
.TP 
\&\fB'no\-hlt'\fP
(カーネルのコンパイル時に \fBCONFIG_BUGi386\fP が指定されたときのみ有効。)  初期の i486DX\-100 チップの一部では
\&'hlt' 命令に問題があって、 この命令を使うとオペレーティングモードに正しく戻って来ない。 \&'no\-hlt' を指定すれば、Linux
はアイドリング時に CPU を停止 (halt) するかわりに無限ループを実行するようになる。 これによって、そのようなバグのあるチップでも Linux
を使用できる。
.TP 
\&\fB'root=...'\fP
起動時にルートファイルシステムとして使われるデバイスをカーネルに指定する。 デフォルトはコンパイル時に決定され、
通常はカーネルを構築したシステムのルートデバイスになる。 この値を無効にして、 例えば 2
番目のフロッピーディスクドライブをルートデバイスに指定する場合は、 \&'root=/dev/fd1' とする。 (ルートデバイスは
\fBrdev\fP(8)  を用いても設定できる。)

ルートデバイスの指定にはシンボル形式と数値形式を用いることができる。 シンボル形式の場合は /dev/XXYN という書式で指定する。 XX
にはデバイスタイプを指定する。 Y にはドライブレターもしくはドライブ番号、 N には (フロッピーディスクを除く) ディスクの パーティション番号を
10 進数の数値で指定する。 (ST\-506 互換ハードディスクではデバイスタイプが 'hd' で Y の範囲は 'a' から 'd'、 SCSI
ディスクは 'sd' で Y は 'a' から 'e'、 Atari ACSI ディスクは 'ad' で Y は 'a' から 'e'、 Syquest
EZ135 パラレルポートリムーバブルディスクは 'ez' で Y は 'a' のみ、 XT ディスクは 'xt' で Y は 'a' か 'b'、
フロッピーディスクは 'fd' で Y にはドライブ番号を指定する。 fd0 は DOS の 'A:'、fd1 は 'B:' に対応している。
パーティションは存在しないので N は指定しない。)  最新のカーネルでは、他にも次のような多くのデバイスタイプを指定できる (ほとんどは CD\-ROM
だが): nfs, ram, scd, mcd, cdu535, aztcd, cm206cd, gscd, sbpcd, sonycd, bpcd。
(nfs はネットワークブートに、ram は RAM ディスクを使用する場合に用いる。)

なお、これらはファイルシステム上でのデバイスの指定方法とは全く関係ない。 \&'/dev/' を用いるのは単に慣習に過ぎない。

扱いにくいし移植性も良くないが、 上記のデバイスを major/minor 番号の数値で指定してもよい。 (例えば /dev/sda3 は major
番号 8、minor 番号 3 なので、 \&'root=0x803' と記述できる。)
.TP 
\&\fB'ro'\fP と \fB'rw'\fP
\&'ro' オプションは、ルートファイルシステムを 「読み出し専用」でマウントするようカーネルに指示し、 fsck
プログラムがファイルシステムの矛盾を検査できるようにする。 ファイルシステムが「読み書き可能」として再マウントされる (つまり 'mount \-w \-n
\-o remount /') までの間は、 いかなるプロセスもこのファイルシステム上のファイルに書き込むことはできない。 (\fBmount\fP(8)
も参照せよ。)

rw オプションはルートファイルシステムを 「読み書き可能」でマウントするようカーネルに指示する。 こちらがデフォルトである。

省略時の指定を「読み出し専用」と 「読み書き可能」とのどちらにするかは、 \fBrdev\fP(8)  によっても設定できる。
.TP 
\&\fB'reserve=...'\fP
デバイスの自動検出から I/O ポートを保護するために用いる。 コマンドの形式は以下の通り。
.IP
\fBreserve=\fP\fIiobase,extent[,iobase,extent]...\fP
.sp
機種によっては、 デバイスドライバによるデバイスの自動検出を、 特定の範囲に対しては禁止しなければならないことがある。
ハードウェアが検出動作によって深刻な問題を引き起こす場合や、 誤認識される可能性がある場合、
また単にカーネルにハードウェアを初期化させたくない場合などがありうるだろう。

この起動時引数 reserve は、自動検出の対象外とする I/O ポートの範囲を指定する。 デバイスドライバは、
他の起動時引数によって明示的に指定されない限り、 予約された範囲に対して自動検出動作を行わない。

例えばブート時のコマンドラインに
.IP
reserve=0x300,32 blah=0x300
.IP
と指定すると、'blah' を除くすべてのデバイスドライバは 0x300 から 0x31f の範囲を自動検出の対象外とする。
.TP 
\&\fB'mem=...'\fP
搭載されているメモリの量を返す BIOS コールは PC の仕様で定義されているが、これは最大 64MB までしか返すことができない。 Linux
は搭載メモリの量を調べるために、 起動時にこの BIOS コールを使用する。 もし 64MB 以上の RAM を搭載している場合は、
この起動時引数を用いて 実際のメモリ容量を Linux に知らせることができる。 値は 10 進数または 16 進数 (先頭に 0x を付加)
の数値で指定し、 1024 倍を表す 'k' または 1048576 倍を表す 'M' を末尾に付加できる。 以下は Linus による 'mem='
パラメータの解説である。

.in +0.5i
カーネルは 'mem=xx' パラメータとして どんな値を指定してもそれをそのまま受け入れる。 だからそれが嘘だとわかったら、
遅かれ早かれひどいクラッシュをするだろう。 パラメータはアクセスしうる最も高位の RAM アドレスを指示する。 だから例えば
\&'mem=0x1000000' っていうのは 16MB のメモリがある、という意味になる。 96MB のマシンなら 'mem=0x6000000' だ。

\fB注意\fP: マシンによってはメモリの最上位の領域を BIOS のキャッシュやら何やらの ために使っていることがあるから、 実際には 96MB
をフルにアドレスすることはできないかもしれない。 逆の場合もある。 いくつかのチップセットでは、 BIOS
領域に入っている物理メモリを最上位のメモリのさらに上にマップする。 よって最上位のメモリはたとえば 96MB + 384kB
なんて値になるかもしれない。 linux に実際より多いメモリを教えてしまったとしたら、 まずいことが起きるだろう。
すぐにではないかもしれないけど、ゆくゆくは確実にね。
.in

また、起動時引数に 'mem=nopentium' を指定すると、 pentium とそれ以降の CPU を使った IA32
システム用に設定されたカーネルで 4MB のページテーブルを無効にすることができる。
.TP 
\&\fB'panic=N'\fP
デフォルトでは、カーネルはパニックの後リブートしない。 このオプションを用いて (N を 0 より大きな値とすれば)  N
秒後にリブートするようになる。 この値は、起動後に "echo N > /proc/sys/kernel/panic"
として設定することもできる。
.TP 
\&\fB'reboot=[warm|cold][,[bios|hard]]'\fP
(カーネルコンパイル時に \fBCONFIG_BUGi386\fP が指定されたときのみ有効。)  カーネルバージョン 2.0.22 から、
リブートのデフォルトはコールドブートになった。 以前のデフォルトであるウォームブートをするには \&'reboot=warm'
と指定しなければならない。 (ある種のハードウェアをリセットするにはコールドブートが必要になるが、
ディスクキャッシュにある書き込んでいないデータは破壊される。 ウォームブートでは、より素早くリブートできる。)  デフォルトではリブートは 'hard'
で行われる。 すなわちリセットラインに low を出力するようキーボードコントローラに要求して、 リブートを行う。
しかし一部のマザーボードではこれができない。 \&'reboot=bios' オプションを指定すると、 代わりに BIOS を経由するようになる。
.TP 
\&\fB'nosmp'\fP と \fB'maxcpus=N'\fP
(カーネルのコンパイル時に __SMP__ が指定されたときのみ有効。)  コマンドラインオプションに 'nosmp' または 'maxcpus=0'
を指定すると、 SMP (Symmetric Multi Processing) を完全に無効にする。 \&'maxcpus=N' オプションは、
SMP モードで有効にする CPU の最大数を N に制限する。
.SS カーネル開発者用の起動時引数
.TP 
\&\fB'debug'\fP
カーネルが出力するメッセージはカーネルログデーモン klogd に渡され、 ディスクに記録できるようになる。 プライオリティが
\fIconsole_loglevel\fP のメッセージはコンソールにも表示される。
(これらのレベルについては、\fI<linux/kernel.h>\fP を参照。)  デフォルトではこの変数は、
デバッグメッセージよりも重要なあらゆるメッセージを記録するよう設定されている (デバッグメッセージは含まない)。 この起動時引数を指定すると、
カーネルはプライオリティが DEBUG のメッセージも出力するようになる。 \fIconsole_loglevel\fP も klogd
にオプションを渡せば実行時に設定できる。 \fBklogd\fP(8)  を見よ。
.TP 
\&\fB'profile=N'\fP
カーネルがどこで CPU サイクルを消費しているか調べたい場合には、 カーネルのプロファイリング機能を有効にすればこれを実現できる。
カーネルプロファイリングは、変数 \fIprof_shift\fP を 0 以外の値にセットすると有効になる。 この値はコンパイル時に
\fBCONFIG_PROFILE\fP で指定するか、 この 'prifile=N' オプションで指定できる。 \fIprof_shift\fP の値は N
が指定されれば N となり、N が指定されなかった場合は \fBCONFIG_PROFILE_SHIFT\fP の値が用いられる。
どちらも指定されなければデフォルト値の 2 が用いられる。 この変数が重要なのは、 カーネルプロファイリングの粒度を決定するところにある。
すなわち、各クロックの割込みごとに、システムがカーネルコードを実行していれば、 以下のようにカウンタの値がインクリメントされる。
.IP
profile[address >> prof_shift]++;
.sp
生のプロファイリング情報は、 \fI/proc/profile\fP から見ることができるが、readprofile.c
のような情報を加工するツールを使ったほうが良いだろう。 \fI/proc/profile\fP に任意のデータを書込むと、 カウンタはリセットされる。
.TP 
\&\fB'swap=N1,N2,N3,N4,N5,N6,N7,N8'\fP
カーネルのスワップアルゴリズムをコントロールする 次の 8 つのパラメータをセットする。 max_page_age, page_advance,
page_decline, page_initial_age, age_cluster_fract, age_cluster_min,
pageout_weight, bufferout_weight.  これはカーネルをチューンする人のためのオプションである。
.TP 
\&\fB'buff=N1,N2,N3,N4,N5,N6'\fP
カーネルのバッファメモリ管理をコントロールする 次の 6 つのパラメータをセットする。 max_buff_age, buff_advance,
buff_decline, buff_initial_age, bufferout_weight, buffermem_grace.
これはカーネルをチューンする人のためのオプションである。
.SS "RAM ディスク関連の起動時引数"
(カーネルのコンパイル時に \fBCONFIG_BLK_DEV_RAM\fP オプションが指定されたときのみ有効。)  一般的には、Linux で RAM
ディスクを使用するのはあまり良い考えではない。 システムに任せておけばもっと効率的にメモリを使用する。 しかしブート時
(またはブートフロッピーの作成中) には、 フロッピーの内容を RAM ディスクにロードすると便利かもしれない。
メインディスクがアクセス可能になる前に、 (ファイルシステムやハードウェアに関する)
モジュールをいくつかロードしなければならないシステムもあるだろう。

Linux のバージョン 1.3.48 において、 RAM ディスクの取り扱いが根底から変化した。 それ以前までは、メモリは静的に割り当てられ、
\&'ramdisk=N' パラメータでそのサイズを指定していた。 (この値はカーネルのコンパイル時や \fBrdev\fP(8)  によっても変更できた。)
現在は RAM ディスクはバッファキャッシュを使用しており、 動的に成長する。 さらに多くの情報 (たとえば \fBrdev\fP(8)  が新しい RAM
ディスクの設定とどのように関係するか) については、 \fI/usr/src/linux/Documentation/ramdisk.txt\fP を参照。

4 つのパラメータがある。論理値をとるものが 2 つ、整数値をとるものが 2 つ。
.TP 
\&\fB'load_ramdisk=N'\fP
N=1 なら RAM ディスクをロードする。N=0 ならロードしない (デフォルト)。
.TP 
\&\fB'prompt_ramdisk=N'\fP
N=1 ならフロッピー挿入を促すプロンプトを出す (デフォルト)。 N=0 ならプロンプトを出さない。
(従って、このパラメータを指定する必要はまず無いであろう。)
.TP 
\&\fB'ramdisk_size=N'\fP もしくは (古い形式の) \fB'ramdisk=N'\fP
ラムディスクの最大サイズを N kB (キロバイト) にセットする。 省略時は 4096 (4 MB)。
.TP 
\&\fB'ramdisk_start=N'\fP
開始ブロック番号 (フロッピー先頭からのオフセットで指定した RAM ディスクの開始点)  を N にセットする。 これはカーネルイメージのあとに
RAM ディスクイメージを置く場合に必要となる。
.TP 
\&\fB'noinitrd'\fP
(カーネルのコンパイル時に \fBCONFIG_BLK_DEV_RAM\fP と \fBCONFIG_BLK_DEV_INITRD\fP
が指定されているときのみ有効。)  最近は initrd を使用するようにカーネルをコンパイルできる。 このオプションが指定されると、
ブートプロセスはカーネルと RAM ディスクをロードし、 カーネルは initrd を「普通の」 RAM ディスクに変換し、 この RAM
ディスクがルートデバイスとして「読み書き可能」でマウントされる。 次に /linuxrc が実行される。
その後「真の」ルートファイルシステムがマウントされ、 initrd ファイルシステムは /initrd に移される。 最後に通常のブートシーケンス
(具体的には /sbin/init の呼び出し) が実行される。

initrd に関する詳細な解説は \fI/usr/src/linux/Documentation/initrd.txt\fP を参照。

\&'noinitrd' オプションを用いると、 カーネルは (initrd 動作を行うようにコンパイルされている場合でも)
上記の動作を行なわず、代わりに initrd のデータを \fI/dev/initrd\fP に残す。 (このデバイスは一度しか使えない。
データは、そのデータを使った最後のプロセスが \fI/dev/initrd\fP をクローズするとすぐに解放される。)
.SS "SCSI デバイス用の起動時引数"
この節における用語：

\fIiobase\fP \-\- SCSI ホストアダプタが占有する I/O ポートの先頭アドレス。 16 進表記で指定し、通常 0x200 から 0x3ff
の範囲に位置する。

\fIirq\fP \-\- カードが利用するハードウェア割り込み。有効な値はカードに よって異なるが、通常は 5, 7, 9, 10, 11, 12, 15
である。 これ以外の値は通常、IDE ハードディスク、フロッピー、 シリアルポートといった一般的な周辺機器によって使用される。

\fIscsi\-id\fP \-\- SCSI バス上のホストアダプタが自分自身を識別するために使用する ID 番号。
この値を変更できるホストアダプタもごく希に存在するが、 ほとんどはアダプタ内部で固定されている。 よく使われるデフォルト値は 7
であるが、Seagate もしくは Future Domain 製の TMC\-950 ボードでは 6 が使われる。

\fIparity\fP \-\- SCSI ホストアダプタが取り付けられたデバイスとの通信に際して パリティ値を必要とするかどうか。 1
を指定するとパリティチェックが有効になり、 0 でパリティチェックが無効になる。 しかし、すべてのデバイスがこの起動時引数によるパリティの選択を
サポートするわけではない。
.TP 
\&\fB'max_scsi_luns=...'\fP
SCSI デバイスは複数の「サブデバイス」を自分自身の内部に持つことができる。 最もよくある例として、一時に 1 枚以上のディスクを扱うことができる
(チェンジャー機能付の) SCSI CD\-ROM がある。 それぞれの CD はそのデバイスの 「論理ユニット番号 (LUN)」によって特定される。
しかしほとんどのデバイス (例えばハードディスクやテープドライブ) は、 LUN 番号 0 が割り当てられた、ただひとつのデバイスからなる。

設計が不十分な SCSI デバイスでは 0 以外の LUN 番号への自動検出を 扱えないことがある。 したがって、コンパイル時に
\fBCONFIG_SCSI_MULTI_LUN\fP オプションが指定されていないと、 最近のカーネルではデフォルトでは LUN 番号 0 のみを検出する。

起動時に調べる LUN 番号を指定する場合、起動時引数として \&'max_scsi_luns=n' を指定する。n は 1 から 8 の間で指定する。
n=1 以上の値を使用しないようにすれば、 このようないかれた機械にひどい目にあわされずにすむだろう。
.TP 
\fBSCSI テープドライブの設定\fP
SCSI テープドライバの起動時設定の一部は以下のようにして行なうことができる。
.IP
\fBst=\fP\fIbuf_size[,write_threshold[,max_bufs]]\fP
.sp
最初の 2 つの数字は kB 単位で指定する。 \fIbuf_size\fP のデフォルトは 32kB である。上限は 16384kB まで指定できる。
\fIwrite_threshold\fP はデータ書き出しの閾値で、 バッファのデータのサイズがこの値を越えるとデータはテープに書き出される。
デフォルト値は 30kB である。 バッファ数の最大値 (\fImax_bufs\fP)  は検出されたドライブの数によって変化するが、デフォルトは 2
である。 使用例を以下に示す。
.IP
st=32,30,2
.IP
詳細はカーネルソース内の \fIDocumentation/scsi/st.txt\fP (古いカーネルの場合は
\fIdrivers/scsi/README.st\fP)  に書かれている。
.TP 
\fBAdaptec aha151x, aha152x, aic6260, aic6360, SB16\-SCSI の設定\fP
aha に続く番号はカードを表し、 aic に続く番号はカードに搭載されている実際のチップを表す (Soundblaster\-16 SCSI
も後者に含まれる)。

SCSI ホストの検出コードは、 インストールされている BIOS を探す。 見つからないと、カードは検出できない。
この場合は以下のように起動時引数を指定することになる。
.IP
\fBaha152x=\fP\fIiobase[,irq[,scsi\-id[,reconnect[,parity]]]]\fP
.IP
もしドライバのコンパイル時にデバッグオプションを指定していた場合は、 6 番目の値でデバッグレベルを指定できる。

すべてのパラメータは、このセクションの最初で説明した通りである。 \fIreconnect\fP に 0
以外の値を指定すると、デバイスを切断したり接続したりできる。 以下に例を示す。
.IP
aha152x=0x340,11,7,1
.IP
パラメータは必ず上記の順番どおりに指定されなければならない。 例えば、パリティ (parity) を設定したい場合には、 iobase, irq,
scsi\-id, reconnect も同時に指定する必要がある。
.TP 
\fBAdaptec aha154x の設定\fP
aha1542 シリーズのカードは i82077 フロッピーディスクコントローラをボードに搭載している。 一方 aha1540
シリーズのカードは搭載していない。 これらは共にバスマスタカードであり、 他のデバイスとバスを共有する際に、
どのくらい「フェアに」振る舞うかを指定するパラメータがある。 起動時引数は以下のようにして指定する。
.IP
\fBaha1542=\fP\fIiobase[,buson,busoff[,dmaspeed]]\fP
.IP
有効な iobase の値は次の通り。 0x130, 0x134, 0x230, 0x234, 0x330, 0x334。
クローンカードの中には他の値を指定できるものもある。

\fIbuson\fP, \fIbusoff\fP 値はカードがISA バスを占有する時間をマイクロ秒単位で指定する。 省略時はそれぞれ 11us on と 4us
off になっているので、 他のカード (例えば ISA LANCE イーサネットカード) も ISA バスにアクセスできる。

\fIdmaspeed\fP 値は DMA (Direct Memory Access) 転送速度を MB/s 単位で設定する。 省略時は 5MB/s
である。新しいリビジョンのカードでは、 この値を使ったソフトウェアによる設定ができる。 古いカードはジャンパ設定を必要とする。
マザーボードが対応していれば最大 10MB/s まで指定可能である。 5MB/s 以上の値を使う場合は注意して実験してからにすること。
.TP 
\fBAdaptec aha274x, aha284x, aic7xxx の設定\fP
これらのボードは以下の形式で指定する。
.IP
\fBaic7xxx=\fP\fIextended,no_reset\fP
.IP
\fIextended\fP 値が 0 以外の時は、大容量ディスク用の拡張変換が有効になる。 \fIno_reset\fP 値を 0
以外の値にすると、ホストアダプタの検出時に、 ドライバによる SCSI バスの初期化を行わない。
.TP 
\fBAdvanSys SCSI ホストアダプタの設定 ('advansys=')\fP
AdvanSys ドライバはカードの検出先として 4 つの I/O アドレスを受け付ける。 EISA や PCI
カードではこれらを指定しても全く効果が無い。 ISA 及び VLB カードの検出に対してのみ用いられる。
さらに、デバッグオプション付きでドライバがコンパイルされている場合、 デバッグ情報の出力レベルとして 0xdeb[0\-f] パラメータを追加できる。
0\-f によりデバッグメッセージの情報のレベルを 16 段階で指定する。
.TP 
\fBAM53C974\fP
.IP
\fBAM53C974=\fP\fIhost\-scsi\-id,target\-scsi\-id,max\-rate,max\-offset\fP
.TP 
\fBBusLogic SCSI ホストアダプタの設定 ('BusLogic=')\fP
.IP
\fBBusLogic=\fP\fIN1,N2,N3,N4,N5,S1,S2,...\fP
.IP
Buslogic のコマンドラインパラメータに関する詳細な議論は \fI/usr/src/linux/drivers/scsi/BusLogic.c\fP
(著者がいま見ているカーネルでは 4350\-4497 行目) を参照すること。 以下はこれを非常におおざっぱに要約したものである。

パラメータ N1 から N5 までは整数である。 パラメータ S1 以降は文字列である。 N1 はホストアダプタが存在する I/O アドレス。 N2
はタグキューイングをサポートするデバイスに対して使用するキューの深さ。 N3 はバス安定時間 (BST) を秒単位で指定する。
これはホストアダプタのハードリセットにより SCSI バスをリセットしてから SCSI コマンドの発行を開始するまでの待ち時間である。 N4
はローカルオプション (ひとつのホストアダプタ用)。 N5 はグローバルオプション (すべてのホストアダプタ用)。

文字列オプションは以下の動作を制御する: タグキューイング (TQ:Default, TQ:Enable, TQ:Disable,
TQ:<Per\-Target\-Spec>)、 エラー復帰 (ER:Default, ER:HardReset,
ER:BusDeviceReset, ER:None, ER:<Per\-Target\-Spec>)、 ホストアダプタの検出
(NoProbe, NoProbeISA, NoSortPCI)。
.TP 
\fBEATA/DMA の設定\fP
検出対象にする I/O ポートのデフォルトのリストは以下のようにして変更できる。
.IP
\fBeata=\fP\fIiobase,iobase,...\fP\fB.\fP
.TP 
\fBFuture Domain TMC\-16x0 の設定\fP
.IP
\fBfdomain=\fP\fIiobase,irq[,adapter_id]\fP
.TP 
\fBGreat Valley Products (GVP) SCSI コントローラの設定\fP
.IP
\fBgvp11=\fP\fIdma_transfer_bitmask\fP
.TP 
\fBFuture Domain 製 TMC\-8xx, TMC\-950 の設定\fP
.IP
\fBtmc8xx=\fP\fImem_base,irq\fP
.IP
\fImem_base\fP にはカードが使用するメモリマップ I/O の領域を指定する。
通常は次の値のどれかである: 0xc8000, 0xca000, 0xcc000, 0xce000, 0xdc000, 0xde000。
.TP 
\fBIN2000 の設定\fP
.IP
\fBin2000=\fP\fIS\fP
.IP
S はコンマ区切りの文字列で、各項目は keyword[:value] 形式で指定する。 指定できるキーワードは以下の通り。 ioport:addr,
noreset, nosync:x, period:ns, disconnect:x, debug:x, proc:x。
これらのパラメータの機能については \fI/usr/src/linux/drivers/scsi/in2000.c\fP を参照。
.TP 
\fBNCR5380 および NCR53C400 の設定\fP
この起動時引数は以下の書式で指定する。
.IP
\fBncr5380=\fP\fIiobase,irq,dma\fP
.IP
または
.IP
\fBncr53c400=\fP\fIiobase,irq\fP
.IP
カードが IRQ を使用しない場合は、 255 (0xff) を指定すれば無効にできる。 IRQ に 254 を指定すると自動検出する。
詳細はカーネルソース内の \fIDocumentation/scsi/g_NCR5380.txt\fP (古いカーネルの場合は
\fIdrivers/scsi/README.g_NCR5380\fP)  に書かれている。
.TP 
\fBNCR53C8xx の設定\fP
.IP
\fBncr53c8xx=\fP\fIS\fP
.IP
S はコンマ区切りの文字列で、各項目は keyword[:value] 形式で指定する。 指定できるキーワードは以下の通り。 mpar
(master_parity), spar (scsi_parity), disc (disconnection), specf
(special_features), ultra (ultra_scsi), fsn (force_sync_nego), tags
(default_tags), sync (default_sync), verb (verbose), debug (debug), burst
(burst_max)。 これらのオプションの機能については
\fI/usr/src/linux/drivers/scsi/README.ncr53c8xx\fP を参照すること。
.TP 
\fBNCR53c406a の設定\fP
.IP
\fBncr53c406a=\fP\fIiobase[,irq[,fastpio]]\fP
.IP
割り込み無しで動作するモードには irq に 0 を指定する。 高速 PIO モードは fastpio に 1 を指定し、低速モードは 0 を指定する。
.TP 
\fBPro Audio Spectrum の設定\fP
PAS16 は NC5380 SCSI チップを使用しており、 最近のモデルはジャンパレスの設定をサポートしている。 起動時引数の書式は以下の通り。
.IP
\fBpas16=\fP\fIiobase,irq\fP
.IP
唯一の違いとして、 IRQ に 255 を指定すれば割り込みを使用しないようドライバに指示できる (パフォーマンスは低下する)。 通常 iobase は
0x388 である。
.TP 
\fBSeagate 製 ST\-0x の設定\fP
カードが起動時に認識されない場合は以下のような指定が必要になるだろう。
.IP
\fBst0x=\fP\fImem_base,irq\fP
.IP
\fImem_base\fP にはカードが使用するメモリマップ I/O の領域を指定する。
通常は次の値のどれかである: 0xc8000, 0xca000, 0xcc000, 0xce000, 0xdc000, 0xde000。
.TP 
\fBTrantor 製 T128 の設定\fP
このカードも NCR5380 チップを利用しており、 以下のオプションを受け付ける。
.IP
\fBt128=\fP\fImem_base,irq\fP
.IP
有効な \fImem_base\fP の値は次の通りである: 0xcc000, 0xc8000, 0xdc000, 0xd8000。
.TP 
\fBUltraStor 製 14F/34F の設定\fP
検出対象にする I/O ポートのデフォルトのリストは以下のようにして変更できる。
.IP
\fBeata=\fP\fIiobase,iobase,...\fP\fB.\fP
.TP 
\fBWD7000 の設定\fP
.IP
\fBwd7000=\fP\fIirq,dma,iobase\fP
.TP 
\fBCommodore Amiga 製 A2091/590 SCSI コントローラの設定\fP
.IP
\fBwd33c93=\fP\fIS\fP
.IP
S はコンマ区切りの文字列で、各項目は keyword[:value] 形式で指定する。 認識されるオプションは以下の通り。
nosync:bitmask, nodma:x, period:ns, disconnect:x, debug:x, clock:x, next。
詳細は \fI/usr/src/linux/drivers/scsi/wd33c93.c\fP を参照せよ。
.SS ハードディスク
.TP 
\fBIDE Disk/CD\-ROM ドライバのパラメータ\fP
IDE ドライバは、 ディスクのジオメトリ指定からバグのあるコントローラチップのサポートまで、 数多くのパラメータを受け付ける。 ドライブを特定するには
\&'hdX=' を使う。 ここで X には 'a' から 'h' の文字を指定する。

あるドライブに特有なものではないオプションは、hd= を前に付けて指定する。 ドライブ特有でないオプションに対してドライブ指定 ('hdX=')
を前置しても問題はない。 そのオプションは期待通りそのドライブに適用される。

\&'hd=' は、(a, ..., h) のシーケンスにおいて、 まだ指定されていない次のドライブを指すためにも使える。 これ以降では簡単のために
\&'hd=' を使って説明する。 さらに詳しい情報を得るには、カーネルソース内の \fIDocumentation/ide.txt\fP (古いカーネルの場合は
\fIdrivers/block/README.ide\fP)  を参照のこと。
.TP 
\&\fB'hd=cyls,heads,sects[,wpcom[,irq]]' オプション\fP
これらのオプションはディスクの物理的なジオメトリを指定するために使う。 最初の 3 つの値以降は省略できる。 シリンダ (cyls)、ヘッド
(heads)、セクタ (sects) の各値は fdisk で用いられるものと同じである。 書き込み補正 (wpcom) 値は IDE
ディスクでは無視される。 IRQ 値には、そのドライブが接続されているインターフェースが用いる IRQ を指定する
(本来の意味では「ドライブに特有」のパラメータではない)。
.TP 
\&\fB'hd=serialize' オプション\fP
デュアル IDE インターフェースである CMD\-640 チップには設計上の問題があって、 セカンダリインターフェース上のドライブと
プライマリインターフェース上のドライブを 同時に使用するとデータが破壊されることがある。 このオプションを使用すると、
ドライバは両方のインターフェースが 同時に使用されることが絶対にないようにする。
.TP 
\&\fB'hd=dtc2278' オプション\fP
このオプションは、DTC\-2278D IDE インターフェースが使われている ことをドライバに伝える。 するとドライバは、DTC 特有の機能 (2
番目のインターフェースと高速転送モード)  を使用可能にするよう試みる。
.TP 
\&\fB'hd=noprobe' オプション\fP
このドライブの自動検出をしない。 例えば
.IP
hdb=noprobe hdb=1166,7,17
.IP
とすると自動検出が無効になる。 しかしドライブのジオメトリを指定しているので、 このドライブは正しいブロックデバイスとして登録され、使用可能になる。
.TP 
\&\fB'hd=nowerr' オプション\fP
ドライブによっては、書き込みエラー (\fBWRERR_STAT\fP)  ビットがクリアできなくなることがある。 このオプションを指定すると、
このような壊れたデバイスに対する回避機能が有効になる。
.TP 
\&\fB'hd=cdrom' オプション\fP
このオプションは、通常の IDE ハードディスクの代わりに、 ATAPI 互換の CDROM が続されていることを IDE ドライバに伝える。
CD\-ROM はたいてい自動的に認識されるが、 うまく行かない場合に試してみると良い。
.TP 
\fBスタンダード ST\-506 ディスクドライバのオプション ('hd=')\fP
スタンダードディスクドライバは IDE ドライバと同様のジオメトリ指定を引数にとることができる。 ただし受け付ける値はちょうど 3 つ (C/H/S)
に限られる。 それ以上の値やそれ以下の値を指定すると、ドライバは黙ってその指定を無視する。 また引数として受け入れられるのは 'hd='
の形式だけである。 つまり 'hda=' のような指定はここでは正しくない。 書式は次の通り。
.IP
hd=cyls,heads,sects
.IP
2 台のディスクが接続されてい場合は、 2 番目のディスクに対しても上記のジオメトリが設定される。
.TP 
\fBXT ディスクドライバのオプション ('xd=')\fP
これらの古い 8 bit カード (125kB/s の転送速度しかない!)  を使わなければならない不幸な人のためのオプションである。
カードが認識されない場合は以下の書式で起動時引数を指定する必要があるだろう。
.IP
xd=type,irq,iobase,dma_chan
.IP
.\" 1.1.50, 1.3.81, 1.3.99, 2.0.34, 2.1.67, 2.1.78, 2.1.127
type 値にはカードのメーカーを指定し、これは自動検知より優先される。 指定すべき type の値については、使っているカーネルのソースファイル
\fIdrivers/block/xd.c\fP を調べてほしい。type はリスト \fIxd_sigs\fP
のインデックスで、歴史と共に追加されたり削除されたりしてきた。 リストの途中での追加・削除も行われたので、 その場合はすべての type
番号が変更された。 今日 (Linux 2.5.0) における type は、 0=generic; 1=DTC 5150cx; 2,3=DTC
5150x; 4,5=Western Digital; 6,7,8=Seagate; 9=Omti; 10=XEBEC である。 ここではいくつかの
type に同じ指定が与えられているが、 それらは等価である。

xd_setup() 関数は引数をチェックせず、 4 つの値がすべて指定されることを想定している。 引数を省略してはならない。 例として、BIOS
が無効にされた (あるいは削除された)  WD1002 コントローラの場合を示す (パラメータには XT
コントローラの「デフォルト」の値を使っている)。
.IP
xd=2,5,0x320,3
.TP 
\fBSyquest 製 EZ* リムーバブルディスク\fP
.IP
\fBez=\fP\fIiobase[,irq[,rep[,nybble]]]\fP
.SS "IBM MCA バス上のデバイス"
\fI/usr/src/linux/Documentation/mca.txt\fP も参照。
.TP 
\fBPS/2 ESDI ハードディスク\fP
起動時に所望のジオメトリを指定できる。
.IP
\fBed=\fP\fIcyls,heads,sectors.\fP
.IP
ThinkPad\-720 を使用する場合は以下のオプションを追加すること。
.IP
\fBtp720=1\fP
.TP 
\fBIBM Microchannel SCSI サブシステムの設定\fP
.IP
\fBibmmcascsi=\fP\fIN\fP
.IP
N はサブシステムの \fIpun\fP (SCSI ID) を表す。
.TP 
\fBAztech インターフェース\fP
このタイプのカードの構文は以下の通り。
.IP
aztcd=iobase[,magic_number]
.IP
magic_number に 0x79 をセットすると、 ドライバはファームウェアのバージョンが分からない場合でも、 とにかく実行を試みる。
その他の値はすべて無視される。
.TP 
\fBパラレルポート CD\-ROM ドライブ\fP
構文は以下の通り。
.IP
pcd.driveN=port,pro,uni,mod,slv,dly
.br
pcd.nice=nice
.IP
ここで 'port' はベースアドレス、'pro' はプロトコル番号、'uni' はユニットセレクタ (チェインデバイス用)、'mod' はモード
(あるいは自動的に最適のものを選ばせるには \-1)、'slv' はスレーブにしたい場合に 1、'dly'
はポートアクセスを遅くしたい場合に小さな整数を与える。'nice' パラメータは、 ドライバのアイドル CPU 時間の使い方を制御する。
ただし速度はある程度低下する。
.TP 
\fBSony 製 CDU\-31A と CDU\-33A のインターフェース\fP
この CD\-ROM インターフェースは、 Pro Audio Spectrum サウンドカードの一部や
ソニーが供給するインターフェースカードで使われている。 構文は以下の通り。
.IP
cdu31a=iobase,[irq[,is_pas_card]]
.IP
IRQ に 0 を指定すると、 ハードウェア割り込みがサポートされていないことをドライバに伝える (PAS カードにはそのようなものがある)。
使用するカードが割り込みをサポートしているなら、 ドライバによる CPU の負荷を減らすためにも割り込みを使用すべきである。

\fIis_pas_card\fP には、Pro Audio Spectrum カードを使用しているときには 'PAS' を指定し、
そうでないときにはなにも指定しない。
.TP 
\fBSony 製 CDU\-535 インターフェース\fP
この CD\-ROM インターフェースの構文は以下の通り。
.IP
sonycd535=iobase[,irq]
.IP
IRQ の値だけを指定したい場合には、 iobase 値を 0 とすれば単なる穴埋めと解釈される。
.TP 
\fBGoldStar インターフェース\fP
この CD\-ROM インターフェースの構文は以下の通り。
.IP
gscd=iobase
.TP 
\fBISP16 CD\-ROM インターフェース\fP
構文は以下の通り。
.IP
isp16=[iobase[,irq[,dma[,type]]]]
.IP
(整数値 3 つと文字列 1 つ。) type に 'noisp16' を指定すると、 インターフェースの設定は行なわれない。 type にはこの他にも
\&'Sanyo', 'Sony', 'Panasonic', 'Mitsumi' が指定できる。
.TP 
\fBMitsumi 標準インターフェース\fP
この CD\-ROM インターフェースの構文は以下の通り。
.IP
mcd=iobase,[irq[,wait_value]]
.IP
\fIwait_value\fP はドライブに問題がある場合に、 ドライバ内部のタイムアウトの指定に用いる。 コンパイル時の #define
によって実装されるかされないかが決まる。 Mitsumi FX400 は IDE/ATAPI CD\-ROM プレイヤーであり、 この mcd
ドライバは使用しない。
.TP 
\fBMitsumi XA/マルチセッションインターフェース\fP
これは上記と同じハードウェアだが、拡張機能がある。 構文は以下の通り。
.IP
mcdx=iobase[,irq]
.TP 
\fBOptics ストレージインターフェース\fP
このタイプのカードの構文は以下の通り。
.IP
optcd=iobase
.TP 
\fBPhillips CM206 インターフェース\fP
このタイプのカードの構文は以下の通り。
.IP
cm206=[iobase][,irq]
.IP
ドライバは IRQ 値として 3 から 11 まで、 I/O ポートアドレスの値として 0x300 から 0x370 を想定している。
いずれか一方、あるいは両方を指定できる。順番も問わない。 \&'cm206=auto' とすることにより自動検出もできる。
.TP 
\fBSanyo インターフェース\fP
このタイプのカードの構文は以下の通り。
.IP
sjcd=iobase[,irq[,dma_channel]]
.TP 
\fBSoundBlaster Pro インターフェース\fP
このタイプのカードの構文は以下の通り。
.IP
sbpcd=iobase,type
.IP
type 値には 'SoundBlaster', 'LaserMate', 'SPEA' のうちひとつを指定できる (大文字小文字が区別される)。
iobase は CD\-ROM インターフェースの値である。 カードのサウンド部の値と間違えないこと。
.SS イーサネットデバイス
ドライバが異なると用いるパラメータも異なるが、 すべてのドライバは、少なくとも割り込み番号 (irq)、 I/O ポートのベースアドレス
(iobase)、名前 (name) を持つ。 最も一般的な形式は以下の通り。
.IP
ether=irq,iobase[,param_1[,...param_8]],name
.IP
最初の数字でない値は名前として使用される。 param_n の値はカード (ドライバ) ごとに異なる意味を持つ。
よくある目的は、共有メモリアドレスの指定、インターフェースの選択、 DMA チャネルなどである。

このパラメータの最もよくある利用法は、 2 番目の Ethernet カードを強制的に検出させる場合である (デフォルトでは 1 枚しか検出しない)。
これは簡単で、次のようにすればよい。
.IP
ether=0,0,eth1
.IP
この例で IRQ と I/O ベースアドレスに 0 を指定しているのは、 ドライバに自動検出をするよう伝えているのである。

Ethernet\-HOWTO では、複数のカードを使うやり方や、 カードやドライバに特有の param_n 値の意味について、
ずっと詳細に解説されている。 興味を持った読者は、この文書にあたり、 自分のカードに関して書かれているセクションを参照すると良い。
.SS フロッピーディスクドライバ
フロッピードライバのオプションは多数あり、 カーネルソース内の \fIDocumentation/floppy.txt\fP (古いカーネルの場合は
\fIdrivers/block/README.fd\fP)  にすべて記載されている。 以下の情報はこのファイルからとったものである。
.TP 
\fBfloppy=mask,allowed_drive_mask\fP
使ってよいドライブにかけるビットマスクを設定する。 デフォルトでは、 ユニット 0 と 1 のフロッピーコントローラだけが許可されている。
これは、標準でないハードウェア (例えば ASUS の PCIマザーボードなど)  でユニット 2 や 3 にアクセスすると、
キーボードがおかしくなってしまうからである。 cmos オプション (後述) の導入によって、 このオプションはあまり使われなくなった。
.TP 
\fBfloppy=all_drives\fP
許可するドライブを示すビットマスクを、「すべてのドライブ」にする。 1 つのフロッピーコントローラに 2 台以上のドライブを接続する場合に用いる。
.TP 
\fBfloppy=asus_pci\fP
ユニット 0 と 1 のみを許可するようビットマスクを設定する。 (デフォルト)。
.TP 
\fBfloppy=daring\fP
正しく振る舞うフロッピーコントローラを使っていることをドライバに伝える。 このオプションを使うと動作はより効率的かつスムースになるが、
コントローラによっては動作に失敗することがある。 これを指定するとある種の動作が高速になる。
.TP 
\fBfloppy=0,daring\fP
注意して扱わなければならない フロッピーコントローラであることをドライバに伝える。
.TP 
\fBfloppy=one_fdc\fP
フロッピーコントローラがひとつしかないことをドライバに伝える (デフォルト)。
.TP 
\fBfloppy=two_fdc\fP または \fBfloppy=address,two_fdc\fP
フロッピーコントローラがふたつあることをドライバに伝える。 2 番目のコントローラの I/O アドレスは address で指定する。 address
が指定されない場合は 0x370 が使われる。
.TP 
\fBfloppy=thinkpad\fP
Thinkpad を使っていることをフロッピードライバに伝える。
Thinkpad はディスク取出の検出信号を反転して使っている。
.TP 
\fBfloppy=0,thinkpad\fP
Thinkpad を使っていないことをドライバに伝える。
.TP 
\fBfloppy=drive,type,cmos\fP
ドライブの cmos タイプを type に設定する。 さらにビットマスクを変更し、このドライブの使用を許可する。
この指定が便利なのは、フロッピードライブが 2 台以上ある場合 (物理 cmos に記述できるのは 2 台まで) や、 BIOS が標準的でない
CMOS タイプを使っている場合である。 最初の 2 台のドライブの CMOS に 0 を指定する (デフォルト) と、
フロッピードライバはこれらのドライブの物理 cmos を参照する。
.TP 
\fBfloppy=unexpected_interrupts\fP
予期しない割り込みを受けた時に警告メッセージを表示する (デフォルト)。
.TP 
\fBfloppy=no_unexpected_interrupts\fP または \fBfloppy=L40SX\fP
予期しない割り込みを受けた時でも警告メッセージを表示しない。 これは IBM L40SX ラップトップコンピュータを
特定のビデオモードで使用する時に必要となる。 (ビデオとフロッピーとの間で何らかの相互作用があるようだ。
予期しない割り込みは性能だけに影響し、無視しても安全である。)
.SS サウンドドライバ
サウンドドライバも起動時引数を受け付け、 コンパイル時に指定された値を変更できる。 これはやや面倒なため、あまりお薦めできない。
詳細は、カーネルソース内の \fIDocumentation/sound/oss/README.OSS\fP (古いカーネルの場合は
\fIdrivers/sound/Readme.linux\fP)  に記載されている。 引数の形式は以下の通り。
.IP
sound=device1[,device2[,device3...[,device10]]]
.IP
各 deviceN はそれぞれ 0xTaaaId という形式で指定する。 各バイトの意味は以下の通り。

T \- デバイスのタイプ: 1=FM, 2=SB, 3=PAS, 4=GUS, 5=MPU401, 6=SB16, 7=SB16\-MPU401

aaa \- I/O ポートアドレス (16進値)

I \- 割り込み番号 (16 進値。例: 10=a, 11=b, ...)

d \- DMA チャネル

上記の通り、かなり扱いにくい形式となっており、 コンパイル時に自分にあった値を指定する方が良いだろう。 なお起動時引数として 'sound=0'
を指定すると、 サウンドドライバを完全に無効にする。
.SS "ISDN ドライバ"
.TP 
\fBICN ISDN ドライバ\fP
構文は以下の通り。
.IP
icn=iobase,membase,icn_id1,icn_id2
.IP
icn_id1,icn_id2 はカードを識別するための 2 つの文字列である。 カーネルメッセージで用いられる。
.TP 
\fBPCBIT ISDN ドライバ\fP
構文は以下の通り。
.IP
pcbit=membase1,irq1[,membase2,irq2]
.IP
membaseN は N 番目のカードの共有メモリのベースアドレスであり、 irqN は N 番目のカードの割り込み設定である。 無指定時には IRQ
= 5, membase = 0xD0000 となる。
.TP 
\fBTeles ISDN ドライバ\fP
構文は以下の通り。
.IP
teles=iobase,irq,membase,protocol,teles_id
.IP
iobase はカードの I/O ポートアドレス、 membase はカードの共有メモリのベースアドレス、 そして irq
はカードが使用する割り込みチャネルである。 teles_id はアスキー文字列による識別文字列である (他と重ならないようにする)。
.SS シリアルポートドライバ
.TP 
\fBRISCom/8 マルチポートシリアルドライバ ('riscom8=')\fP
構文は以下の通り。
.IP
riscom=iobase1[,iobase2[,iobase3[,iobase4]]]
.IP
詳細は \fI/usr/src/linux/Documentation/riscom8.txt\fP を参照のこと。
.TP 
\fBDigiBoard ドライバ ('digi=')\fP
このオプションを使う場合は、6 個のパラメータをきっちり指定しなければならない。
構文は以下の通り。
.IP
digi=status,type,altpin,numports,iobase,membase
.IP
パラメータは整数値か文字列で与える。 文字列で指定する場合は、 iobase と membase は 16 進値でなければならない。
整数値で指定する場合はパラメータの個数は少なくても良く、順に: status このカードの動作を指定する (Enable(1) または
Disable(0)), type カードのタイプ (PC/Xi(0), PC/Xe(1), PC/Xeve(2), PC/Xem(3)),
altpin ピン配置を反転させる (Enable(1) or Disable(0)), numports カードのポート番号, iobase
このカードの I/O ポート (文字列指定の場合は 16 進表記), membase メモリウィンドウのベースアドレス (文字列指定の場合は 16
進表記)。 したがって以下のふたつの起動時引数は同じ意味を持つ。
.IP
digi=E,PC/Xi,D,16,200,D0000
.br
digi=1,0,0,16,0x200,851968
.IP
詳細は \fI/usr/src/linux/Documentation/digiboard.txt\fP を参照。
.TP 
\fBBaycom シリアル・パラレル ラジオモデム\fP
構文は以下の通り。
.IP
baycom=iobase,irq,modem
.IP
ちょうど 3 つのパラメータを与える。 複数のカードがある場合は、'baycom=' コマンドも複数記述する。 modem パラメータは文字列で、
ser12, ser12*, par96, par96* の中からひとつを選ぶ。 * をつけるとソフトウェア DCD を使用する。 モデムの種類に応じて
ser12 か par96 かを選択する。 詳細はカーネルソース内の \fIDocumentation/networking/baycom.txt\fP
(古いカーネルの場合は \fIdrivers/net/README.baycom\fP)  を参照。
.TP 
\fBサウンドカードラジオモデムドライバ\fP
構文は以下の通り。
.IP
soundmodem=iobase,irq,dma[,dma2[,serio[,pario]]],0,mode
.IP
最後のパラメータを除くすべてのパラメータは整数である。 ダミーの 0 があるのは、設定プログラムのバグのせいである。 mode
パラメータは文字列で、hw:modem という書式で指定する。 hw は sbc, wss, wssfdx のうちひとつ、 modem は
afsk1200, fsk9600 のどちらかを選択して記述する。
.SS ラインプリンタドライバ
.TP 
\&\fB'lp='\fP
構文は以下の通り。
.IP
lp=0
.br
lp=auto
.br
lp=reset
.br
lp=port[,port...]
.IP
プリンタドライバには、どのポートを使うか、 どのポートを使ってはいけないかを伝えることができる。 後者は、
利用可能なあらゆるパラレルポートをプリンタドライバが要求しないようにして、 他のドライバ (PLIP や PPA など) から
それらを使えるようにしたい場合に便利である。

引数の書式は、複数のポート名である。 例えば lp=none,parport0 とすると、 最初のパラレルポートを lp1 として使い、 lp0
は無効にする。プリンタードライバを完全に無効にするには lp=0 とすればよい。
.TP 
\fBWDT500/501 ドライバ\fP
構文は以下の通り。
.IP
wdt=io,irq
.SS マウスドライバ
.TP 
\&\fB'bmouse=irq'\fP
バスマウスドライバはパラメータをひとつだけとり、 ハードウェア IRQ を指定できる。
.TP 
\&\fB'msmouse=irq'\fP
msmouse ドライバでもこの事情はまったく同じである。
.TP 
\fBATARI マウスの設定\fP
.IP
atamouse=threshold[,y\-threshold]
.IP
パラメータがひとつだけ与えられた場合には、 x\-threshold と y\-threshold を両方に用いられる。 ふたつ与えられた場合は、最初の値が
x\-threshold として用いられ、 2 番目の値が y\-threshold として用いられる。 値は 1 から 20 までの数値で指定する。
デフォルトは 2。
.SS ビデオ機器
.TP 
\&\fB'no\-scroll'\fP
.\" .SH AUTHORS
.\" Linus Torvalds (and many others)
このオプションは、コンソールドライバに、 ハードウェアスクロールを用いないよう伝える (ここで言うハードウェアスクロールとは、
ビデオメモリ上のデータを移動させることによって スクリーン表示領域をスクロールさせることを指す)。 特定の点字マシンではこの指定が必要となる。
.SH 関連項目
\fBlilo.conf\fP(5), \fBklogd\fP(8), \fBlilo\fP(8), \fBmount\fP(8), \fBrdev\fP(8)

このマニュアルページの大部分は Paul Gortmaker による Boot Parameter HOWTO (version 1.0.1)
を基にしている。 この (あるいは最新の) HOWTO をあたれば、 さらに多くの情報が入手できるだろう。 最新の情報源は
\fI/usr/src/linux/Documentation/kernel\-parameters.txt\fP である。
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.41 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
