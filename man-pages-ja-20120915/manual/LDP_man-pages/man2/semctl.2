.\" Copyright 1993 Giorgio Ciucci (giorgio@crcc.it)
.\" and Copyright 2004, 2005 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified Tue Oct 22 17:53:56 1996 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Fri Jun 19 10:59:15 1998 by Andries Brouwer <aeb@cwi.nl>
.\" Modified Sun Feb 18 01:59:29 2001 by Andries Brouwer <aeb@cwi.nl>
.\" Modified 20 Dec 2001, Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 21 Dec 2001, aeb
.\" Modified 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on CAP_IPC_OWNER requirement
.\" Modified 17 Jun 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on CAP_SYS_ADMIN requirement for IPC_SET and IPC_RMID
.\" Modified, 11 Nov 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Language and formatting clean-ups
.\"	Rewrote semun text
.\"	Added semid_ds and ipc_perm structure definitions
.\" 2005-08-02, mtk: Added IPC_INFO, SEM_INFO, SEM_STAT descriptions.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH SEMCTL 2 2009\-09\-27 Linux "Linux Programmer's Manual"
.SH 名前
semctl \- セマフォの制御操作を行なう
.SH 書式
.nf
\fB#include <sys/types.h>\fP
\fB#include <sys/ipc.h>\fP
\fB#include <sys/sem.h>\fP
.sp
\fBint semctl(int \fP\fIsemid\fP\fB, int \fP\fIsemnum\fP\fB, int \fP\fIcmd\fP\fB, ...);\fP
.fi
.SH 説明
\fBsemctl\fP()  は、 \fIsemid\fP で指定されたセマフォ集合 (semaphore set)  またはセマフォ集合の \fIsemnun\fP
番目のセマフォに対して、 \fIcmd\fP で指定された制御操作を行なう (集合内のセマフォの番号は 0 から始まる)。
.PP
この関数は、 \fIcmd\fP の値に依存して、3 個または 4 個の引き数を持つ。 引き数が 4 個の場合、第 4 引き数の型は \fIunion
semun\fP である。 \fI呼び出し元プログラム\fPは、 この共用体 (union) を以下のように定義しなければならない。

.nf
.in +4n
union semun {
    int              val;    /* SETVAL の値 */
    struct semid_ds *buf;    /* IPC_STAT, IPC_SET 用のバッファ */
    unsigned short  *array;  /* GETALL, SETALL 用の配列 */
    struct seminfo  *__buf;  /* IPC_INFO 用のバッファ
                                (Linux 固有) */
};
.in
.fi
.PP
\fIsemid_ds\fP データ構造体は \fI<sys/sem.h>\fP で以下のように定義されている:
.nf
.in +4n

struct semid_ds {
    struct ipc_perm sem_perm;  /* 所有権と許可 */
    time_t          sem_otime; /* 最後の semop の時刻 */
    time_t          sem_ctime; /* 最後に変更が行われた時刻 */
    unsigned short  sem_nsems; /* 集合内のセマフォの数 */
};
.in
.fi
.PP
\fIipc_perm\fP 構造体は \fI<sys/ipc.h>\fP で以下のように定義されている (強調されたフィールドは
\fBIPC_SET\fP を使って設定可能である):
.PP
.nf
.in +4n
struct ipc_perm {
    key_t          __key; /* semget(2) に与えられるキー */
    uid_t          \fBuid\fP;   /* 所有者 (owner) の実効 UID */
    gid_t          \fBgid\fP;   /* 所有者の実効 GID */
    uid_t          cuid;  /* 作成者 (creator) の実効 UID */
    gid_t          cgid;  /* 作成者の実効 GID */
    unsigned short \fBmode\fP;  /* 許可 */
    unsigned short __seq; /* シーケンス番号 */
};
.in
.fi
.PP
\fIcmd\fP として有効な値は
.TP  10
\fBIPC_STAT\fP
\fIsemid\fP に関連づけられたカーネルデータ構造体の情報を \fIarg.buf\fP で指された \fIsemid_ds\fP 構造体へコピーする。
\fIsemnum\fP 引き数は無視される。 呼び出したプロセスはそのセマフォ集合に対する 読み込み許可を持たなければならない。
.TP 
\fBIPC_SET\fP
\fIarg.buf\fP で指定された \fIsemid_ds\fP 構造体のメンバーのいくつかの値を、
このセマフォに関連づけられたカーネルデータ構造体に書き込み、 \fIsem_ctime\fP メンバーの値も更新する。 構造体の以下のメンバーが更新される:
\fIsem_perm.uid\fP, \fIsem_perm.gid\fP, \fIsem_perm.mode\fP (の最下位 9 ビット)。
呼び出したプロセスの実効 UID が所有者 (\fIsem_perm.uid\fP)  または作成者 (\fIsem_perm.cuid\fP)
と一致するか、呼び出した人が特権を持たなければならない。 \fIsemnum\fP 引き数は無視される。
.TP 
\fBIPC_RMID\fP
セマフォ集合をただちに削除し、その集合上の \fBsemop\fP(2)  コールでブロックされている全てのプロセスを目覚めさせる (エラー値が返されて、
\fIerrno\fP に \fBEIDRM\fP が設定される)。 呼び出したプロセスの実効ユーザ ID が そのセマフォ集合の作成者または所有者と一致するか、
呼び出した人が特権を持たなければならない。 \fIsemnum\fP 引き数は無視される。
.TP 
\fBIPC_INFO\fP (Linux 固有)
システム全体でのセマフォの制限とパラメータに関する情報を、 \fIarg.__buf\fP が指す構造体に入れて返す。 この構造体は \fIseminfo\fP
型である。 \fIseminfo\fP は \fB_GNU_SOURCE\fP 機能検査マクロが定義された場合に \fI<sys/sem.h>\fP
で以下のように定義される:
.nf
.in +4n

struct  seminfo {
    int semmap;  /* セマフォ・マップの最大エントリ数;
                    カーネル内では未使用 */
    int semmni;  /* セマフォ集合の最大数 */
    int semmns;  /* 全セマフォ集合中のセマフォの
                    最大数 */
    int semmnu;  /* アンドゥ構造体のシステム全体での
                    最大数; カーネル内では未使用 */
    int semmsl;  /* 一つのセマフォ集合の最大セマフォ数 */
    int semopm;  /* semop(2) に渡す操作の最大数 */
    int semume;  /* プロセスあたりのアンドゥ・エントリ
                    の最大数; カーネル内では未使用 */
    int semusz;  /* 構造体 sem_undo のサイズ */
    int semvmx;  /* セマフォの最大値 */
    int semaem;  /* セマフォの調整 (semaphore adjustment;
                     SEM_UNDO) のために記録される最大値 */
};

.in
.fi
設定 \fIsemmsl\fP, \fIsemmns\fP, \fIsemopm\fP, \fIsemmni\fP は \fI/proc/sys/kernel/sem\fP
経由で変更可能である。 詳しくは \fBproc\fP(5)  を参照。
.TP 
\fBSEM_INFO\fP (Linux 固有)
\fBIPC_INFO\fP のときと同じ情報を格納した \fIseminfo\fP 構造体を返す。 但し、以下のフィールドにはセマフォが消費しているシステム資源に
関する情報が格納される点が異なる。 \fIsemusz\fP フィールドは現在システム上に存在するセマフォ集合の数を返す。 \fIsemaem\fP
フィールドはシステム上の全てのセマフォ集合に含まれる セマフォの総数を返す。
.TP 
\fBSEM_STAT\fP (Linux 固有)
\fBIPC_STAT\fP と同じく \fIsemid_ds\fP 構造体を返す。 但し、 \fIsemid\fP
引き数は、セマフォ識別子ではなく、システム上の全てのセマフォ集合 に関する情報を管理するカーネルの内部配列へのインデックスである。
.TP 
\fBGETALL\fP
集合の全てのセマフォの \fBsemval\fP の値 (現在の値) を \fIarg.array\fP に返す。 \fIsemnum\fP 引き数は無視される。
呼び出したプロセスはそのセマフォ集合に読み込み許可を持たなければならない。
.TP 
\fBGETNCNT\fP
システムコールは集合の \fIsemnum\fP 番目のセマフォの \fBsemncnt\fP の値を返す (集合の \fIsemnum\fP 番目のセマフォの
\fBsemval\fP の増加を待っているプロセスの数を返す)。 呼び出したプロセスはそのセマフォ集合に読み込み許可を持たなければならない。
.TP 
\fBGETPID\fP
システムコールは集合の \fIsemnum\fP 番目のセマフォの \fBsempid\fP の値 (集合の \fIsemnum\fP 番目のセマフォに最後に
\fBsemop\fP(2)  コールを実行したプロセスの PID) を返す。 呼び出したプロセスはそのセマフォ集合に読み込み許可を持たなければならない。
.TP 
\fBGETVAL\fP
システムコールは集合の \fIsemnum\fP 番目のセマフォの \fBsemval\fP の値を返す。
呼び出したプロセスはそのセマフォ集合に読み込み許可を持たなければならない。
.TP 
\fBGETZCNT\fP
システムコールは集合の \fIsemnum\fP 番目のセマフォの \fBsemzcnt\fP の値を返す (集合の \fIsemnum\fP 番目のセマフォの
\fBsemval\fP の値が 0 になるのを待っているプロセスの数を返す)。 呼び出したプロセスはそのセマフォ集合に読み込み許可を持たなければならない。
.TP 
\fBSETALL\fP
集合の全てのセマフォの \fBsemval\fP に \fIarg.array\fP で指定された値を設定する。 その集合に関連する \fIsemid_ds\fP
構造体の \fIsem_ctime\fP メンバーの値も更新する。 全てのプロセスのセマフォの変更についてのアンドゥ・エントリ (\fBsemop\fP(2)
を参照) は消去 (clear) される。 セマフォの値の変更により、他のプロセス内でブロックされている \fBsemop\fP(2)
コールの続行が許可されると、それらのプロセスは起こされる (wake up)。 \fIsemnum\fP 引き数は無視される。
呼び出したプロセスはそのセマフォ集合に 変更 (書き込み) 許可を持たなければならない。
.TP 
\fBSETVAL\fP
集合の \fIsemnum\fP 番目のセマフォの \fBsemval\fP に \fIarg.val\fP の値を設定する。その集合に関連する \fIsemid_ds\fP
構造体の \fIsem_ctime\fP メンバーの値も更新する。 全てのプロセスのセマフォの変更についてのアンドゥ・エントリは消去される。
セマフォの値の変更により、他のプロセス内でブロックされている \fBsemop\fP(2)  コールの続行が許可されると、それらのプロセスは起こされる
(wake up)。 呼び出したプロセスはそのセマフォ集合に 変更 (書き込み) 許可を持たなければならない。
.SH 返り値
失敗した場合、 \fBsemctl\fP()  は \-1 を返し、 \fIerrno\fP にそのエラーを示す。

そうでなければシステムコールは \fIcmd\fP によって以下の負でない値を返す:
.TP  12
\fBGETNCNT\fP
\fBsemncnt\fP の値
.TP 
\fBGETPID\fP
\fBsempid\fP の値
.TP 
\fBGETVAL\fP
\fBsemval\fP の値
.TP 
\fBGETZCNT\fP
\fBsemzcnt\fP の値
.TP 
\fBIPC_INFO\fP
全てのセマフォ集合に関する情報を管理しているカーネルの内部配列の使用中 エントリのインデックスの最大値
(この情報は、システムの全てのセマフォ集合に関する情報を取得するために \fBSEM_STAT\fP 操作を繰り返し実行する際に使用できる)
.TP 
\fBSEM_INFO\fP
\fBIPC_INFO\fP と同じ
.TP 
\fBSEM_STAT\fP
\fIsemid\fP で指定されたインデックスを持つセマフォ集合の識別子
.LP
\fIcmd\fP の値がそれ以外の場合、成功すると 0 が返される。
.SH エラー
失敗した場合は \fIerrno\fP には以下の値のどれかが設定される:
.TP 
\fBEACCES\fP
\fIcmd\fP 引き数が \fBGETALL\fP, \fBGETPID\fP, \fBGETVAL\fP, \fBGETNCNT\fP, \fBGETZCNT\fP,
\fBIPC_STAT\fP, \fBSEM_STAT\fP, \fBSETALL\fP, \fBSETVAL\fP のうちの何れかの値を持ち、
呼び出したプロセスがセマフォに対して必要とされる許可と \fBCAP_IPC_OWNER\fP ケーパビリティ (capability) を持っていない。
.TP 
\fBEFAULT\fP
\fIarg.buf\fP または \fIarg.array\fP で指されているアドレスにアクセスすることができない。
.TP 
\fBEIDRM\fP
セマフォ集合が削除された。
.TP 
\fBEINVAL\fP
\fIcmd\fP または \fIsemid\fP に無効な値が指定された。 もしくは、 \fBSEM_STAT\fP 操作の場合に、 \fIsemid\fP
で指定されたインデックス値が現在未使用の配列のスロットを参照いていた。
.TP 
\fBEPERM\fP
\fIcmd\fP 引き数に \fBIPC_SET\fP または \fBIPC_RMID\fP が指定され、呼び出したプロセスの実効ユーザ ID がセマフォの
(\fIsem_perm.cuid\fP で見つかる) 作成者または (\fIsem_perm.uid\fP で見つかる) 所有者でもなく、 プロセスが
\fBCAP_SYS_ADMIN\fP ケーパビリティを持たない。
.TP 
\fBERANGE\fP
\fIcmd\fP 引き数に \fBSETALL\fP または \fBSETVAL\fP が指定され、(集合のセマフォのどれかの)  \fBsemval\fP に設定される値が
0 より小さいか、実装の制限 \fBSEMVMX\fP よりも大きい。
.SH 準拠
.\" SVr4 documents more error conditions EINVAL and EOVERFLOW.
SVr4, POSIX.1\-2001.
.SH 注意
\fBIPC_INFO\fP, \fBSEM_STAT\fP, \fBSEM_INFO\fP 操作は \fBipcs\fP(1)
プログラムによって割当られた資源について情報を提供するために使用される。 将来的にはこれらは変更されるか、 /proc
ファイル・システム・インタフェースに移動されるかもしれない。
.LP
\fI構造体 semid_ds\fP 内の多くのフィールドは、 Linux 2.2 では \fIshort\fP 型だったが、Linux 2.4 では
\fIlong\fP 型になった。 この利点を生かすには、glibc\-2.1.91 以降の環境下で 再コンパイルすれば十分である。
カーネルは新しい形式の呼び出しと古い形式の呼び出しを \fIcmd\fP 内の \fBIPC_64\fP フラグで区別する。
.PP
初期のバージョンの glibc では、 \fIsemun\fP 共用体は \fI<sys/sem.h>\fP で定義されていたが、
POSIX.1\-2001 では呼び出し側がこの共用体を定義する必要がある。 この共用体が定義されて\fIいない\fP glibc のバージョンでは、 マクロ
\fB_SEM_SEMUN_UNDEFINED\fP が \fI<sys/sem.h>\fP で定義されている。
.PP
以下は \fBsemctl\fP()  コールに影響するセマフォ集合のシステム制限:
.TP 
\fBSEMVMX\fP
\fBsemval\fP の最大値 : 実装依存 (32767)。
.LP
移植性を高めるための一番良い方法は、常に 4 個の引き数で \fBsemctl\fP()  を呼び出すことである。
.SH 関連項目
\fBipc\fP(2), \fBsemget\fP(2), \fBsemop\fP(2), \fBcapabilities\fP(7),
\fBsem_overview\fP(7), \fBsvipc\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.41 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
