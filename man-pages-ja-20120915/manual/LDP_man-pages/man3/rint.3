.\" Copyright 2001 Andries Brouwer <aeb@cwi.nl>.
.\" and Copyright 2008, Linux Foundation, written by Michael Kerrisk
.\"     <mtk.manpages@gmail.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH RINT 3 2010\-09\-20 "" "Linux Programmer's Manual"
.SH 名前
nearbyint, nearbyintf, nearbyintl, rint, rintf, rintl \- 最も近い整数に丸める
.SH 書式
.nf
\fB#include <math.h>\fP
.sp
\fBdouble nearbyint(double \fP\fIx\fP\fB);\fP
.br
\fBfloat nearbyintf(float \fP\fIx\fP\fB);\fP
.br
\fBlong double nearbyintl(long double \fP\fIx\fP\fB);\fP
.sp
\fBdouble rint(double \fP\fIx\fP\fB);\fP
.br
\fBfloat rintf(float \fP\fIx\fP\fB);\fP
.br
\fBlong double rintl(long double \fP\fIx\fP\fB);\fP
.fi
.sp
\fI\-lm\fP でリンクする。
.sp
.in -4n
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.in
.sp
.ad l
\fBnearbyint\fP(), \fBnearbyintf\fP(), \fBnearbyintl\fP():
.RS 4
_XOPEN_SOURCE\ >=\ 600 || _POSIX_C_SOURCE\ >=\ 200112L ||
_ISOC99_SOURCE;
.br
or \fIcc\ \-std=c99\fP
.RE
.br
\fBrint\fP():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 500 || _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED || _ISOC99_SOURCE || _POSIX_C_SOURCE\ >=\ 200112L;
.br
or \fIcc\ \-std=c99\fP
.RE
.br
\fBrintf\fP(), \fBrintl\fP():
.RS 4
_BSD_SOURCE || _SVID_SOURCE || _XOPEN_SOURCE\ >=\ 600 || _ISOC99_SOURCE
|| _POSIX_C_SOURCE\ >=\ 200112L;
.br
or \fIcc\ \-std=c99\fP
.RE
.ad b
.SH 説明
\fBnearbyint\fP()  関数群は、現在の丸め方向 (\fBfesetround\fP(3)  参照) で引き数を浮動小数点形式の整数に丸める。
\fIinexact\fP 例外を出さない。
.LP
\fBrint\fP()  関数群も同じような動作をするが、 結果が引き数と異なる場合に \fIinexact\fP 例外 (\fBFE_INEXACT\fP)  を出す
(この例外は \fBfetestexcept\fP(3)  経由で確認可能)。
.SH 返り値
これらの関数は丸めた整数値を返す。

\fIx\fP が整数、+0、\-0、NaN、無限のいずれかの場合、 \fIx\fP そのものが返される。
.SH エラー
エラーは発生しない。 POSIX.1\-2001 にはオーバーフローでの範囲エラー (range error) の 記載がある。「注意」の節を参照のこと。
.SH 準拠
C99, POSIX.1\-2001.
.SH 注意
SUSv2 と POSIX.1\-2001 にはオーバーフローに関する記述があり、 オーバーフローの場合には、 \fIerrno\fP を \fBERANGE\fP
に設定するか、 \fBFE_OVERFLOW\fP 例外を発生することとされている。
実際のところ、どの現行のマシンでも結果がオーバーフローを起こすことはないので、 このエラー処理は意味がない。
(より正確に言うと、オーバーフローは指数部の最大値が 仮数部を表すビットの数より小さい場合にしか起こらない。 IEEE\-754 規格の 32 ビットと
64 ビットの浮動小数では、 指数部の最大値はそれぞれ 128 と 1024 であり、 仮数部のビット数はそれぞれ 24 と 53 である。)

丸めた値を整数型に格納した場合には、おそらくこの関数ではなく \fBlrint\fP(3)  に載っている関数のどれかを使いたいのだろう。
.SH 関連項目
\fBceil\fP(3), \fBfloor\fP(3), \fBlrint\fP(3), \fBround\fP(3), \fBtrunc\fP(3)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.41 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
