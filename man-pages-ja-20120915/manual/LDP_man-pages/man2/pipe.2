.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (C) 2005, 2008, Michael Kerrisk <mtk.manpages@gmail.com>
.\" (A few fragments remain from an earlier (1992) version by
.\" Drew Eckhardt <drew@cs.colorado.edu>.)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified by Michael Haardt <michael@moria.de>
.\" Modified 1993-07-23 by Rik Faith <faith@cs.unc.edu>
.\" Modified 1996-10-22 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified 2004-06-17 by Michael Kerrisk <mtk.manpages@gmail.com>
.\" Modified 2005, mtk: added an example program
.\" Modified 2008-01-09, mtk: rewrote DESCRIPTION; minor additions
.\"     to EXAMPLE text.
.\" 2008-10-10, mtk: add description of pipe2()
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH PIPE 2 2012\-02\-14 Linux "Linux Programmer's Manual"
.SH 名前
pipe, pipe2 \- パイプを生成する
.SH 書式
.nf
\fB#include <unistd.h>\fP
.sp
\fBint pipe(int \fP\fIpipefd\fP\fB[2]);\fP
.sp
\fB#define _GNU_SOURCE\fP             /* feature_test_macros(7) 参照 */
\fB#include <fcntl.h>\fP              /* O_* 定数の定義の取得 */
\fB#include <unistd.h>\fP
.sp
\fBint pipe2(int \fP\fIpipefd\fP\fB[2], int \fP\fIflags\fP\fB);\fP
.fi
.SH 説明
\fBpipe\fP(2)  はパイプを生成する。 パイプは、プロセス間通信に使用できる単方向のデータチャネルである。 配列 \fIpipefd\fP
は、パイプの両端を参照する二つのファイルディスクリプタを 返すのに使用される。 \fIpipefd[0]\fP がパイプの読み出し側、
\fIpipefd[1]\fP がパイプの書き込み側である。 パイプの書き込み側に書き込まれたデータは、
パイプの読み出し側から読み出されるまでカーネルでバッファリングされる。 さらなる詳細は \fBpipe\fP(7)  を参照のこと。

\fBpipe2\fP()  は \fIflags\fP が 0 の場合には \fBpipe\fP()  と同じである。 \fIflags\fP に以下の値をビット毎の論理和
(OR) で指定することで、 異なる動作をさせることができる。
.TP  12
\fBO_NONBLOCK\fP
新しく生成される二つのオープンファイル記述 (open file description) の \fBO_NONBLOCK\fP
ファイルステータスフラグをセットする。 このフラグを使うことで、 \fBO_NONBLOCK\fP をセットするために \fBfcntl\fP(2)
を追加で呼び出す必要がなくなる。
.TP 
\fBO_CLOEXEC\fP
新しく生成される二つのファイルディスクリプタの close\-on\-exec (\fBFD_CLOEXEC\fP)  フラグをセットする。
このフラグが役に立つ理由については、 \fBopen\fP(2)  の \fBO_CLOEXEC\fP フラグの説明を参照のこと。
.SH 返り値
成功した場合は 0 が返される。エラーの場合は \-1 が返され、 \fIerrno\fP が適切に設定される。
.SH エラー
.TP 
\fBEFAULT\fP
\fIpipefd\fP が無効な値である。
.TP 
\fBEINVAL\fP
(\fBpipe2\fP())  \fIflags\fP に無効な値が入っている。
.TP 
\fBEMFILE\fP
このプロセスで使われているファイルディスクリプタが多すぎる。
.TP 
\fBENFILE\fP
オープンされているファイルの総数がシステムの制限に達している。
.SH バージョン
\fBpipe2\fP()  はバージョン 2.6.27 で Linux に追加された。 glibc によるサポートはバージョン 2.9 以降で利用できる。
.SH 準拠
\fBpipe\fP(): POSIX.1\-2001.

\fBpipe2\fP()  は Linux 固有である。
.SH 例
.\" fork.2 refers to this example program.
以下のプログラムではパイプを生成し、その後 \fBfork\fP(2)  で子プロセスを生成する。
子プロセスは同じパイプを参照するファイルディスクリプタ集合のコピーを 継承する。 \fBfork\fP(2)  の後、各プロセスはパイプ
(\fBpipe\fP(7)  を参照) に必要がなくなったディスクリプタをクローズする。 親プロセスはプログラムのコマンドライン引き数に含まれる
文字列をパイプへ書き込み、 子プロセスはこの文字列をパイプから 1 バイトずつ読み込んで標準出力にエコーする。
.nf

#include <sys/wait.h>
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>

int
main(int argc, char *argv[])
{
    int pipefd[2];
    pid_t cpid;
    char buf;

    if (argc != 2) {
	fprintf(stderr, "Usage: %s <string>\en", argv[0]);
	exit(EXIT_FAILURE);
    }

    if (pipe(pipefd) == \-1) {
        perror("pipe");
        exit(EXIT_FAILURE);
    }

    cpid = fork();
    if (cpid == \-1) {
        perror("fork");
        exit(EXIT_FAILURE);
    }

    if (cpid == 0) {    /* 子プロセスがパイプから読み込む */
        close(pipefd[1]);  /* 使用しない write 側はクローズする */

        while (read(pipefd[0], &buf, 1) > 0)
            write(STDOUT_FILENO, &buf, 1);

        write(STDOUT_FILENO, "\en", 1);
        close(pipefd[0]);
        _exit(EXIT_SUCCESS);

    } else {            /* 親プロセスは argv[1] をパイプへ書き込む */
        close(pipefd[0]);          /* 使用しない read 側はクローズする */
        write(pipefd[1], argv[1], strlen(argv[1]));
        close(pipefd[1]);          /* 読み込み側が EOF に出会う */
        wait(NULL);                /* 子プロセスを待つ */
        exit(EXIT_SUCCESS);
    }
}
.fi
.SH 関連項目
\fBfork\fP(2), \fBread\fP(2), \fBsocketpair\fP(2), \fBwrite\fP(2), \fBpopen\fP(3),
\fBpipe\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.41 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
