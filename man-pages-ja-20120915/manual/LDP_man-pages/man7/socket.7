.\" t
.\" Don't change the first line, it tells man that we need tbl.
.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\" and copyright (c) 1999 Matthew Wilcox.
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\"
.\" 2002-10-30, Michael Kerrisk, <mtk.manpages@gmail.com>
.\"	Added description of SO_ACCEPTCONN
.\" 2004-05-20, aeb, added SO_RCVTIMEO/SO_SNDTIMEO text.
.\" Modified, 27 May 2004, Michael Kerrisk <mtk.manpages@gmail.com>
.\"     Added notes on capability requirements
.\"	A few small grammar fixes
.\" 2010-06-13 Jan Engelhardt <jengelh@medozas.de>
.\"	Documented SO_DOMAIN and SO_PROTOCOL.
.\" FIXME
.\" The following are not yet documented:
.\"	SO_PEERNAME
.\"	SO_TIMESTAMPNS
.\"	SO_MARK (see https://bugzilla.kernel.org/show_bug.cgi?id=16461)
.\"	SO_TIMESTAMPING (2.6.30)
.\"	SO_RXQ_OVFL (2.6.33)
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH SOCKET 7 2012\-04\-23 Linux "Linux Programmer's Manual"
.SH 名前
socket \- Linux のソケットインターフェース
.SH 書式
\fB#include <sys/socket.h>\fP
.sp
\fIsockfd\fP\fB = socket(int \fP\fIsocket_family\fP\fB, int \fP\fIsocket_type\fP\fB, int
\fP\fIprotocol\fP\fB);\fP
.SH 説明
このマニュアルページは Linux ネットワークのソケット層に対する ユーザインターフェースを記述するものである。 BSD
互換ソケットは、ユーザプロセスとカーネル内部の ネットワークプロトコルスタック群との間に、 統一的なインターフェースを提供するものである。
プロトコルモジュールは \fIプロトコルファミリー (protocol familiy)\fP (例： \fBAF_INET\fP, \fBAF_IPX\fP,
\fBAF_PACKET\fP)  と \fIソケットタイプ (socket types)\fP (例： \fBSOCK_STREAM\fP,
\fBSOCK_DGRAM\fP)  に分類できる。 これらに関するより詳しい情報は \fBsocket\fP(2)  を参照のこと。
.SS ソケット層の関数群
これらの関数はユーザプロセスがパケットを送受信したり、その他のソケット操作を 行ったりするために用いられる。詳細はそれぞれのマニュアルページを
見てほしい。

\fBsocket\fP(2)  はソケットを生成する。 \fBconnect\fP(2)  はソケットをリモートのソケットアドレスに接続する。
\fBbind\fP(2)  はソケットをローカルのソケットアドレスにバインドする。 \fBlisten\fP(2)
はソケットに新しい接続が来たら受信するように伝え、 \fBaccept\fP(2)  は外部からやってきた接続に対して新しいソケットを得るために用いられる。
\fBsocketpair\fP(2)  は互いに接続された二つの名前無しソケット (anonymous socket) を返す (\fBAF_UNIX\fP
のような、いくつかのローカルなファミリーでしか実装されていない)。
.PP
\fBsend\fP(2), \fBsendto\fP(2), \fBsendmsg\fP(2)  はソケットを通してデータを送信し、 \fBrecv\fP(2)
\fBrecvfrom\fP(2), \fBrecvmsg\fP(2)  はソケットからデータを受信する。 \fBpoll\fP(2)  と \fBselect\fP(2)
はデータの到着を待ったり、データ送信の準備ができるまで待ったりする。 さらに、 \fBwrite\fP(2), \fBwritev\fP(2),
\fBsendfile\fP(2), \fBread\fP(2), \fBreadv\fP(2)  のような標準的な I/O 操作もデータの読み書きに用いることができる。
.PP
\fBgetsockbyname\fP(2)  はローカルのソケットアドレスを返し、 \fBgetpeername\fP(2)
はリモートのソケットアドレスを返す。 \fBgetsockopt\fP(2)  と \fBsetsockopt\fP(2)
はソケット層のオプションやプロトコルオプションの取得・設定に用いられる。 他のいくつかのオプションの取得・設定には \fBioctl\fP(2)
を使うことができる。
.PP
\fBclose\fP(2)  はソケットをクローズする。 \fBshutdown\fP(2)  は全二重なソケット接続を部分的にクローズする。
.PP
シーク動作や、 0 以外の位置に対する \fBpread\fP(2)  や \fBpwrite\fP(2)  はソケットではサポートされていない。
.PP
非ブロッキングな I/O をソケットで行うことは可能で、 \fBfcntl\fP(2)  を使ってソケットのファイルディスクリプタに
\fBO_NONBLOCK\fP フラグをセットすれば良い。 こうするとブロックされる操作は、 (通常)  \fBEAGAIN\fP エラーで戻ることになる
(後で処理が再試行されることが期待されている)。 \fBconnect\fP(2)  では \fBEINPROGRESS\fP エラーが返される。
この場合、ユーザはさまざまなイベントを \fBpoll\fP(2)  や \fBselect\fP(2)  を使って待つことができる。
.TS
tab(:) allbox;
c s s
l l l.
I/O イベント
イベント:poll フラグ:内容
Read:POLLIN:T{
新しいデータが到着した。
T}
Read:POLLIN:T{
(接続志向のソケットで)
接続の設定が終了した。
T}
Read:POLLHUP:T{
接続先で切断要求が生成された。
T}
Read:POLLHUP:T{
接続が壊れた (接続志向のプロトコルのみ)。
この場合、ソケットに書き込みが行われると
\fBSIGPIPE\fP
も送信される。
T}
Write:POLLOUT:T{
ソケットには新しいデータを書き込むのに充分なバッファ領域がある。
T}
Read/Write:T{
POLLIN|
.br
POLLOUT
T}:T{
外部向けの
\fBconnect\fP(2)
が終了した。
T}
Read/Write:POLLERR:非同期的 (asynchronous) なエラーが起こった。
Read/Write:POLLHUP:接続先が片方向を切断した。
Exception:POLLPRI:T{
緊急データ (urgent data) が到着した。この場合は
\fBSIGURG\fP
が送信される。
T}
.\" FIXME . The following is not true currently:
.\" It is no I/O event when the connection
.\" is broken from the local end using
.\" .BR shutdown (2)
.\" or
.\" .BR close (2).
.TE

.PP
\fBpoll\fP(2)  や \fBselect\fP(2)  を使う代わりに、カーネルからアプリケーションに イベントを通知させるのに \fBSIGIO\fP
シグナルを使う方法もある。 この方法を使うには、 \fBfcntl\fP(2)  を用いてソケットのファイルディスクリプタに \fBO_ASYNC\fP
フラグをセットし、 \fBSIGIO\fP に対する有効なシグナルハンドラを \fBsigaction\fP(2)  によって設定しておく必要がある。 後述の
\fIシグナル\fP に関する議論も参考にすること。
.SS ソケットオプション
.\" FIXME
.\" In the list below, the text used to describe argument types
.\" for each socket option should be more consistent
.\"
.\" SO_ACCEPTCONN is in POSIX.1-2001, and its origin is explained in
.\" W R Stevens, UNPv1
これらのソケットオプションは、 \fBsetsockopt\fP(2)  を用いれば設定でき、 \fBgetsockopt\fP(2)  を用いれば取得できる。
但し、どのソケットの場合も ソケットレベルには \fBSOL_SOCKET\fP を指定すること。
.TP 
\fBSO_ACCEPTCONN\fP
このソケットが \fBlisten\fP(2)  によって接続待ち受け状態に設定されているかどうかを示す値を返す。 値 0 は listen
状態のソケットでないことを、 値 1 は listen 状態のソケットであることを示す。このソケットオプションは読み込み専用である。
.TP 
\fBSO_BINDTODEVICE\fP
このソケットを、引き数で渡したインターフェース名で指定される
(\(lqeth0\(rq のような) 特定のデバイスにバインドする。
名前が空文字列だったり、オプションの長さ (optlen) が 0 の場合には、
ソケットのバインドが削除される。渡すオプションは、インターフェース名が
入ったヌル文字で終端された可変長の文字列である。
文字列の最大のサイズは \fBIFNAMSIX\fP である。
ソケットがインターフェースにバインドされると、その特定のインターフェース
から受信されたパケットだけを処理する。
このオプションはいくつかのソケットタイプ、
特に \fBAF_INET\fP に対してのみ動作する点に注意すること。
パケットソケットではサポートされていない (通常の \fBbind\fP(2) を使うこと)。
.TP 
\fBSO_BROADCAST\fP
ブロードキャストフラグを設定・取得する。有効になっていると、データグラ
ムソケットはブロードキャストアドレスにパケットを送信できるようになる。
ストリーム指向のソケットには何の効果もない。
.TP 
\fBSO_BSDCOMPAT\fP
BSD のバグに対して互換性を取るための機能を有効にする。 この機能は Linux 2.0 と 2.2 の UDP
プロトコルモジュールで使用されている。 有効になっていると、 UDP ソケットで受信された ICMP エラーは ユーザプログラムに渡されない。
これ以降のバージョンのカーネルでは、このオプションのサポートは 段階的に廃止されてきた。 Linux 2.4 ではこのオプションは黙って無視され、
Linux 2.6 ではプログラムがこのオプションを使用すると (printk() を使って)  カーネルの警告メッセージが出力される。 Linux
2.0 では、このオプションを指定すると、 raw ソケットにおいても BSD のバグ (ランダムヘッダ変更、 ブロードキャストフラグのスキップ)
に対する互換機能が有効になっていた。 しかし、こちらは Linux 2.2 で削除された。
.TP 
\fBSO_DEBUG\fP
ソケットのデバッグ機能を有効にする。 \fBCAP_NET_ADMIN\fP 権限を持つプロセスか、実効ユーザ ID が 0 のプロセスでしか 利用できない。
.TP 
\fBSO_DOMAIN\fP (Linux 2.6.32 以降)
ソケットドメインを整数で取得する。 \fBAF_INET6\fP のような値が返される。
詳細は \fBsocket\fP(2) を参照。このソケットオプションは読み込み専用である。
.TP 
\fBSO_ERROR\fP
保留になっていたソケットエラーを取得してクリアする。
このソケットオプションは読み込み専用である。整数値をとる。
.TP 
\fBSO_DONTROUTE\fP
ゲートウェイを経由せず、直接接続されているホストに送信する。 \fBsend\fP(2)  操作で \fBMSG_DONTROUTE\fP
フラグをセットした場合も同じ効果が得られる。 ブール整数のフラグを取る。
.TP 
\fBSO_KEEPALIVE\fP
接続志向のソケットに対する keep\-alive メッセージの送信を有効にする。 ブール値の整数フラグをとる。
.TP 
\fBSO_LINGER\fP
\fBSO_LINGER\fP オプションを取得・設定する。引き数には \fIlinger\fP 構造体を取る。
.sp
.in +4n
.nf
struct linger {
    int l_onoff;    /* linger active */
    int l_linger;   /* how many seconds to linger for */
};
.fi
.in
.IP
有効になっていると、 \fBclose\fP(2)  や \fBshutdown\fP(2)
は、そのソケットにキューイングされたメッセージがすべて送信完了するか、 linger (居残り) タイムアウトになるまで返らない。無効になっていると、
これらのコールはただちに戻り、クローズ動作はバックグラウンドで行われる。 ソケットのクローズを \fBexit\fP(2)
の一部として行った場合には、残っているソケットの クローズ動作は必ずバックグラウンドに送られる。
.TP 
\fBSO_OOBINLINE\fP
.\" don't document it because it can do too much harm.
.\".B SO_NO_CHECK
このオプションを有効にすると、帯域外データ (out\-of\-band data) は 受信データストリーム中に置かれる。有効にしなければ、
帯域外データは受信時に \fBMSG_OOB\fP フラグがセットされている場合に限って渡される。
.TP 
\fBSO_PASSCRED\fP
.\" FIXME Document SO_PASSSEC, added in 2.6.18; there is some info
.\" in the 2.6.18 ChangeLog
\fBSCM_CREDENTIALS\fP 制御メッセージの受信を有効/無効にする。詳細は \fBunix\fP(7)  を参照のこと。
.TP 
\fBSO_PEERCRED\fP
このソケットに接続してきた外部プロセスの信任状 (credential) を返す。
このソケットオプションが利用できるのは、接続された \fBAF_UNIX\fP ストリームソケット間、
および \fBsocketpair\fP(2) を使って作成された \fBAF_UNIX\fP のストリームソケットと
データグラムソケットのペアだけである。
\fBunix\fP(7)  を参照のこと。
\fBconnect\fP(2) や \fBsocketpair\fP(2) が呼ばれた時に有効であった信任状が返される。
引き数は \fIucred\fP 構造体である。
このソケットオプションは読み込み専用である。
.TP 
\fBSO_PRIORITY\fP
プロトコルで定義された優先度を、このソケットから 送信される全てのパケットにセットする。 Linux はネットワークキュー内部の
整列にこの値を用いる。高い優先度を持っているパケットは先に処理される。 ただしそのデバイスのキュー処理のやり方に依存する。 \fBip\fP(7)
では、外向けパケットの IP type\-of\-service (TOS) フィールドにもこの値が設定される。 0 から 6 以外の優先度をセットするには
\fBCAP_NET_ADMIN\fP ケーパビリティが必要である。
.TP 
\fBSO_PROTOCOL\fP (Linux 2.6.32 以降)
ソケットのプロトコルを整数で取得する。 \fBIPPROTO_SCTP\fP のような値が返される。
詳細は \fBsocket\fP(2) を参照。このソケットオプションは読み込み専用である。
.TP 
\fBSO_RCVBUF\fP
.\" Most (all?) other implementations do not do this -- MTK, Dec 05
ソケットの受信バッファの最大サイズを設定・取得する (バイト単位)。 \fBsetsockopt\fP(2)  を使って値が設定されたときに
(管理オーバヘッド用の領域を確保するために)  カーネルはこの値を 2倍し、 \fBgetsockopt\fP(2)  はこの 2倍された値を返す。
デフォルトの値は \fI/proc/sys/net/core/rmem_default\fP ファイルで設定され、許容される最大の値は
\fI/proc/sys/net/core/rmem_max\fP ファイルで設定される。 このオプションの最小値は (2倍した値で) 256 である。
.TP 
\fBSO_RCVBUFFORCE\fP (Linux 2.6.14 以降)
このソケットオプションを使うと、特権プロセス (\fBCAP_NET_ADMIN\fP を持つプロセス) は \fBSO_RCVBUF\fP
と同じことを実行できる。 ただし、上限 \fIrmem_max\fP を上書きすることができる。
.TP 
\fBSO_RCVLOWAT\fP と \fBSO_SNDLOWAT\fP
.\" See http://marc.theaimsgroup.com/?l=linux-kernel&m=111049368106984&w=2
.\" Tested on kernel 2.6.14 -- mtk, 30 Nov 05
バッファ中に溜めることのできるデータの最小値を指定する。 このサイズを越えると、ソケット層はそのデータをプロトコルに渡し
(\fBSO_SNDLOWAT\fP)、 受信時にはユーザに渡す (\fBSO_RCVLOWAT\fP)。 これら二つの値は 1 に初期化される。
\fBSO_SNDLOWAT\fP は Linux では変更できない (\fBsetsockopt\fP(2)  は \fBENOPROTOOPT\fP
エラーで失敗する)。 \fBSO_RCVLOWAT\fP は Linux 2.4 以降でのみ変更可能である。 現状、Linux ではシステムコール
\fBselect\fP(2)  と \fBpoll\fP(2)  は \fBSO_RCVLOWAT\fP の設定を考慮に入れずに動作し、
データが1バイト利用可能になっただけでも、 ソケットは読み出し可能とのマークをつける。 一方、それに続けて行うソケットからの read は
\fBSO_RCVLOWAT\fP バイトのデータが利用可能になるまで停止してしまう。
.TP 
\fBSO_RCVTIMEO\fP と \fBSO_SNDTIMEO\fP
.\" Not implemented in 2.0.
.\" Implemented in 2.1.11 for getsockopt: always return a zero struct.
.\" Implemented in 2.3.41 for setsockopt, and actually used.
.\" in fact to EAGAIN
送信・受信のタイムアウトを指定する。これを越えるとエラーを報告する。 引き数は \fIstruct timeval\fP である。
入出力関数がタイムアウト時間の間ブロックされ、かつデータの送信または 受信が行われていた場合は、転送されたデータ量が関数の返り値となる。
何もデータが転送されずにタイムアウトに達した場合は、 \-1 を返し、 \fIerrno\fP に \fBEAGAIN\fP か \fBEWOULDBLOCK\fP
を設定され、 あたかもソケットに非ブロッキングが指定されたように見える。 タイムアウト値に (デフォルト値である) 0 に設定すると、
操作は決してタイムアウトしなくなる。 タイムアウトが影響を及ぼすのは、 ソケット I/O を実行するシステムコールだけ (例えば \fBread\fP(2),
\fBrecvmsg\fP(2), \fBsend\fP(2), \fBsendmsg\fP(2))  である。 \fBselect\fP(2), \fBpoll\fP(2),
\fBepoll_wait\fP(2)  などにはタイムアウトは影響を及ぼさない。
.TP 
\fBSO_REUSEADDR\fP
\fBbind\fP(2)  コールに与えられたアドレスが正しいかを判断するルールで、 ローカルアドレスの再利用を可能にする。 つまり \fBAF_INET\fP
ソケットなら、そのアドレスにバインドされたアクティブな listen 状態のソケットが存在しない限り、バインドが行える。 listen
状態のソケットがアドレス \fBINADDR_ANY\fP で特定のポートにバインドされている場合には、
このポートに対しては、どんなローカルアドレスでもバインドできない。 引き数はブール整数のフラグである。
.TP 
\fBSO_SNDBUF\fP
.\" Most (all?) other implementations do not do this -- MTK, Dec 05
ソケットの送信バッファの最大サイズを設定・取得する (バイト単位)。 \fBsetsockopt\fP(2)  を使って値が設定されたときに
(管理オーバヘッド用の領域を確保するために)  カーネルはこの値を 2倍し、 \fBgetsockopt\fP(2)  はこの 2倍された値を返す。
デフォルトの値は \fI/proc/sys/net/core/wmem_default\fP ファイルで設定され、許容される最大の値は
\fI/proc/sys/net/core/wmem_max\fP ファイルで設定される。 このオプションの最小値は (2倍した値で) 2048 である。
.TP 
\fBSO_SNDBUFFORCE\fP (Linux 2.6.14 以降)
このソケットオプションを使うと、特権プロセス (\fBCAP_NET_ADMIN\fP を持つプロセス) は \fBSO_SNDBUF\fP
と同じことを実行できる。 ただし、上限 \fIwmem_max\fP を上書きすることができる。
.TP 
\fBSO_TIMESTAMP\fP
\fBSO_TIMESTAMP\fP 制御メッセージの受信を有効/無効にする。 タイムスタンプ制御メッセージはレベル \fBSOL_SOCKET\fP で送信され、
\fIcmsg_data\fP フィールドはこのシステムコールでユーザに渡した 最後のパケットの受信時刻を示す \fIstruct timeval\fP である。
制御メッセージの詳細については \fBcmsg\fP(3)  を参照。
.TP 
\fBSO_TYPE\fP
ソケットのタイプを整数で取得する (例: \fBSOCK_STREAM\fP)。
このソケットオプションは読み出し専用である。
.SS シグナル
(ローカルもしくはリモート側で) 切断された 接続指向 (connection\-oriented) のソケットに対して
書き込みを行うと、その書き込みを行ったプロセスに \fBSIGPIPE\fP が送られ、 \fBEPIPE\fP が返される。 write 呼び出しに
\fBMSG_NOSIGNAL\fP フラグを指定していた場合はシグナルは送られない。
.PP
\fBFIOSETOWN\fP \fBfcntl\fP(2)  や \fBSIOCSPGRP\fP \fBioctl\fP(2)
をプロセスまたはプロセスグループに指定しておくと、 I/O イベントが起きたときに \fBSIGIO\fP が送られる。 \fBpoll\fP(2)  や
\fBselect\fP(2)  をシグナルハンドラ内で用いれば、どのソケットでイベントが起こったかを 知ることができる。 (Linux 2.2 における)
別の方法としては、 \fBF_SETSIG\fP \fBfcntl\fP(2)  を用いてリアルタイムシグナルを設定するやり方もある。
リアルタイムシグナルのハンドラは、 \fIsiginfo_t\fP の \fIsi_fd\fP フィールドにファイルディスクリプタが入った状態で呼び出される。
詳細は \fBfcntl\fP(2)  を参照のこと。
.PP
.\" .SS Ancillary Messages
状況によっては (例えば複数のプロセスが一つのソケットにアクセスしているなど)、 \fBSIGIO\fP
の原因となった状態は、プロセスがそのシグナルへの対応を行ったときには 消えてしまっているかもしれない。
この場合は、プロセスは再び待つようにすべきである。 Linux は同じシグナルを後で再送するからである。
.SS "/proc インタフェース"
core のソケットのネットワーキングパラメータには、 \fI/proc/sys/net/core/\fP ディレクトリ内のファイルを通してアクセスできる。
.TP 
\fIrmem_default\fP
ソケットの受信バッファサイズのデフォルト値 (バイト単位)。
.TP 
\fIrmem_max\fP
\fBSO_RCVBUF\fP ソケットオプションを用いてユーザが設定できる ソケットの受信バッファサイズの最大値 (バイト単位)。
.TP 
\fIwmem_default\fP
ソケットの送信バッファサイズのデフォルト値 (バイト単位)。
.TP 
\fIwmem_max\fP
\fBSO_SNDBUF\fP ソケットオプションを用いてユーザが設定できる ソケットの送信バッファサイズの最大値 (バイト単位)。
.TP 
\fImessage_cost\fP と \fImessage_burst\fP
トークン・バケット・フィルターを設定する。 これは外部のネットワークイベントによって引き起こされた 負荷限界の警告メッセージに用いられる。
.TP 
\fInetdev_max_backlog\fP
グローバルな入力キューにおける最大のパケット数。
.TP 
\fIoptmem_max\fP
.\" netdev_fastroute is not documented because it is experimental
ソケットあたりの、補助データ (ancillary data) とユーザ制御データ (iovecs のようなもの) との和の最大長。
.SS ioctl
以下に示す操作には \fBioctl\fP(2)  を用いてアクセスできる。

.in +4n
.nf
\fIerror\fP\fB = ioctl(\fP\fIip_socket\fP\fB, \fP\fIioctl_type\fP\fB, \fP\fI&value_result\fP\fB);\fP
.fi
.in
.TP 
\fBSIOCGSTAMP\fP
.\"
最後にユーザに渡されたパケットの受信タイムスタンプを \fIstruct timeval\fP に入れて返す。 これは round trip
時間を正確に測りたいときに便利である。 \fIstruct timeval\fP の説明は \fBsetitimer\fP(2)  を見てほしい。 この ioctl
は、ソケットオプション \fBSO_TIMESTAMP\fP がソケットにセットされていない場合にのみ使用すべきである。 さもなければ、この ioctl は
\fBSO_TIMESTAMP\fP がセットされていなかった間に受信した最後のパケットの時刻を返すか、 そのようなパケットを受信していない場合には失敗する
(つまり、 \fBioctl\fP(2)  は \-1 を返し、 \fIerrno\fP に \fBENOENT\fP をセットする)。
.TP 
\fBSIOCSPGRP\fP
非同期 I/O 操作の終了時や緊急データの受信時に \fBSIGIO\fP や \fBSIGURG\fP シグナル群を送るプロセスやプロセスグループを設定する。
引き数は \fIpid_t\fP へのポインタである。 引き数が正だと、そのプロセスにシグナルが送られる。負だと、 引き数の絶対値を ID
に持つプロセスグループにシグナルが送られる。 シグナル受信先には、自分自身のプロセス / 自分の所属するプロセスグループ しか指定できない。但し、
\fBCAP_KILL\fP ケーパビリティを持っている場合、及び実効ユーザ ID が 0 のプロセスの場合は この限りではない。
.TP 
\fBFIOASYNC\fP
\fBO_ASYNC\fP フラグを変更し、ソケットの非同期 (asynchronous) I/O モードを 有効/無効にする。非同期 I/O モードでは、
新しい I/O イベントが起きたときに、 \fBSIGIO\fP シグナルや \fBF_SETSIG\fP で設定されたシグナル・セットが発行される。
.IP
.\"
引き数はブール整数のフラグである。 (この操作は \fBfcntl\fP(2)  を使って \fBO_ASYNC\fP フラグをセットするのと同じ意味である。)
.TP 
\fBSIOCGPGRP\fP
\fBSIGIO\fP や \fBSIGURG\fP を受信したカレントプロセス・プロセスグループを取得する。 ない場合は 0 が返る。
.PP
有効な \fBfcntl\fP(2)  操作:
.TP 
\fBFIOGETOWN\fP
\fBSIOCGPGRP\fP \fBioctl\fP(2)  と同じ。
.TP 
\fBFIOSETOWN\fP
\fBSIOCSPGRP\fP \fBioctl\fP(2)  と同じ。
.SH バージョン
\fBSO_BINDTODEVICE\fP は Linux 2.0.30 で導入された。 \fBSO_PASSCRED\fP は Linux 2.2 で登場した。
\fI/proc\fP インタフェースは Linux 2.2 で導入された。 \fBSO_RCVTIMEO\fP と \fBSO_SNDTIMEO\fP は Linux
2.3.41 以降でサポートされている。 それ以前は、タイムアウトはプロトコル固有の固定の設定値で、 読み書きをすることはできなかった。
.SH 注意
Linux は、送受信バッファの半分を内部のカーネル構造体で用いると仮定している。 したがって、対応する \fI/proc\fP
ファイルはネットワーク回線上での大きさの 2 倍になる。

Linux では、 \fBSO_REUSEADDR\fP オプションでポートの再利用が許可されるのは、 そのポートに対して \fBbind\fP(2)
を前に実行したプログラムとそのポートを再利用 しようとするプログラムの両方で \fBSO_REUSEADDR\fP がセットされた場合のみである。 この動作は
(FreeBSD などの) いくつかの実装とは異なる。これらでは、 後でポートを再利用しようとするプログラムで \fBSO_REUSEADDR\fP
オプションをセットするだけでよい。 たいていはこの違いは見えない。なぜなら、例えばサーバプログラムは
常にこのオプションをセットするように設計されるからである。
.SH バグ
.\" FIXME Document SO_ATTACH_FILTER and SO_DETACH_FILTER
.\" .SH AUTHORS
.\" This man page was written by Andi Kleen.
\fBCONFIG_FILTER\fP ソケットオプションである \fBSO_ATTACH_FILTER\fP と \fBSO_DETACH_FILTER\fP
について記載されていない。これらは libpcap ライブラリを通して 用いる方が良い。
.SH 関連項目
\fBgetsockopt\fP(2), \fBsetsockopt\fP(2), \fBsocket\fP(2), \fBcapabilities\fP(7),
\fBddp\fP(7), \fBip\fP(7), \fBpacket\fP(7), \fBtcp\fP(7), \fBudp\fP(7), \fBunix\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.41 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
