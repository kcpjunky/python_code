.\" t
.\" Copyright (c) 1994,1995 Mike Battersby <mib@deakin.edu.au>
.\" and Copyright 2004, 2005 Michael Kerrisk <mtk.manpages@gmail.com>
.\" based on work by faith@cs.unc.edu
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" Modified, aeb, 960424
.\" Modified Fri Jan 31 17:31:20 1997 by Eric S. Raymond <esr@thyrsus.com>
.\" Modified Thu Nov 26 02:12:45 1998 by aeb - add SIGCHLD stuff.
.\" Modified Sat May  8 17:40:19 1999 by Matthew Wilcox
.\"	add POSIX.1b signals
.\" Modified Sat Dec 29 01:44:52 2001 by Evan Jones <ejones@uwaterloo.ca>
.\"	SA_ONSTACK
.\" Modified 2004-11-11 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Added mention of SIGCONT under SA_NOCLDSTOP
.\"	Added SA_NOCLDWAIT
.\" Modified 2004-11-17 by Michael Kerrisk <mtk.manpages@gmail.com>
.\"	Updated discussion for POSIX.1-2001 and SIGCHLD and sa_flags.
.\"	Formatting fixes
.\" 2004-12-09, mtk, added SI_TKILL + other minor changes
.\" 2005-09-15, mtk, split sigpending(), sigprocmask(), sigsuspend()
.\"	out of this page into separate pages.
.\" 2010-06-11 Andi Kleen, add hwpoison signal extensions
.\" 2010-06-11 mtk, improvements to discussion of various siginfo_t fields.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH SIGACTION 2 2012\-04\-26 Linux "Linux Programmer's Manual"
.SH 名前
sigaction \- シグナルの動作の確認と変更
.SH 書式
.nf
\fB#include <signal.h>\fP
.sp
\fBint sigaction(int \fP\fIsignum\fP\fB, const struct sigaction *\fP\fIact\fP\fB,\fP
\fB              struct sigaction *\fP\fIoldact\fP\fB);\fP
.fi
.sp
.in -4n
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.in
.sp
.ad l
\fBsigaction\fP(): _POSIX_C_SOURCE\ >=\ 1 || _XOPEN_SOURCE || _POSIX_SOURCE
.ad b
.SH 説明
\fBsigaction\fP()  システムコールは、特定のシグナルを受信した際の プロセスの動作を変更するのに使用される (シグナルの概要については
\fBsignal\fP(7)  を参照)。
.PP
\fIsignum\fP には、 \fBSIGKILL\fP と \fBSIGSTOP\fP 以外の有効なシグナルをどれでも指定できる。
.PP
\fIact\fP が NULL 以外であれば、シグナル \fIsignum\fP の新しい動作 (action) として \fIact\fP が設定される。
\fIoldact\fP が NULL でなければ、今までの動作が \fIoldact\fP に格納される。
.PP
\fIsigaction\fP 構造体は以下のような感じに定義される。
.sp
.in +4n
.nf
struct sigaction {
    void     (*sa_handler)(int);
    void     (*sa_sigaction)(int, siginfo_t *, void *);
    sigset_t   sa_mask;
    int        sa_flags;
    void     (*sa_restorer)(void);
};
.fi
.in
.PP
アーキテクチャによっては共用体 (union) が用いられており、その場合には \fIsa_handler\fP と \fIsa_sigaction\fP
の両方を同時に割り当てることはできない。
.PP
\fIsa_restorer\fP 要素は廃止予定であり使用すべきではない。 POSIX には \fIsa_restorer\fP 要素に関する規定はない。
.PP
\fIsa_handler\fP は \fIsignum\fP に対応する動作を指定するもので、 デフォルトの動作を行う \fBSIG_DFL\fP、
そのシグナルを無視する \fBSIG_IGN\fP、 シグナルハンドラ関数へのポインタが設定できる。
シグナルハンドラ関数の引き数は一つであり、シグナル番号が引き数として 渡される。
.PP
\fIsa_flags\fP に \fBSA_SIGINFO\fP が指定された場合、 (\fIsa_handler\fP ではなく)
\fIsa_sigaction\fP により \fIsignum\fP に対応するシグナルハンドラ関数が指定さ
れる。指定される関数は、最初の引き数としてシグナル番号を、二番目の引き
数として \fIsiginfo_t\fP へのポインタを、三番目の引き数として (\fIvoid\ *\fP
にキャストした) \fIucontext_t\fP へのポインタを受けとる。 (一般的には、
ハンドラ関数の三番目の引き数が使用されない。\fIucontext_t\fP についての
詳しい情報は \fBgetcontext\fP(2) を参照。)
.PP
\fIsa_mask\fP は、シグナル・ハンドラ実行中に禁止 (block) すべきシグナルのマスクを指定する
(ハンドラ実行中のシグナルの禁止は、シグナル・ハンドラが起動されたスレッド のシグナルのマスクに追加することで行われる)。 さらに、
\fBSA_NODEFER\fP フラグが指定されていない場合は、ハンドラを起動するきっかけとなる シグナルにも \fIsa_mask\fP が適用される。
.PP
\fIsa_flags\fP はシグナル・ハンドラの動作を変更するためのフラグの集合を指定する。 \fIsa_flags\fP には、以下に示すフラグの (0
個以上の) 論理和をとったものを指定する。
.RS 4
.TP 
\fBSA_NOCLDSTOP\fP
\fIsignum\fP が \fBSIGCHLD\fP の場合、 子プロセスが停止したり (子プロセスが \fBSIGSTOP\fP, \fBSIGTSTP\fP,
\fBSIGTTIN\fP, \fBSIGTTOU\fP を受けたとき) 再開したり (子プロセスが \fBSIGCONT\fP を受けたとき) したときに
\fBSIGCHLD\fP の通知を受けない。 このフラグは、 \fBSIGCHLD\fP に対してハンドラを設定する際にのみ意味を持つ。
.TP 
\fBSA_NOCLDWAIT\fP (Linux 2.6 以降)
.\" To be precise: Linux 2.5.60 -- MTK
(Linux 2.6 以降)  \fIsignum\fP が \fBSIGCHLD\fP の場合、子プロセスが終了したときに
子プロセスをゾンビプロセスに変化させない (\fBwaitpid\fP(2)  も参照)。 このフラグは、 \fBSIGCHLD\fP
に対してハンドラを設定する際、もしくはそのシグナルの処理方法を \fBSIG_DFL\fP に設定する際にのみ意味を持つ。

\fBSIGCHLD\fP に対してハンドラを設定する際に \fBSA_NOCLDWAIT\fP フラグをセットした場合、 子プロセスが終了した際に
\fBSIGCHLD\fP シグナルが生成されるかどうかは、 POSIX.1 では規定されていない。 Linux では、この状況で \fBSIGCHLD\fP
シグナルは生成される。 いくつかの他の実装では生成されない。
.TP 
\fBSA_NODEFER\fP
それ自身のシグナル・ハンドラーの内部にいる時でも そのシグナルをマスクしないようにする。 このフラグはシグナルハンドラを設定する際にのみ意味を持つ。
\fBSA_NOMASK\fP はこのフラグと同じ意味だが、廃止されており、非標準である。
.TP 
\fBSA_ONSTACK\fP
\fBsigaltstack\fP(2)  で提供される別のシグナル・スタックでシグナルハンドラを呼び出す。
別のシグナル・スタックが利用可能でなければ、デフォルトのスタックが 使用される。 このフラグはシグナルハンドラを設定する際にのみ意味を持つ。
.TP 
\fBSA_RESETHAND\fP
シグナルハンドラが呼ばれる度に、シグナルの動作をデフォルトに戻す。 このフラグはシグナルハンドラを設定する際にのみ意味を持つ。
\fBSA_ONESHOT\fP はこのフラグと同じ意味だが、廃止されており、非標準である。
.TP 
\fBSA_RESTART\fP
いくつかのシステムコールをシグナルの通知の前後で再開できるようにして、 BSD シグナル方式 (semantics) と互換性のある動作を提供する。
このフラグはシグナルハンドラを設定する際にのみ意味を持つ。 \fBsignal\fP(7)  に書かれているシステムコールの再開に関する議論を参照のこと。
.TP 
\fBSA_SIGINFO\fP (Linux 2.2 以降)
.\" (The
.\" .I sa_sigaction
.\" field was added in Linux 2.1.86.)
シグナルハンドラは一つではなく、三つの引き数を持つ。この場合は \fIsa_handler\fP のかわりに \fIsa_sigaction\fP
を設定しなければならない このフラグはシグナルハンドラを設定する際にのみ意味を持つ。
.RE
.PP
\fIsa_sigaction\fP のパラメータ \fIsiginfo_t\fP は以下の要素を持つ構造体である:
.sp
.in +4n
.nf
.\" FIXME
.\" si_trapno seems to be only used on SPARC and Alpha;
.\" this page could use a little more detail on its purpose there.
.\" In the kernel: si_tid
siginfo_t {
    int      si_signo;    /* Signal number */
    int      si_errno;    /* An errno value */
    int      si_code;     /* Signal code */
    int      si_trapno;   /* Trap number that caused
                             hardware\-generated signal
                             (unused on most architectures) */
    pid_t    si_pid;      /* Sending process ID */
    uid_t    si_uid;      /* Real user ID of sending process */
    int      si_status;   /* Exit value or signal */
    clock_t  si_utime;    /* User time consumed */
    clock_t  si_stime;    /* System time consumed */
    sigval_t si_value;    /* Signal value */
    int      si_int;      /* POSIX.1b signal */
    void    *si_ptr;      /* POSIX.1b signal */
    int      si_overrun;  /* Timer overrun count; POSIX.1b timers */
    int      si_timerid;  /* Timer ID; POSIX.1b timers */
    void    *si_addr;     /* Memory location which caused fault */
    long     si_band;     /* Band event (was \fIint\fP in
                             glibc 2.3.2 and earlier) */
    int      si_fd;       /* File descriptor */
    short    si_addr_lsb; /* Least significant bit of address
                             (since kernel 2.6.32) */
}
.fi
.in

\fIsi_signo\fP, \fIsi_errno\fP, \fIsi_code\fP は全てのシグナルに対して定義されている (\fIsi_errno\fP は
Linux では一般的には使用されない)。 構造体の残りの部分は、共用体 (union) になっているかもしれない。
その場合は該当するシグナルにおいて意味のあるフィールドのみを読み込む ことができる。
.IP * 2
Signals sent with \fBkill\fP(2)  and \fBsigqueue\fP(3)  fill in \fIsi_pid\fP and
\fIsi_uid\fP.  In addition, signals sent with \fBsigqueue\fP(3)  fill in \fIsi_int\fP
and \fIsi_ptr\fP with the values specified by the sender of the signal; see
\fBsigqueue\fP(3)  for more details.
.IP *
POSIX.1b タイマ (Linux 2.6 以降) は \fIsi_overrun\fP と \fIsi_timerid\fP を
設定する。 \fIsi_timerid\fP フィールドはカーネルがタイマを特定するのに
使用する内部 ID であり、 \fBtimer_create\fP(2) が返すタイマ ID と同じではない。
\fIsi_overrun\fP フィールドはタイマが回り切った回数である。
これは \fBtimer_getoverrun\fP(2) の呼び出しで取得できる情報と同じである。
これらのフィールドは非標準で Linux による拡張である。
.IP *
Signals sent for message queue notification (see the description of
\fBSIGEV_SIGNAL\fP in \fBmq_notify\fP(3))  fill in \fIsi_int\fP/\fIsi_ptr\fP, with the
\fIsigev_value\fP supplied to \fBmq_notify\fP(3); \fIsi_pid\fP, with the process ID
of the message sender; and \fIsi_uid\fP, with the real user ID of the message
sender.
.IP *
.\" FIXME .
.\" When si_utime and si_stime where originally implemented, the
.\" measurement unit was HZ, which was the same as clock ticks
.\" (sysconf(_SC_CLK_TCK)).  In 2.6, HZ became configurable, and
.\" was *still* used as the unit to return the info these fields,
.\" with the result that the field values depended on the the
.\" configured HZ.  Of course, the should have been measured in
.\" USER_HZ instead, so that sysconf(_SC_CLK_TCK) could be used to
.\" convert to seconds.  I have a queued patch to fix this:
.\" http://thread.gmane.org/gmane.linux.kernel/698061/ .
.\" This patch made it into 2.6.27.
.\" But note that these fields still don't return the times of
.\" waited-for children (as is done by getrusage() and times()
.\" and wait4()).  Solaris 8 does include child times.
\fBSIGCHLD\fP は \fIsi_pid\fP, \fIsi_uid\fP, \fIsi_status\fP, \fIsi_utime\fP,
\fIsi_stime\fP を設定し、子プロセスに関する情報を提供する。
\fIsi_pid\fP フィールドは子プロセスのプロセス ID で、
\fIsi_uid\fP フィールドは子プロセスの実ユーザ ID である。
\fIsi_stime\fP フィールドには、 (\fIsi_code\fP が \fBCLD_EXITED\fP の場合は)
子プロセスの終了ステータスが、それ以外の場合は状態が変化する原因と
なったシグナル番号が格納される。
\fIsi_utime\fP と \fIsi_stime\fP には子プロセスが使用したユーザ CPU 時間とシ
ステム CPU 時間がそれぞれ格納される。(\fBgetrusage\fP(2) や \fBtime\fP(2) と
異なり) これらのフィールドには wait 待ちの子プロセスにより使用された時
間は含まれない。 2.6 より前と 2.6.27 以降のカーネルでは、 これらのフィー
ルドに格納される CPU 時間の単位は \fIsysconf(_SC_CLK_TCK)\fP である。
2.6.27 より前の 2.6 系のカーネルでは、バグがあり、 これらのフィールドの
CPU 時間の単位が (カーネルのコンフィグで指定される) システムの jiffy で
あった (\fBtime\fP(7) 参照)。
.IP *
.\" FIXME SIGTRAP also sets the following for ptrace_notify() ?
.\"     info.si_code = exit_code;
.\"     info.si_pid = task_pid_vnr(current);
.\"     info.si_uid = current_uid();  /* Real UID */
\fBSIGILL\fP, \fBSIGFPE\fP, \fBSIGSEGV\fP, \fBSIGBUS\fP, and \fBSIGTRAP\fP fill in
\fIsi_addr\fP with the address of the fault.  On some architectures, these
signals also fill in the \fIsi_trapno\fP filed.  Some suberrors of \fBSIGBUS\fP,
in particular \fBBUS_MCEERR_AO\fP and \fBBUS_MCEERR_AR\fP, also fill in
\fIsi_addr_lsb\fP.  This field indicates the least significant bit of the
reported address and therefore the extent of the corruption.  For example,
if a full page was corrupted, \fIsi_addr_lsb\fP contains
\fIlog2(sysconf(_SC_PAGESIZE))\fP.  \fBBUS_MCERR_*\fP and \fIsi_addr_lsb\fP are
Linux\-specific extensions.
.IP *
\fBSIGIO\fP/\fBSIGPOLL\fP (the two names are synonyms on Linux)  fills in
\fIsi_band\fP and \fIsi_fd\fP.  The \fIsi_band\fP event is a bit mask containing the
same values as are filled in the \fIrevents\fP field by \fBpoll\fP(2).  The
\fIsi_fd\fP field indicates the file descriptor for which the I/O event
occurred.
.PP
\fIsi_code\fP は、そのシグナルが送信された理由を示す値である (ビットマスクではない)。 以下のリストに、どのシグナルの場合でも
\fIsi_code\fP に入りうる値を、シグナルが生成された理由とともに記載する。
.RS 4
.TP  15
\fBSI_USER\fP
\fBkill\fP(2)
.TP 
\fBSI_KERNEL\fP
カーネルにより送信された
.TP 
\fBSI_QUEUE\fP
\fBsigqueue\fP(3)
.TP 
\fBSI_TIMER\fP
POSIX タイマが満了した
.TP 
\fBSI_MESGQ\fP
POSIX メッセージキューの状態が変化した (Linux 2.6.6 以降)。 \fBmq_notify\fP(3)\fB参照。\fP
.TP 
\fBSI_ASYNCIO\fP
非同期 IO (AIO) が完了した
.TP 
\fBSI_SIGIO\fP
Queued \fBSIGIO\fP (only in kernels up to Linux 2.2; from Linux 2.4 onward
\fBSIGIO\fP/\fBSIGPOLL\fP fills in \fIsi_code\fP as described below).
.TP 
\fBSI_TKILL\fP
.\" SI_DETHREAD is defined in 2.6.9 sources, but isn't implemented
.\" It appears to have been an idea that was tried during 2.5.6
.\" through to 2.5.24 and then was backed out.
\fBtkill\fP(2)  または \fBtgkill\fP(2)  (Linux 2.4.19 以降)
.RE
.PP
\fBSIGILL\fP シグナルの場合、 \fIsi_code\fP には以下の値を指定できる:
.RS 4
.TP  15
\fBILL_ILLOPC\fP
不正な命令コード (opcode)
.TP 
\fBILL_ILLOPN\fP
不正なオペランド
.TP 
\fBILL_ILLADR\fP
不正なアドレッシングモード
.TP 
\fBILL_ILLTRP\fP
不正なトラップ
.TP 
\fBILL_PRVOPC\fP
特権が必要な命令コード (opcode)
.TP 
\fBILL_PRVREG\fP
特権が必要なレジスタ
.TP 
\fBILL_COPROC\fP
コプロセッサのエラー
.TP 
\fBILL_BADSTK\fP
内部スタックエラー
.RE
.PP
\fBSIGFPE\fP シグナルの場合、 \fIsi_code\fP には以下の値を指定できる:
.RS 4
.TP  15
\fBFPE_INTDIV\fP
整数の 0 による除算
.TP 
\fBFPE_INTOVF\fP
整数のオーバーフロー
.TP 
\fBFPE_FLTDIV\fP
浮動小数点の 0 による除算
.TP 
\fBFPE_FLTOVF\fP
浮動小数点のオーバーフロー
.TP 
\fBFPE_FLTUND\fP
浮動小数点のアンダーフロー
.TP 
\fBFPE_FLTRES\fP
浮動小数点の不正確な演算結果 (inexact result)
.TP 
\fBFPE_FLTINV\fP
浮動小数点の不正な操作
.TP 
\fBFPE_FLTSUB\fP
範囲外の添字 (subscript)
.RE
.PP
\fBSIGSEGV\fP シグナルの場合、 \fIsi_code\fP には以下の値を指定できる:
.RS 4
.TP  15
\fBSEGV_MAPERR\fP
オブジェクトにマッピングされていないアドレス
.TP 
\fBSEGV_ACCERR\fP
マッピングされたオブジェクトに対するアクセス許可がない
.RE
.PP
\fBSIGBUS\fP シグナルの場合、 \fIsi_code\fP には以下の値を指定できる:
.RS 4
.TP  15
\fBBUS_ADRALN\fP
不正なアドレス・アライメント (alignment)
.TP 
\fBBUS_ADRERR\fP
存在しない物理アドレス
.TP 
\fBBUS_OBJERR\fP
オブジェクト固有のハードウェアエラー
.TP 
\fBBUS_MCEERR_AR\fP (Linux 2.6.32 以降)
Hardware memory error consumed on a machine check; action required.
.TP 
\fBBUS_MCEERR_AO\fP (Linux 2.6.32  以降)
Hardware memory error detected in process but not consumed; action optional.
.RE
.PP
\fBSIGTRAP\fP シグナルの場合、 \fIsi_code\fP には以下の値を指定できる:
.RS 4
.TP  15
\fBTRAP_BRKPT\fP
プロセスのブレークポイント
.TP 
\fBTRAP_TRACE\fP
プロセスのトレース・トラップ
.TP 
\fBTRAP_BRANCH\fP (Linux 2.4 以降)
process taken branch trap
.TP 
\fBTRAP_HWBKPT\fP (Linux 2.4 以降)
hardware breakpoint/watchpoint
.RE
.PP
\fBSIGCHLD\fP シグナルの場合、 \fIsi_code\fP には以下の値を指定できる:
.RS 4
.TP  15
\fBCLD_EXITED\fP
子プロセスが終了した (exited)
.TP 
\fBCLD_KILLED\fP
子プロセスが kill された
.TP 
\fBCLD_DUMPED\fP
子プロセスが異常終了した
.TP 
\fBCLD_TRAPPED\fP
トレース対象の子プロセスがトラップを上げた
.TP 
\fBCLD_STOPPED\fP
子プロセスが停止 (stop) した
.TP 
\fBCLD_CONTINUED\fP
停止していた子プロセスが再開した (Linux 2.6.9 以降)
.RE
.PP
\fBSIGIO\fP/\fBSIGPOLL\fP シグナルの場合、 \fIsi_code\fP には以下の値を
指定できる:
.RS 4
.TP  15
\fBPOLL_IN\fP
入力データが利用可能
.TP 
\fBPOLL_OUT\fP
出力バッファが利用可能
.TP 
\fBPOLL_MSG\fP
入力メッセージが利用可能
.TP 
\fBPOLL_ERR\fP
I/O エラー
.TP 
\fBPOLL_PRI\fP
高優先の入力が利用可能
.TP 
\fBPOLL_HUP\fP
デバイスが接続されていない
.RE
.SH 返り値
\fBsigaction\fP()  は成功すれば 0 を返し、エラーならば \-1 を返す。
.SH エラー
.TP 
\fBEFAULT\fP
\fIact\fP か \fIoldact\fP が指しているメモリが正しいプロセスのアドレス空間にない。
.TP 
\fBEINVAL\fP
無効なシグナルが指定された。補足 (catch) したり無視したりできない シグナルである \fBSIGKILL\fP や \fBSIGSTOP\fP
に対する動作を変更しようとした場合にも発生する。
.SH 準拠
.\" SVr4 does not document the EINTR condition.
POSIX.1\-2001, SVr4.
.SH 注意
\fBfork\fP(2) 経由で作成された子プロセスは、親プロセスのシグナルの処理方法の コピーを継承する。
\fBexecve\fP(2) の前後で、ハンドラが設定されているシグナルの処理方法はデフォルトにリセットされ、
無視が設定されているシグナルの処理方法は変更されずそのままとなる。

POSIX では、 \fBkill\fP(2)  や \fBraise\fP(3)  で生成できないシグナル \fBSIGFPE\fP, \fBSIGILL\fP,
\fBSIGSEGV\fP を無視 (ignore) した場合、その後の動作は未定義である。 ゼロによる整数割り算の結果は未定義となる。
アーキテクチャーによっては、このとき \fBSIGFPE\fP シグナルが生成される。 (同様に負の最大整数を \-1 で割ると \fBSIGFPE\fP
が生成されるかもしれない)  このシグナルを無視すると無限ループに陥るかもしれない。
.PP
POSIX.1\-1990 では \fBSIGCHLD\fP に \fBSIG_IGN\fP を設定することを認めていない。 POSIX.1\-2001
では認められており、 \fBSIGCHLD\fP を無視することでゾンビプロセスの生成を防止することができる (\fBwait\fP(2)  を参照)。
さらに、BSD と SystemV では \fBSIGCHLD\fP を無視した際の動作が異なっている。
そのため、完全に移植性がある方法で、終了した子プロセスがゾンビにならないこと を保証するには、 \fBSIGCHLD\fP シグナルを補足し、
\fBwait\fP(2)  などを実行するしかない。
.PP
POSIX.1\-1990 の仕様では \fBSA_NOCLDSTOP\fP のみが定義されている。
POSIX.1\-2001 では \fBSA_NOCLDWAIT\fP, \fBSA_RESETHAND\fP, \fBSA_NODEFER\fP,
\fBSA_SIGINFO\fP が追加された。 UNIX の古い実装で動かすアプリケーションで、
他の \fIsa_flags\fP フラグを使用すると移植性が下がる。
.PP
\fBSA_RESETHAND\fP フラグは SVr4 の同じ名前のフラグと互換性がある。
.PP
\fBSA_NODEFER\fP フラグは 1.3.9 以降のカーネルでは同じ名前の SVr4 のフラグと互換性がある。 ぞれ以前の Linux
カーネルの実装では、このフラグを設定しているシグナル だけでなく、どのシグナルでも受けることを許していた (実際には \fIsa_mask\fP
の設定により無効にできる)。
.PP
\fBsigaction\fP()  の二番目の引き数に NULL を指定して呼び出すと、現在のシグナルハンドラを確認する
ことができる。また、二番目と三番目の引き数を NULL にて呼び出すことで、 指定されたシグナルが現在のマシンで使えるかどうかチェックできる。
.PP
\fBSIGKILL\fP や \fBSIGSTOP\fP を (\fIsa_mask\fP に指定して) 禁止することはできない。 禁止しようとしても黙って無視される。
.PP
シグナル集合の操作に関する詳細は \fBsigsetops\fP(3)  を参照のこと。
.PP
シグナルハンドラ内から安全に呼び出すことができる、 async\-signal\-safe functions (非同期シングルで安全な関数) の
リストについては \fBsignal\fP(7)  を参照。
.SS 非公式
\fBSA_SIGINFO\fP が導入される前は、 \fIstruct sigcontext\fP 型の二番目の引き数と一緒に \fIsa_handler\fP
を使用することで、 いくつかの追加の情報を入手することができた。 詳細についてはカーネルソースの関連部分を見てほしい。
現在はこの使用法は廃止されている。
.SH バグ
2.6.13 以前のカーネルでは、 \fIsa_flags\fP に \fBSA_NODEFER\fP を指定した場合、
ハンドラが実行中に配送されたシグナル自身がマスクされなくなるだけでなく、 \fIsa_mask\fP に指定されたシグナルもマスクされなくなる。
このバグは、カーネル 2.6.14 で修正された。
.SH 例
\fBmprotect\fP(2)  参照。
.SH 関連項目
\fBkill\fP(1), \fBkill\fP(2), \fBkillpg\fP(2), \fBpause\fP(2), \fBsigaltstack\fP(2),
\fBsignal\fP(2), \fBsignalfd\fP(2), \fBsigpending\fP(2), \fBsigprocmask\fP(2),
\fBsigsuspend\fP(2), \fBwait\fP(2), \fBraise\fP(3), \fBsiginterrupt\fP(3),
\fBsigqueue\fP(3), \fBsigsetops\fP(3), \fBsigvec\fP(3), \fBcore\fP(5),
\fBsignal\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.40 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
