.\" Copyright 1993 David Metcalfe (david@prism.demon.co.uk)
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" References consulted:
.\"     Linux libc source code
.\"     Lewine's _POSIX Programmer's Guide_ (O'Reilly & Associates, 1991)
.\"     386BSD man pages
.\" Modified Sat Jul 24 21:46:57 1993 by Rik Faith (faith@cs.unc.edu)
.\" Modified 961109, 031115, aeb
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH GETMNTENT 3 2009\-09\-15 "" "Linux Programmer's Manual"
.SH 名前
getmntent, setmntent, addmntent, endmntent, hasmntopt, getmntent_r \-
ファイルシステム記述ファイルのエントリを取得する
.SH 書式
.nf
\fB#include <stdio.h>\fP
\fB#include <mntent.h>\fP
.sp
\fBFILE *setmntent(const char *\fP\fIfilename\fP\fB, const char *\fP\fItype\fP\fB);\fP
.sp
\fBstruct mntent *getmntent(FILE *\fP\fIfp\fP\fB);\fP
.sp
\fBint addmntent(FILE *\fP\fIfp\fP\fB, const struct mntent *\fP\fImnt\fP\fB);\fP
.sp
\fBint endmntent(FILE *\fP\fIfp\fP\fB);\fP
.sp
\fBchar *hasmntopt(const struct mntent *\fP\fImnt\fP\fB, const char *\fP\fIopt\fP\fB);\fP
.sp
/* GNU による拡張 */
\fB#include <mntent.h>\fP
.sp
\fBstruct mntent *getmntent_r(FILE *\fP\fIfp\fP\fB, struct mntent *\fP\fImntbuf\fP\fB,\fP
\fB                           char *\fP\fIbuf\fP\fB, int \fP\fIbuflen\fP\fB);\fP
.fi
.sp
.in -4n
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.in
.sp
\fBgetmntent_r\fP(): _BSD_SOURCE || _SVID_SOURCE
.SH 説明
これらのルーチンは、ファイルシステムを記述したファイル \fI/etc/fstab\fP と、マウントされているファイルシステムを記述したファイル
\fI/etc/mtab\fP にアクセスするために用いられる。
.PP
\fBsetmntent\fP()  関数は、ファイルシステムの記述ファイル \fIfilename\fP をオープンして、
そのファイルポインタを返す。このファイルポインタは \fBgetmntent\fP()  によって用いられる。引き数 \fItype\fP
は要求するアクセス形式で、 \fBfopen\fP(3)  の \fImode\fP 引き数と同じ値を取ることができる。
.PP
\fBgetmntent\fP()  関数はファイルシステムの記述ファイル \fIfp\fP から新しい行を読
み込み、行をフィールドに分割した内容を収めた構造体へのポインタを返す。 ポインタはメモリの静的な領域を指しており、この領域は
\fBgetmntent\fP()  を次に呼び出したときに上書きされてしまう。
.PP
\fBaddmntent\fP()  関数は \fImntent\fP 構造体 \fImnt\fP の内容を、オープンされているファイル \fIfp\fP の最後に追加する。
.PP
\fBendmntent\fP()  関数はファイルシステムの記述ファイル \fIfp\fP を閉じる。
.PP
\fBhasmntopt\fP()  関数は \fImntent\fP 構造体 \fImnt\fP の \fImnt_opts\fP フィールド (下記 参照) をスキャンし、
\fIopt\fP に一致する部分文字列があるかを調べる。 有効なマウントオプションについては \fI<mntent.h>\fP と
\fBmount\fP(8)  を参照のこと。
.PP
リエントラントな関数 \fBgetmntent_r\fP()  は \fBgetmntent\fP()  と同じだが、 ユーザが用意した \fI*mntbuf\fP に
\fIstruct mount\fP を格納し、その構造体の各エントリが指し示す文字列を ユーザが用意した大きさ \fIbuflen\fP の配列 \fIbuf\fP
に書き込む。
.PP
\fImntent\fP 構造体は \fI<mntent.h>\fP で以下のように定義されている。
.sp
.in +4n
.nf
struct mntent {
    char *mnt_fsname;   /* name of mounted file system */
    char *mnt_dir;      /* file system path prefix */
    char *mnt_type;     /* mount type (see mntent.h) */
    char *mnt_opts;     /* mount options (see mntent.h) */
    int   mnt_freq;     /* dump frequency in days */
    int   mnt_passno;   /* pass number on parallel fsck */
};
.fi
.in

mtab や fstab ファイルでは、各フィールドは空白で区切られているので、 スペース、タブ、改行、バックスラッシュの 4文字をこれらのファイルで
使いたい場合で、かつ \fImntent\fP 構造体の 4つの文字列メンバーのいずれかに対応するフィールド内で
使いたい場合には、8進のエスケープ表記を使って表現する: スペース (\e040), タブ (\e011), 改行 (\e012), バックスラッシュ
(\e134)。 \fBaddmntent\fP()  と \fBgetmntent\fP()  は、文字列表現から エスケープ表現への変換、およびその逆を行う。
.SH 返り値
\fBgetmntent\fP()  と \fBgetmntent_r\fP()  は \fImntent\fP 構造体へのポインタを返す。 失敗した場合は NULL
を返す。
.PP
\fBaddmntent\fP()  関数は成功したら 0 を返し、失敗したら 1 を返す。
.PP
\fBendmntent\fP()  関数はつねに 1 を返す。
.PP
\fBhasmntopt\fP()  関数は、マッチした場合は部分文字列へのアドレスを返し、 マッチしなければ NULL を返す。
.SH ファイル
.nf
/etc/fstab          ファイルシステム記述ファイル
/etc/mtab           マウントされたファイルシステムの記述ファイル
.fi
.SH 準拠
リエントラントでない関数は SunOS 4.1.3 由来のものである。 \fBgetmntent_r\fP()  関数は HPUX 10
で導入されたが、このバージョンでは int を返す。 上記に示したプロトタイプは glibc 独自のものである。
.SH 注意
System V にも \fBgetmntent\fP()  関数はあるが、 呼び出し手順が異なり、返される構造体も異なる。 System V では
\fI/etc/mnttab\fP が用いられる。 4.4BSD と Digital UNIX には \fBgetmntinfo\fP()  があるが、
システムコール \fBgetfsstat\fP()  のラッパー関数である。
.SH 関連項目
\fBfopen\fP(3), \fBfstab\fP(5), \fBmount\fP(8)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.41 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
