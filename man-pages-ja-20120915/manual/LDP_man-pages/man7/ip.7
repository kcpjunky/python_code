.\" t
.\" Don't change the line above. it tells man that tbl is needed.
.\" This man page is Copyright (C) 1999 Andi Kleen <ak@muc.de>.
.\" Permission is granted to distribute possibly modified copies
.\" of this page provided the header is included verbatim,
.\" and in case of nontrivial modification author and date
.\" of the modification is added to the header.
.\" $Id: ip.7,v 1.19 2000/12/20 18:10:31 ak Exp $
.\"
.\" FIXME: Document IP_MINTTL, added in Linux 2.6.34
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH IP 7 2011\-09\-22 Linux "Linux Programmer's Manual"
.SH 名前
ip \- Linux IPv4 プロトコルの実装
.SH 書式
\fB#include <sys/socket.h>\fP
.br
.\" .B #include <net/netinet.h> -- does not exist anymore
.\" .B #include <linux/errqueue.h> -- never include <linux/foo.h>
\fB#include <netinet/in.h>\fP
.br
\fB#include <netinet/ip.h> \fP/* 上記のスーパーセット */
.sp
\fItcp_socket\fP\fB = socket(AF_INET, SOCK_STREAM, 0);\fP
.br
\fIudp_socket\fP\fB = socket(AF_INET, SOCK_DGRAM, 0);\fP
.br
\fIraw_socket\fP\fB = socket(AF_INET, SOCK_RAW, \fP\fIprotocol\fP\fB);\fP
.SH 説明
.\" FIXME has someone verified that 2.1 is really 1812 compliant?
Linux は RFC\ 791 と RFC\ 1122 で記述されている Internet Protocol, version 4 を実装している。
\fBip\fP には RFC\ 1112 に準拠した level 2 マルチキャストの実装が含まれている。 またパケットフィルタ機能を含む IP
ルーターも実装されている。
.PP
プログラミング・インターフェースは BSD ソケットと互換である。 ソケットに関するより詳細な情報は \fBsocket\fP(7)  を参照のこと。
.PP
IP ソケットは、 \fBsocket\fP(2) 関数を \fBsocket(AF_INET, \fP\fIsocket_type\fP\fB, \fP
\fIprotocol\fP\fB)\fP のように呼び出すことで生成される。指定できるソケットタイプは
3 つあり、 \fBtcp\fP(7) ソケットをオープンする場合 \fBSOCK_STREAM\fP、 \fBudp\fP(7)
ソケットをオープンする場合 \fBSOCK_DGRAM\fP、 IP プロトコルに直接アクセスする
ために \fBraw\fP(7) ソケットをオープンする場合には \fBSOCK_RAW\fP である。
\fIprotocol\fP は送受信される IP ヘッダに書かれる IP プロトコルである。
指定できる値は、 TCP ソケットには 0 か \fBIPPROTO_TCP\fP、 UDP ソケットには
0 か \fBIPPROTO_UDP\fP に限られる。 \fBSOCK_RAW\fP に対しては、 RFC\ 1700 で定義
されている有効な IANA IP プロトコルを、 割り当てられている番号で指定する
ことができる。
.PP
.\" FIXME ip current does an autobind in listen, but I'm not sure
.\" if that should be documented.
あるプロセスで、やってくるパケットを受信したり 接続要求を受けたりしたい場合には、 そのプロセスはローカルなインターフェースアドレスに、
\fBbind\fP(2)  を用いてソケットをバインドしなければならない。 あるローカルな「アドレスとポート」のペアに対してバインドできる IP
ソケットは一つに限られる。 \fBbind\fP(2)  の呼び出しで \fBINADDR_ANY\fP
が指定されていた場合は、ソケットはローカルなインターフェースの \fIすべて\fPにバインドされる。 \fBlisten\fP(2)  または
\fBconnect\fP(2)  がバインドされていないソケットでコールされると、 そのソケットは自動的にローカルなアドレスを \fBINADDR_ANY\fP
にセットし、空いているポートをランダムに選んでバインドする。

\fBSO_REUSEADDR\fP フラグがセットされていない場合には、 バインドされていた TCP ローカルソケットアドレスは
クローズされた後しばらくの間使えなくなる。 \fBSO_REUSEADDR\fP フラグを使うと TCP の信頼性を低下させるので、
使うときには注意が必要である。
.SS アドレスのフォーマット
IP ソケットアドレスは、 IP インターフェースアドレスと 16ビットのポート番号の組み合わせで定義される。 IP
プロトコルそのものはポート番号を扱わない。 ポート番号は、 \fBudp\fP(7)  や \fBtcp\fP(7)  といった、上位のプロトコルで実装される。
raw ソケットでは、 \fIsin_port\fP が IP プロトコルにセットされる。
.PP
.in +4n
.nf
struct sockaddr_in {
    sa_family_t    sin_family; /* address family: AF_INET */
    in_port_t      sin_port;   /* port in network byte order */
    struct in_addr sin_addr;   /* internet address */
};

/* Internet address. */
struct in_addr {
    uint32_t       s_addr;     /* address in network byte order */
};
.fi
.in
.PP
\fIsin_familiy\fP には常に \fBAF_INET\fP をセットする。これは必須である。 Linux 2.2 では、このセットを忘れると
ほとんどのネットワーク関数は \fBEINVAL\fP を返すようになっている。 \fIsin_port\fP
にはポート番号をネットワークバイトオーダーで指定する。 1024 未満のポート番号は \fI特権ポート (privileged ports)\fP と呼ばれる
(\fI予約ポート (reserved ports)\fP とも時々呼ばれる)。 特権プロセス (\fBCAP_NET_BIND_SERVICE\fP
ケーパビリティを持つプロセス) 以外のプロセスは、これらのポートには \fBbind\fP(2)  できない。 IPv4
プロトコルそのものにはポートに関する概念がない。 ポートは、 \fBtcp\fP(7)  や \fBudp\fP(7)
といった、上位のプロトコルにおいて実装される。
.PP
\fIsin_addr\fP は IP ホストアドレスである。 \fIstruct in_addr\fP の \fIs_addr\fP
メンバには、ホストのインターフェースアドレスを ネットワークバイトオーダーで
指定する。 \fIin_addr\fP は、\fBINADDR_*\fP の一つ (例えば \fBINADDR_ANY\fP) を代入する、
ライブラリ関数 \fBinet_aton\fP(3), \fBinet_addr\fP(3), \fBinet_makeaddr\fP(3) を用いる、
あるいは名前解決機構 (name resolver) を直接用いる、のどれかで設定すべきである。
(\fBgethostbyname\fP(3) を見よ)。

.\" Leave a loophole for XTP @)
IPv4 アドレスには、ユニキャストアドレス、 ブロードキャストアドレス、マルチキャストアドレスがある。
ユニキャストアドレスは、あるホストの一つのアドレスを指定する。 ブロードキャストアドレスは、あるネットワーク上の全てのホストを指定する。
マルチキャストアドレスは、マルチキャストグループに所属する 全てのホストを指定する。ブロードキャストアドレスへのデータグラムは、
\fBSO_BROADCAST\fP ソケットフラグがセットされていないと送信・受信できない。
現在の実装では、接続指向のソケットにはユニキャストアドレスしか使えない。

アドレスとポートは常にネットワークバイトオーダーで格納されることに注意せよ。 具体的には、ポートを指定する数値には \fBhtons\fP(3)
を呼び出す必要がある。 標準ライブラリにあるアドレス/ポート操作関数は すべてネットワークバイトオーダーで動作する。

特別なアドレスがいくつか存在する: \fBINADDR_LOOPBACK\fP(127.0.0.1)  は loopback
デバイスを通して常にローカルなホストを参照する。 \fBINADDR_ANY\fP(0.0.0.0)  は任意のアドレスを意味し、バインド用である。
\fBINADDR_BROADCAST\fP(255.255.255.255)  は任意のホストを意味し、歴史的理由から、バインドの際には
\fBINADDR_ANY\fP と同じ効果になる。
.SS ソケットオプション
.\" or SOL_IP on Linux
IP にはプロトコル固有のソケットオプションがいくつか存在し、 \fBsetsockopt\fP(2)  で設定が、 \fBgetsockopt\fP(2)
で取得ができる。 IP のソケットオプションレベルは \fBIPPROTO_IP\fP である。 ブール整数値のフラグでは、 0
は偽、それ以外は真を意味する。
.TP 
\fBIP_ADD_MEMBERSHIP\fP (Linux 1.2 以降)
マルチキャストグループに参加する。 引き数は \fIip_mreqn\fP 構造体である。
.sp
.in +4n
.nf
struct ip_mreqn {
    struct in_addr imr_multiaddr; /* IP multicast group
                                     address */
    struct in_addr imr_address;   /* IP address of local
                                     interface */
    int            imr_ifindex;   /* interface index */
};
.fi
.in
.sp
.\" (i.e., within the 224.0.0.0-239.255.255.255 range)
\fIimr_multiaddr\fP には、アプリケーションが参加または撤退したい マルチキャストグループのアドレスが入る。
指定するアドレスは有効なマルチキャストアドレスでなければならない (さもなければ \fBsetsockopt\fP(2)  がエラー \fBEINVAL\fP
で失敗する)。 \fIimr_address\fP はシステムがマルチキャストグループに参加する際に用いる ローカルなインターフェースのアドレスである。
これが \fBINADDR_ANY\fP であった場合には、適切なインターフェースがシステムによって選択される。 \fIimr_ifindex\fP は
\fIimr_multiaddr\fP グループに参加/撤退するインターフェースの interface index である。
どのインターフェースでもよい場合は 0 にする。
.IP
.\"
\fIip_mreqn\fP 構造体は Linux 2.2 以降でのみ利用可能である。互換性のため、
古い \fIip_mreq\fP 構造体 (Linux 1.2 以降で存在する) もまだサポートされている。
\fIip_mreqn\fP との違いは、 \fIimr_ifindex\fP フィールドを含まないことだけである。
\fBsetsockopt\fP(2) でのみ使える。
.TP 
\fBIP_DROP_MEMBERSHIP\fP (Linux 1.2 以降)
マルチキャストグループから抜ける。引き数は \fBIP_ADD_MEMBERSHIP\fP と同様に \fIip_mreqn\fP または \fIip_mreq\fP
構造体である。
.TP 
\fBIP_FREEBIND\fP (Linux 2.4 以降)
.\" Precisely: 2.4.0-test10
このブール値のオプションを有効にすると、ローカルではない IP アドレスや存在
しない IP アドレスをバインドできるようになる。これを使うと、対応するネット
ワークインターフェイスがなかったり、アプリケーションがソケットをバインドしようと
する時点で特定の動的 IP アドレスが有効になっていなかったりしても、ソケットを
接続待ち状態 (listening) にできるようになる。
このオプションは、下記に説明がある \fIip_nonlocal_bind\fP \fI/proc\fP インターフェイス
のソケット単位の設定である。
.TP 
\fBIP_HDRINCL\fP (Linux 2.0 以降)
.\"
.\" FIXME Document IP_IPSEC_POLICY
.\" Since Linux 2.5.47
.\" Needs CAP_NET_ADMIN
有効になっていると、ユーザは IP ヘッダをユーザーデータの前に与える。 \fBSOCK_RAW\fP ソケットでのみ有効である。詳細は \fBraw\fP(7)
を見よ。このフラグが有効になっていると、 \fBIP_OPTIONS\fP, \fBIP_TTL\fP, \fBIP_TOS\fP は無視される。
.TP 
\fBIP_MTU\fP (Linux 2.2 以降)
.\" Precisely: 2.1.124
ソケットの、既知の path MTU を取得する。 ソケットが接続している場合のみ有効である。 \fBgetsockopt\fP(2)  でのみ使える。
.TP 
\fBIP_MTU_DISCOVER\fP (Linux 2.2 以降)
.\" Precisely: 2.1.124
ソケットの Path MTU Discovery の設定をセット・取得する。
有効になっていると、Linux は \fBSOCK_STREAM\fP ソケットに対して
RFC\ 1191 で定義されている Path MTU Discovery を行う。
\fBSOCK_STREAM\fP でないソケットについては、 \fBIP_PMTUDISC_DO\fP をセットすると、
全ての送信パケットでフラグメント不許可フラグ (don't\-fragment flag) が必ず
セットされるようになる。 \fBSOCK_STREAM\fP でないソケットでは、
パケットを MTU のサイズの塊に分割したり、必要に応じて再送したりするのは、
ユーザが責任を持って行う必要がある。
既知の Path MTU よりも大きなデータグラムの送信が要求されると、
カーネルは (\fBEMSGSIZE\fP で) 送信を拒否する。
\fBIP_PMTUDISC_WANT\fP の場合は、 Path MTU に基づいて必要であればデータグラム
の分割が行われ、それ以外の場合はフラグメント不許可フラグがセットされる。

システム全体のデフォルトは \fBIP_PMTUDISC_WANT\fP と \fBIP_PMTUDISC_DONT\fP の
どちらかに設定することができる。設定の変更は、
\fI/proc/sys/net/ipv4/ip_no_pmtu_disc\fP ファイルに、0 (\fBIP_PMTUDISC_WANT\fP) か
0 以外 (\fBIP_PMTUDISC_DONT\fP) を書き込むことで行う。

.TS
tab(:);
c l
l l.
Path MTU discovery 値:意味
IP_PMTUDISC_WANT:ルートごとの設定を用いる。
IP_PMTUDISC_DONT:Path MTU Discovery を行わない。
IP_PMTUDISC_DO:常に Path MTU Discovery を行う。
IP_PMTUDISC_PROBE:DFビットをセットするが、Path MTU を無視する。
.TE

path MTU discovery が有効になっていると、カーネルは宛先ホストごとに 自動的に
path MTU を処理する。特定の相手に \fBconnect\fP(2) で接続した場合には、
\fBIP_MTU\fP ソケットオプションを用いれば、既知の path MTU の取得に便利である
(たとえば \fBEMSGSIZE\fP エラーが起きた後など)。 path MTU は時間とともに変化する
かもしれない。 宛先がたくさんあるコネクションレスなソケットでは、 与えられた
宛先に対する新しい MTU にも、 エラーキューを用いてアクセスすることができる
(\fBIP_RECVERR\fP を見よ)。 MTU 更新が到着するごとに、新たなエラーがキューイング
される。

MTU discovery の進行中には、データグラムソケットからの初期パケットは 到着しないかもしれない。 UDP を用いるアプリケーションでは、
このことを気にかけておき、 パケットの再送アルゴリズムにこの分を除外させるべきである。

.\" FIXME this is an ugly hack
接続していないソケットに対して path MTU discovery プロセスを立ち上げるには、 大きなデータグラムサイズ (最大 64K
ヘッダバイト長) からはじめて、 path MTU が更新されるまでサイズを縮めていくことも可能である。

path MTU の値をまず見積もってみるには、宛先アドレスに \fBconnect\fP(2)  を使ってデータグラムソケットを接続し、
\fBgetsockopt\fP(2)  を \fBIP_MTU\fP オプションとともに呼び、 MTU を取得することである。

\fBIP_PMTUDISC_PROBE\fP (Linux 2.6.22 以降で利用可能) を設定することで、 \fBSOCK_DGRAM\fP や
\fBSOCK_RAW\fP のソケットで RFC 4821 の MTU 探索を実装することが可能である。 また、この機能は、 \fBtracepath\fP(8)
のような診断ツールで特に有用である。これらのツールでは、 観測された Path MTU よりも大きな探索パケットを意図的に 送信しようとする。
.TP 
\fBIP_MULTICAST_IF\fP (Linux 1.2 以降)
ローカルデバイスをマルチキャストソケットとして設定する。引き数は \fBIP_ADD_MEMBERSHIP\fP と同様に \fIip_mreqn\fP または
\fIip_mreq\fP 構造体である。
.IP
不正なソケットオプションが渡されると、 \fBENOPROTOOPT\fP が返される。
.TP 
\fBIP_MULTICAST_LOOP\fP (Linux 1.2 以降)
マルチキャストパケットをローカルなソケットにループバックするかどうかを 定めるブール値の整数引き数を設定・取得する。
.TP 
\fBIP_MULTICAST_TTL\fP (Linux 1.2 以降)
このソケットから発信されるマルチキャストパケットの time\-to\-live 値を設定・取得する。 マルチキャストパケットに対しては、できるだけ小さな
TTL に設定することがとても重要である。デフォルトは 1 で、 ユーザープログラムが明示的に要求しない限り
マルチキャストパケットはローカルなネットワークから出ないことになる。 引き数に整数を取る。
.TP 
\fBIP_NODEFRAG\fP (Linux 2.6.36 以降)
有効 (引き数が 0 以外の場合) になっていると、netfilter 層での出力パケットの
再構築 (reassembly) が行われなくなる。このオプションは \fBSOCK_RAW\fP ソケット
においてのみ有効である。引き数は整数である。
.TP 
\fBIP_OPTIONS\fP (Linux 2.0 以降)
.\" Precisely: 1.3.30
.\" FIXME Document IP_PASSSEC
.\" Boolean
.\" Since Linux 2.6.17
.\" commit 2c7946a7bf45ae86736ab3b43d0085e43947945c
.\" Author: Catherine Zhang <cxzhang@watson.ibm.com>
このソケットから送られるパケット全てに付随する IP オプションを 設定・取得する。オプションを保存しているメモリバッファへのポインタと
オプションの長さとを引き数に取る。 \fBsetsockopt\fP(2)  を呼び出すと、ソケットに関連づけられる IP オプションを設定できる。 IPv4
におけるオプションのサイズの最大値は 40 バイトである。 用いることのできるオプションについては RFC\ 791 を見よ。
\fBSOCK_STREAM\fP ソケットに対する初期接続要求パケットに IP オプションが含まれていると、
ルーティングヘッダを付けて戻されてくる初期パケットの IP オプションに同じオプションがセットされる。接続が確立された後、
やってきたパケットのオプションを変更することはできない。 デフォルトでは。外部から受信したパケットの全ての source routing オプション
の処理は無効となっており、 \fI/proc\fP インタフェースの \fIaccept_source_route\fP
を使うとこれを有効にできる。これを無効にしていても timestamps など の他のオプションの処理は行われる。データグラムソケットでは、 IP
オプションはローカルユーザーしか設定できない。 \fBgetsockopt\fP(2)  を \fBIP_OPTIONS\fP
をつけて呼ぶと、現在送信に用いられている IP オプションを 引き数に与えたバッファに取得できる。
.TP 
\fBIP_PKTINFO\fP (Linux 2.2 以降)
.\" Precisely: 2.1.68
\fBIP_PKTINFO\fP 補助メッセージを渡す。これには到着パケットに関する情報を提供する \fIpktinfo\fP 構造体が含まれている。
データグラム指向のソケットでしか動作しない。 引き数は \fBIP_PKTINFO\fP メッセージを通過させるかどうかをソケットに知らせるフラグである。
メッセージ自身は \fBrecvmsg\fP(2)  または \fBsendmsg\fP(2)  を用いたパケットの制御メッセージとしてのみ送受信できる。
.IP
.in +4n
.nf
struct in_pktinfo {
    unsigned int   ipi_ifindex;  /* Interface index */
    struct in_addr ipi_spec_dst; /* Local address */
    struct in_addr ipi_addr;     /* Header Destination
                                    address */
};
.fi
.in
.IP
.\" FIXME elaborate on that.
.\" This field is grossly misnamed
\fIipi_ifindex\fP はパケットが受信されたインターフェースの、他と重ならないインデックスである。 \fIipi_spec_dst\fP
はパケットのローカルアドレスである。 \fIipi_addr\fP はパケットヘッダにある宛先アドレスである。 \fBIP_PKTINFO\fP が
\fBsendmsg\fP(2)  に渡されて、かつ \fIipi_spec_dst\fP が 0 以外の場合、 \fIipi_spec_dst\fP
はルーティングテーブルを検索する際にローカルな送信元アドレスとして使用され、 IP source route オプションを設定するのにも使用される。
\fIipi_ifindex\fP が 0 以外の場合、このインデックスによって指定されるインターフェースの プライマリローカルアドレスで
\fIipi_spec_dst\fP を上書きし、ルーティングテーブルを検索する。
.TP 
\fBIP_RECVERR\fP (Linux 2.2 以降)
.\" Precisely: 2.1.15
.\" or SOL_IP on Linux
エラーメッセージの受け渡しに、信頼性の高い拡張された方法を有効にする。 データグラムソケットに対して有効になっていると、
発生したエラーは全てソケットごとのエラーキューに保存される。 ユーザーはソケット操作からエラーを受け取ったとき、 \fBrecvmsg\fP(2)  を
\fBMSG_ERRQUEUE\fP フラグとともに呼べばそのエラーを取得できる。 そのエラーを記述する \fIsock_extended_err\fP
構造体が、タイプ \fBIP_RECVERR\fP・ レベル \fBIPPROTO_IP\fP の補助メッセージとして渡される。
これは接続志向でないソケットで信頼性の高いエラー処理を行いたい場合に 有用である。エラーキューの受信データフラグメントには エラーパケットが含まれる。
.IP
\fBIP_RECVERR\fP 制御メッセージには \fIsock_extended_err\fP 構造体が含まれる:
.IP
.in +4n
.ne 18
.nf
#define SO_EE_ORIGIN_NONE    0
#define SO_EE_ORIGIN_LOCAL   1
#define SO_EE_ORIGIN_ICMP    2
#define SO_EE_ORIGIN_ICMP6   3

struct sock_extended_err {
    uint32_t ee_errno;   /* error number */
    uint8_t  ee_origin;  /* where the error originated */
    uint8_t  ee_type;    /* type */
    uint8_t  ee_code;    /* code */
    uint8_t  ee_pad;
    uint32_t ee_info;    /* additional information */
    uint32_t ee_data;    /* other data */
    /* More data may follow */
};

struct sockaddr *SO_EE_OFFENDER(struct sock_extended_err *);
.fi
.in
.IP
\fIee_errno\fP にはキューに入っているエラーの \fIerrno\fP 番号が入る。 \fIee_origin\fP
にはエラーが発生した場所を示すコードが入る。 その他のフィールドはプロトコル依存である。 \fBSO_EE_OFFENDER\fP
マクロは与えられた補助メッセージへのポインタから エラーの発生したネットワークオブジェクトのアドレスへのポインタを返す。 アドレスが不明な場合、
\fIsockaddr\fP 構造体の \fIsa_family\fP フィールドは \fBAF_UNSPEC\fP となり、その他のフィールド値は不定である。
.IP
.\" FIXME . Is it a good idea to document that? It is a dubious feature.
.\" On
.\" .B SOCK_STREAM
.\" sockets,
.\" .B IP_RECVERR
.\" has slightly different semantics. Instead of
.\" saving the errors for the next timeout, it passes all incoming
.\" errors immediately to the user.
.\" This might be useful for very short-lived TCP connections which
.\" need fast error handling. Use this option with care:
.\" it makes TCP unreliable
.\" by not allowing it to recover properly from routing
.\" shifts and other normal
.\" conditions and breaks the protocol specification.
IP は以下のような \fIsock_extended_err\fP 構造体を用いる: \fIee_origin\fP は、エラー
が ICMP パケットとして受信された場合には \fBSO_EE_ORIGIN_ICMP\fP にセットされ、
ローカルで起こった場合には \fBSO_EE_ORIGIN_LOCAL\fP にセットされる。 不明な値は
無視される。 \fIee_type\fP と \fIee_code\fP は ICMP ヘッダの type フィールドと
code フィールドの値にセットされる。 \fIee_info\fP には \fBEMSGSIZE\fP エラーに対す
る discover された MTU が入る。 メッセージにはエラーを引き起こしたノードの
\fIsockaddr_in\fP 構造体も含まれる。 これには \fBSO_EE_OFFENDER\fP マクロを使ってア
クセスできる。 ソースが不明の場合、 \fBSO_EE_OFFENDER\fP アドレスの
\fIsin_family\fP フィールドは \fBAF_UNSPEC\fP となる。 エラーがネットワークで起きた
場合には、 ソケットで有効になっていたすべての IP オプション (\fBIP_OPTIONS\fP,
\fBIP_TTL\fP など) とエラーパケットに含まれていたすべての IP オプションとが、 制
御メッセージとして渡される。 エラーを起こしたパケットのペイロード (payload)
は 普通のペイロードとして返される。 TCP にはエラーキューがないことに注意して
ほしい。 \fBMSG_ERRQUEUE\fP は \fBSOCK_STREAM\fP ソケットに対しては使えない。 TCP
では \fBIP_RECVERR\fP だけが有効だが、ソケット関数から返されるエラーは
\fBSO_ERROR\fP だけになる。
.IP
raw ソケットに対して \fBIP_RECVERR\fP を指定すると、受信したすべての ICMP エラーをアプリケーションに
渡すようになる。指定しないと、 接続済みのソケットに対するエラーだけを報告する。
.IP
このオプションはブール値のフラグを設定・取得する。 \fBIP_RECVERR\fP はデフォルトではオフになっている。
.TP 
\fBIP_RECVOPTS\fP (Linux 2.2 以降)
.\" Precisely: 2.1.15
到着した全ての IP オプションを \fBIP_OPTION\fP コントロールメッセージに入れてユーザーに渡す。
ルーティングヘッダとその他のオプションとは、 ローカルホストに対してはあらかじめ記入されている。 \fBSOCK_STREAM\fP
ソケットではサポートされていない。
.TP 
\fBIP_RECVORIGDSTADDR\fP (Linux 2.6.29 以降)
.\" commit e8b2dfe9b4501ed0047459b2756ba26e5a940a69
このブール値のオプションがセットされると、
\fBrecvmsg\fP(2) で \fBIP_ORIGDSTADDR\fP 補助メッセージが有効になる。
カーネルはデータグラムを受信した元の宛先アドレスをこの補助メッセージで返す。
この補助メッセージには \fIstruct sockaddr_in\fP が格納される。
.TP 
\fBIP_RECVTOS\fP (Linux 2.2 以降)
.\" Precisely: 2.1.68
有効になっていると、 \fBIP_TOS\fP 補助メッセージが到着パケットとともに渡される。 これにはパケットヘッダの Service/Precedence
フィールドのタイプを指定するバイトデータが含まれている。 ブール整数値のフラグをとる。
.TP 
\fBIP_RECVTTL\fP (Linux 2.2 以降)
.\" Precisely: 2.1.68
このフラグがセットされていると、 \fBIP_TTL\fP コントロールメッセージが受信パケットの time\-to\-live
フィールドのバイトデータとともに渡される。 \fBSOCK_STREAM\fP ソケットではサポートされていない。
.TP 
\fBIP_RETOPTS\fP
.\" Precisely: 2.1.15
\fBIP_RETOPTS\fP (Linux 2.2 以降)  \fBIP_RECVOPTS\fP と等価だが、未処理の生のオプションを、 この hop
では記入されない timestamp レコードと route レコードとともに返す。
.TP 
\fBIP_ROUTER_ALERT\fP (Linux 2.2 以降)
.\" Precisely: 2.1.68
フォワードすべきパケットを IP Router Alert オプションをつけて このソケットに渡す。 raw
ソケットに対してのみ有効である。これはたとえばユーザー空間の RSVP デーモンに対して便利である。タップされたパケットは
カーネルによってはフォワードされないので、これらを再送するのは ユーザーの責任となる。ソケットのバインドは無視され、
このようなパケットはプロトコルによってのみフィルタリングされる。 整数値のフラグを取る。
.TP 
\fBIP_TOS\fP (Linux 1.0 以降)
.\" FIXME elaborate on this
.\" Needs CAP_NET_ADMIN
.\" Boolean
.\" Since Linux 2.6.27
.\" Author: KOVACS Krisztian <hidden@sch.bme.hu>
.\" http://lwn.net/Articles/252545/
このソケットから送信されるすべての IP パケットに適用される Type\-Of\-Service (TOS) フィールドを設定・取得する。
これはネットワーク上でのパケットの優先度を決めるために用いられる。 TOS はバイトデータである。標準の TOS フラグがいくつか定義されている。
\fBIPTOS_LOWDELAY\fP はインタラクティブなトラフィックの遅延を最小にする。 \fBIPTOS_THROUGHPUT\fP
はスループットを最大にする。 \fBIPTOS_RELIABILITY\fP は信頼性を最高にする。 \fBIPTOS_MINCOST\fP
は転送速度が遅くてもかまわないとき、「データを詰め込む」のに用いられる。 これらのうち、 1 つまでだけを設定できる。
他のビットは無効で、クリアされる。 Linux はデフォルトでは \fBIPTOS_LOWDELAY\fP データグラムを最初に送信する。
しかし、正確な振る舞いはキュー処理の設定に依存する。 高い優先度にするにはスーパーユーザー権限 (\fBCAP_NET_ADMIN\fP ケーパビリティ)
が必要となるかもしれない。 優先度は (\fBSOL_SOCKET\fP, \fBSO_PRIORITY\fP)  ソケットオプションを用いれば、
プロトコルに依存しない形でも設定できる (\fBsocket\fP(7)  を見よ)。
.TP 
\fBIP_TRANSPARENT\fP (Linux 2.6.24 以降)
.\" commit f5715aea4564f233767ea1d944b2637a5fd7cd2e
.\"     This patch introduces the IP_TRANSPARENT socket option: enabling that
.\"     will make the IPv4 routing omit the non-local source address check on
.\"     output. Setting IP_TRANSPARENT requires NET_ADMIN capability.
.\" http://lwn.net/Articles/252545/
このブール値のオプションを有効にすると、
このソケットで透過プロキシ (transparent proxy) ができるようになる。
このソケットオプションを使うと、呼び出したアプリケーションは、
ローカルではない IP アドレスをバインドして、ローカルの端点として自分以外の
アドレス (foreign address) を持つクライアントやサーバの両方として
動作できるようになる。
\fB注意\fP: この機能が動作するためには、自分以外のアドレス宛のパケットが
透過プロキシが動作するマシン (TProxy box) 経由で転送されるように、
ルーティングが設定される必要がある。
このソケットオプションを有効にするには、スーパーユーザ特権
(\fBCAP_NET_ADMIN\fP ケーパビリティ) が必要である。
.IP
iptables の TPROXY ターゲットで透過プロキシリダイレクション
(TProxy redirection) を行うには、リダイレクトされるソケットに対して
このオプションを設定する必要がある。
.TP 
\fBIP_TTL\fP (Linux 1.0 以降)
.\" FIXME Document IP_XFRM_POLICY
.\" Since Linux 2.5.48
.\" Needs CAP_NET_ADMIN
time\-to\-live フィールドの値を設定または取得する。 この値はこのソケットから送信されるすべてのパケットに用いられる。
.SS "/proc インタフェース"
.\" FIXME As at 2.6.12, 14 Jun 2005, the following are undocumented:
.\"	ip_queue_maxlen
.\"	ip_conntrack_max
.\"
IP プロトコルでは、いくつかのグローバルパラメータを設定するための \fI/proc\fP ファイル群が用意されている。 これらのパラメータには、
\fI/proc/sys/net/ipv4/\fP ディレクトリ内のファイルの読み書きでアクセスできる。 \fIBoolean\fP
と書かれたインタフェースは整数値をとり、 0 以外の値 ("true") は対応するオプションが有効、 0 値 ("false")
は無効、であることを意味する。
.TP 
\fIip_always_defrag\fP (Boolean; Linux 2.2.13 以降)
[2.2.13 で新規登場。以前のバージョンのカーネルでは、この機能は コンパイル時に \fBCONFIG_IP_ALWAYS_DEFRAG\fP
オプションによって制御されていた; このファイルは 2.4.x 以降では存在しない]

このブール値のフラグが有効になっている (0 以外になっている) と、 到着したフラグメント (IP パケットの一部で、
発信元と発信先の間のどこかのホストで、そのパケットが 大きすぎると判断され、分割された場合に生じる)  は、たとえフォワードされる場合であっても
処理前に再構築 (デフラグメント) される。

ファイアウォールがローカル側のネットワークに唯一のリンクを持っている 場合や、透過プロクシの場合に限って有効にすべきである。
通常のルーターやホストでは決して使用することのないように。 さもないとフラグメントが別のリンクを経由して伝わる場合に、
通信のフラグメント化ができなくなってしまう。 またフラグメント再構築処理はメモリと CPU 時間のコストが非常に大きい。

.\"
これはマスカレードや透過プロクシが設定されると、 不思議な仕組みによって自動的に有効になる。
.TP 
\fIip_autoconfig\fP (Linux 2.2 以降 2.6.17 まで)
.\" Precisely: since 2.1.68
.\" FIXME document ip_autoconfig
.\"
まだ記述していない。
.TP 
\fIip_default_ttl\fP (integer; default: 64; Linux 2.2 以降)
.\" Precisely: 2.1.15
.\"
送出されるパケットの time\-to\-live 値のデフォルトをセットする。 これは \fBIP_TTL\fP
オプションを用いれば、パケットごとに変えることもできる。
.TP 
\fIip_dynaddr\fP (Boolean; default: disabled; Linux 2.0.31 以降)
.\"
動的ソケットアドレスと、インターフェースアドレスが変更された際の マスカレードエントリの再書き込みを有効にする。 ダイアルアップインターフェースで、
IP アドレスが変更される場合に便利である。
.TP 
\fIip_forward\fP (Boolean; default: disabled; Linux 1.2 以降)
.\"
IP forwarding を有効にするかどうかのブール値フラグ。 IP forwarding するかどうかはインターフェースごとにも設定できる。
.TP 
\fIip_local_port_range\fP (Linux 2.2 以降)
.\" Precisely: since 2.1.68
.\"
ソケットに割り当てられているデフォルトのローカルポートの範囲を定める 二つの整数を与える。割り当ては 1 番目の番号から始まり、 2
番目の番号で終わる。 これらはマスカレードで用いられているポートと重なってはならない (その場合も取り扱われるが)。
ファイアウォールのパケットフィルターが「利用中のローカルポート」 について何らかの仮定をしている場合には、
番号を勝手に決めてしまうと問題が起きるかもしれない。 1 番目の番号は少なくとも 1024 より大きくすべきである。
良く使われるポートとの衝突を避けたり、ファイアウォールの問題を 回避したければ、 4096 よりも大きくするほうが良いだろう。
.TP 
\fIip_no_pmtu_disc\fP (Boolean; default: disabled; Linux 2.2 以降)
.\" Precisely: 2.1.15
.\"
.\" The following is from 2.6.12: Documentation/networking/ip-sysctl.txt
有効になっていると、デフォルトで TCP ソケットに対する Path MTU Discoverty を行わない。 Path MTU Discovery
は、 正しく設定されていない (ICMP パケットを全てドロップする) ファイアウォールや、 (point\-to\-point リンクで双方の MTU
が一致していない場合など)  正しく設定されていないインターフェースが経路上に存在すると失敗してしまう。 Path MTU Discovery
をグローバルに無効にするよりは、 壊れているルータを直すほうが良い。 Path MTU Discovery を無効にするとネットワークのコストが
大きくなってしまうからである。
.TP 
\fIip_nonlocal_bind\fP (Boolean; default: disabled; Linux 2.4 以降)
.\" Precisely: patch-2.4.0-test10
.\"
.\" The following is from 2.6.12: Documentation/networking/ip-sysctl.txt
セットされていれば、プロセスが自分以外の IP アドレスを \fBbind\fP(2)
できるようになる。これはかなり便利だが、うまく動かないアプリケーションもある。
.TP 
\fIip6frag_time\fP (integer; default: 30)
.\"
.\" The following is from 2.6.12: Documentation/networking/ip-sysctl.txt
IPv6 フラグメントをメモリに保持しておく時間 (秒単位)。
.TP 
\fIip6frag_secret_interval\fP (integer; default: 600)
IPv6 フラグメントの hash secret の生成間隔 (hash secret の寿命)  (秒単位)。
.TP 
\fIipfrag_high_thresh\fP (integer), \fIipfrag_low_thresh\fP (integer)
キューイングされている IP フラグメントの量が \fIipfrag_high_thresh\fP に達すると、キューの内容は
\fIipfrag_low_thresh\fP にまで切り捨てられる。それぞれの大きさを バイト単位で表す整数値が入っている。
.TP 
\fIneigh/*\fP
.\" FIXME Document the conf/*/* interfaces
.\" FIXME Document the route/* interfaces
.\" FIXME document them all
\fBarp\fP(7)  を見よ。
.SS ioctl
.\" 2006-04-02, mtk
.\" commented out the following because ipchains is obsolete
.\" .PP
.\" The ioctls to configure firewalling are documented in
.\" .BR ipfw (4)
.\" from the
.\" .B ipchains
.\" package.
\fBsocket\fP(7)  に記述されている ioctl は、すべて \fBip\fP にも適用される。
.PP
.\" FIXME Add a discussion of multicasting
ジェネリックデバイスのパラメータを設定する ioctl については \fBnetdevice\fP(7)  に記述されている。
.SH エラー
.\" FIXME document all errors.
.\"     We should really fix the kernels to give more uniform
.\"     error returns (ENOMEM vs ENOBUFS, EPERM vs EACCES etc.)
.TP 
\fBEACCES\fP
必要な権限のないユーザーが操作を実行しようとした。 以下のような場合が考えられる: \fBSO_BROADCAST\fP
フラグを設定していない状態でブロードキャストアドレスに パケットを送ろうとした。 \fIprohibit\fP なルートを通してパケットを送ろうとした。
スーパーユーザー権限 (\fBCAP_NET_ADMIN\fP ケーパビリティ) なしでファイアウォールの設定を変更しようとした。 スーパーユーザー権限
(\fBCAP_NET_BIND_SERVICE\fP ケーパビリティ) なしで特権ポートにバインドしようとした。
.TP 
\fBEADDRINUSE\fP
既に使用されているアドレスにバインドしようとした。
.TP 
\fBEADDRNOTAVAIL\fP
存在しないインターフェースが要求された。または 要求されたソースアドレスがローカルでない。
.TP 
\fBEAGAIN\fP
非ブロッキングソケットに対してブロックする操作を行った。
.TP 
\fBEALREADY\fP
非ブロッキングソケットに対する接続操作が既に実行中である。
.TP 
\fBECONNABORTED\fP
\fBaccept\fP(2)  の途中で接続がクローズされた。
.TP 
\fBEHOSTUNREACH\fP
宛先アドレスにマッチする有効なエントリがルーティングテーブルに 存在しない。このエラーはリモートルータからの、 あるいはローカルルーティングテーブルへの
ICMP メッセージによって引き起こされることがある。
.TP 
\fBEINVAL\fP
不正な引き数が渡された。送信操作において、 \fIblackhole\fP ルートに送信しようとするとこのエラーが起こることがある。
.TP 
\fBEISCONN\fP
接続済みのソケットに対して \fBconnect\fP(2)  が呼ばれた。
.TP 
\fBEMSGSIZE\fP
データグラムが path MTU よりも大きく、フラグメント化もできない。
.TP 
\fBENOBUFS\fP, \fBENOMEM\fP
空きメモリが足りない。 このエラーは、メモリアロケーションがソケットバッファの 大きさによって制限されていることを意味しているのが通常であるが、
100% そうだというわけではない。
.TP 
\fBENOENT\fP
パケットが到着していないソケットに対して \fBSIOCGSTAMP\fP が呼ばれた。
.TP 
\fBENOPKG\fP
カーネルサブシステムが設定されていない。
.TP 
\fBENOPROTOOPT\fP と \fBEOPNOTSUPP\fP
無効なソケットオプションが渡された。
.TP 
\fBENOTCONN\fP
接続されていないソケットに対して、 接続状態でしか定義されていない操作を行おうとした。
.TP 
\fBEPERM\fP
高い優先度を設定したり、設定を変更したり、要求されたプロセスや プロセスグループにシグナルを送ったりするのに必要な権限を、 ユーザーが持っていない。
.TP 
\fBEPIPE\fP
接続が接続相手によって、予期しないやり方でクローズまたはシャットダウンされた。
.TP 
\fBESOCKTNOSUPPORT\fP
ソケットが未設定であるか、知らないソケットタイプが要求された。
.PP
他のエラーが上層のプロトコルによって生じるかもしれない。 \fBtcp\fP(7), \fBraw\fP(7), \fBudp\fP(7), \fBsocket\fP(7)
などを参照のこと。
.SH 注意
.\" IP_PASSSEC is Linux-specific
.\" IP_XFRM_POLICY is Linux-specific
.\" IP_IPSEC_POLICY is a nonstandard extension, also present on some BSDs
\fBIP_FREEBIND\fP, \fBIP_MTU\fP, \fBIP_MTU_DISCOVER\fP, \fBIP_RECVORIGDSTADDR\fP,
\fBIP_PKTINFO\fP, \fBIP_RECVERR\fP, \fBIP_ROUTER_ALERT\fP, and \fBIP_TRANSPARENT\fP
は Linux 固有である。

\fBSO_BROADCAST\fP オプションの利用には、くれぐれも注意すること。
これは Linux では特権操作ではない。
不注意なブロードキャストを行うと、ネットワークは簡単に過負荷状態になる。
新しいアプリケーションプロトコルには、ブロードキャストではなく
マルチキャストグループを用いるほうがよい。 ブロードキャストは推奨されない。
.PP
他の BSD のソケット実装では、 \fBIP_RCVDSTADDR\fP と \fBIP_RECVIF\fP といったソケットオプションがサポートされており、
宛先アドレスや受信データグラムのインターフェースが取得できるように なっていることもある。 Linux で同じことをやらせるには、より一般的な
\fBIP_PKTINFO\fP が使える。
.PP
いくつかの BSD のソケット実装では \fBIP_RECVTTL\fP オプションも提供されているが、タイプ \fBIP_RECVTTL\fP
の補助メッセージは受信パケットとともに渡される。 これは Linux で使われている \fBIP_TTL\fP オプションとは異なる動作である。
.PP
\fBSOL_IP\fP ソケットオプションレベルは移植性がない。 BSD ベースのプロトコルスタックでは \fBIPPROTO_IP\fP
レベルが使用されている。
.SS 移植性
Linux 2.0 との互換性のために、 obsolete な \fBsocket(AF_INET, SOCK_PACKET,
\fP\fIprotocol\fP\fB)\fP という書式でも \fBpacket\fP(7)  をオープンできるようになっているが、これはお勧めできない。今後は
\fBsocket(AF_PACKET, SOCK_RAW, \fP\fIprotocol\fP\fB)\fP
を代わりに用いるべきである。主な違いは、ジェネリックなリンク層用の \fIsockaddr_ll\fP アドレス構造体が、古い \fBsockaddr_pkt\fP
に変わって用いられるようになったことである。
.SH バグ
エラーの値がまったく首尾一貫していない。
.PP
IP 固有のインターフェースオプションを指定するための ioctl と ARP テーブルのことが記述されていない。
.PP
glibc のバージョンによっては \fIin_pktinfo\fP の定義を忘れているものがある。 現時点でのとりあえずの対策としては、この man
ページにある定義をプログラム中に コピーすることである。
.PP
.\" .SH AUTHORS
.\" This man page was written by Andi Kleen.
\fBrecvmsg\fP(2)  で \fImsg_name\fP に \fBMSG_ERRQUEUE\fP
を指定して、受信パケットに入っていた宛先アドレスを取得する方法は 2.2 カーネルの一部でうまく動かない。
.SH 関連項目
\fBrecvmsg\fP(2), \fBsendmsg\fP(2), \fBbyteorder\fP(3), \fBipfw\fP(4),
\fBcapabilities\fP(7), \fBnetlink\fP(7), \fBraw\fP(7), \fBsocket\fP(7), \fBtcp\fP(7),
\fBudp\fP(7)
.PP
\fBRFC\ 791\fP: オリジナルの IP の仕様
.br
\fBRFC\ 1122\fP: IPv4 ホストの必要条件
.br
.\" FIXME autobind INADDR REUSEADDR
\fBRFC\ 1812\fP: IPv4 ルータの必要条件
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.41 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
