.\"
.\"  epoll by Davide Libenzi ( efficient event notification retrieval )
.\"  Copyright (C) 2003  Davide Libenzi
.\"
.\"  This program is free software; you can redistribute it and/or modify
.\"  it under the terms of the GNU General Public License as published by
.\"  the Free Software Foundation; either version 2 of the License, or
.\"  (at your option) any later version.
.\"
.\"  This program is distributed in the hope that it will be useful,
.\"  but WITHOUT ANY WARRANTY; without even the implied warranty of
.\"  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
.\"  GNU General Public License for more details.
.\"
.\"  You should have received a copy of the GNU General Public License
.\"  along with this program; if not, write to the Free Software
.\"  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
.\"
.\"  Davide Libenzi <davidel@xmailserver.org>
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH EPOLL 7 2012\-04\-17 Linux "Linux Programmer's Manual"
.SH 名前
epoll \- I/O イベント通知機能
.SH 書式
\fB#include <sys/epoll.h>\fP
.SH 説明
\fBepoll\fP API は \fBpoll\fP(2) と同様の処理を行う、つまり、複数のファイルディスク
リプタを監視し、その中のいずれかが入出力可能な状態であるかを確認する。
\fBepoll\fP API は、エッジトリガインタフェースとレベルトリガインタフェースの
いずれとしても使用することができ、監視するファイルディスクリプタの数が多い
場合にも使用できる。 \fBepoll\fP インスタンスの作成や管理を行うために
以下のシステムコールが提供されている:
.IP * 3
\fBepoll_create\fP(2) は \fBepoll\fP インスタンスを作成し、そのインスタンスを参照する
ファイルディスクリプタを返す。(もっと新しい \fBepoll_create1\fP(2) では、
\fBepoll_create\fP(2) の機能が拡張されている)。
.IP *
特定のファイルディスクリプタに対する監視内容を \fBepoll_ctl\fP(2)  で登録する。 \fBepoll\fP
インスタンスに現在登録されているファイルディスクリプタの集合は \fIepoll\fP 集合と呼ばれることもある。
.IP *
\fBepoll_wait\fP(2) は I/O イベントを待つ。
現在利用可能な状態のイベントがなければ、呼び出したスレッドを停止する。
.SS レベルトリガとエッジトリガ
\fBepoll\fP イベント配送 (distribution) インタフェースは、 エッジトリガ (ET) としてもレベルトリガ (LT)
としても動作させることができる。 二つの配送機構の違いは、次のように説明できる。 このようなシナリオが起こったとしよう:
.IP 1. 3
パイプの読み込み側を表すファイルディスクリプタ (\fIrfd\fP)  が \fBepoll\fP インスタンスに登録される。
.IP 2.
パイプへ書き込むプログラムが 2 kB のデータをパイプの書き込み側へ書き込む。
.IP 3.
\fBepoll_wait\fP(2)  を呼び出すと、読み込み可能 (ready) なファイルディスクリプタとして \fIrfd\fP が返る。
.IP 4.
パイプから読み出すプログラムが、1 kB のデータを \fIrfd\fP から読み出す。
.IP 5.
\fBepoll_wait\fP(2)  の呼び出しが行われる。
.PP
\fIrfd\fP ファイルディスクリプタが \fBEPOLLET\fP フラグ (エッジトリガ) を使って \fBepoll\fP に追加されていると、
利用可能なデータがファイル入力バッファにまだ存在するにもかかわらず ステップ \fB5\fP の \fBepoll_wait\fP(2)
の呼び出しでハングする可能性がある。 その一方で、リモートの接続先 (peer) は既に送られたデータに 基づいて応答を期待しているかもしれない。
このようなことが起こる理由は、エッジトリガイベント配送では、 モニタしているファイルでイベントが起ったときにのみイベントが 配送されるためである。
したがって、ステップ \fB5\fP では、呼び出し側は結果的に 入力バッファ内にすで存在するデータを待つことになるかもしれない。 上記の例では、 \fB2\fP
で行われた書き込みによって \fIrfd\fP に関するイベントが生成され、 \fB3\fP でイベントが消費 (consume) される。 \fB4\fP
で行われる読み込み操作では、全部のバッファデータを消費しないので、 ステップ \fB5\fP で行われる \fBepoll_wait\fP(2)  の呼び出しが
無期限に停止 (block) するかもしれない。

\fBEPOLLET\fP フラグを採用するアプリケーションでは、 インタフェースはブロックしない (nonblocking) ファイルディスクリプタを
使うべきである。 これは、ブロックされる読み込みや書き込みによって、 複数のファイルディスクリプタを扱うタスクが 停止してしまうのを避けるためである。
\fBepoll\fP をエッジトリガ (\fBEPOLLET\fP)  インタフェースとして使うために提案される方法は以下の通りである。
.RS
.TP  4
\fBi\fP
ブロックしないファイルディスクリプタと共に使う。
.TP 
\fBii\fP
\fBread\fP(2)  または \fBwrite\fP(2)  が \fBEAGAIN\fP を返した後でのみ、イベントを待つ。
.RE
.PP
一方、レベルトリガインタフェースとして使う場合
 (こちらがデフォルトである、
\fBEPOLLET\fP が指定されなかった場合)、
\fBepoll\fP は単に高速な \fBpoll\fP(2) であり、使い方が同じなので、
\fBpoll\fP(2) が使われているところではどこでも使用することができる。

エッジトリガを使った場合でも、複数のデータを受信すると複数の \fBepoll\fP イベントが生成されるので、 呼び出し側には
\fBEPOLLONESHOT\fP フラグを指定するオプションがある。 このフラグは \fBepoll\fP に対して、 \fBepoll_wait\fP(2)
によるイベントを受信した後で、関連するファイルディスクリプタを無効にさせる。 \fBEPOLLONESHOT\fP フラグが指定された場合、
\fBepoll_ctl\fP(2)  に \fBEPOLL_CTL_MOD\fP を指定してファイルディスクリプタを再度使用できるようにするのは、
呼び出し側の責任である。
.SS "/proc インタフェース"
.\" Following was added in 2.6.28, but them removed in 2.6.29
.\" .TP
.\" .IR /proc/sys/fs/epoll/max_user_instances " (since Linux 2.6.28)"
.\" This specifies an upper limit on the number of epoll instances
.\" that can be created per real user ID.
epoll が消費するカーネルメモリの量を制限するために、 以下のインタフェースを使用することができる。
.TP 
\fI/proc/sys/fs/epoll/max_user_watches\fP (Linux 2.6.28 以降)
.\" 2.6.29 (in 2.6.28, the default was 1/32 of lowmem)
このファイルは、あるユーザがシステム上の全ての epoll インスタンスに 登録できるファイルディスクリプタの総数の上限を規定する。 この上限は実ユーザ
ID 単位である。 登録されたファイルディスクリプタ 1 つが消費するメモリ量は、 32 ビットカーネルでおよそ 90 バイト、 64
ビットカーネルでおよそ 160 バイトである。 現在のところ、 \fImax_user_watches\fP のデフォルト値は、利用可能なメモリ下限の
1/25 (4%) であり、 登録で消費されるメモリ量 (バイト単位) で割った値となる。
.SS おすすめな使用例
レベルトリガインタフェースとして使用するときの \fBepoll\fP の使い方は \fBpoll\fP(2)  と同じである。
しかしエッジトリガとして使う場合は、 アプリケーションのイベントループでストール (stall) しないように、 使い方をより明確にしておく必要がある。
この例では、リスナはブロックしないソケットであり、 \fBlisten\fP(2)  が呼ばれている。 関数 \fIdo_use_fd()\fP は、
\fBread\fP(2)  または \fBwrite\fP(2)  によって \fBEAGAIN\fP が返されるまでは、新しい準備済みのファイルディスクリプタを使う。
イベント駆動ステートマシンアプリケーションは、 \fBEAGAIN\fP を受信した後、カレントの状態を記録しておくべきである。 これにより、次の
\fIdo_use_fd()\fP 呼び出しのときに、以前に停止したところから \fBread\fP(2)  または \fBwrite\fP(2)
を継続することができる。

.in +4n
.nf
#define MAX_EVENTS 10
struct epoll_event ev, events[MAX_EVENTS];
int listen_sock, conn_sock, nfds, epollfd;

/* Set up listening socket, \(aqlisten_sock\(aq (socket(),
   bind(), listen()) */

epollfd = epoll_create(10);
if (epollfd == \-1) {
    perror("epoll_create");
    exit(EXIT_FAILURE);
}

ev.events = EPOLLIN;
ev.data.fd = listen_sock;
if (epoll_ctl(epollfd, EPOLL_CTL_ADD, listen_sock, &ev) == \-1) {
    perror("epoll_ctl: listen_sock");
    exit(EXIT_FAILURE);
}

for (;;) {
    nfds = epoll_wait(epollfd, events, MAX_EVENTS, \-1);
    if (nfds == \-1) {
        perror("epoll_pwait");
        exit(EXIT_FAILURE);
    }

    for (n = 0; n < nfds; ++n) {
        if (events[n].data.fd == listen_sock) {
            conn_sock = accept(listen_sock,
                            (struct sockaddr *) &local, &addrlen);
            if (conn_sock == \-1) {
                perror("accept");
                exit(EXIT_FAILURE);
            }
            setnonblocking(conn_sock);
            ev.events = EPOLLIN | EPOLLET;
            ev.data.fd = conn_sock;
            if (epoll_ctl(epollfd, EPOLL_CTL_ADD, conn_sock,
                        &ev) == \-1) {
                perror("epoll_ctl: conn_sock");
                exit(EXIT_FAILURE);
            }
        } else {
            do_use_fd(events[n].data.fd);
        }
    }
}
.fi
.in

エッジトリガインタフェースとして使う場合、性能上の理由により、 一度 (\fBEPOLLIN\fP|\fBEPOLLOUT\fP)  を指定してから
(\fBEPOLL_CTL_ADD\fP で) ファイルディスクリプタを \fBepoll\fP インタフェースに追加することができる。 これにより、
\fBepoll_ctl\fP(2)  に \fBEPOLL_CTL_MOD\fP を指定して呼び出すことで \fBEPOLLIN\fP と \fBEPOLLOUT\fP
の連続的な切り替えが避けられる。
.SS 質問と解答
.TP  4
\fBQ0\fP
\fBepoll\fP 集合内の登録されたファイルディスクリプタを区別するには、 何をキーとして使えばよいか？
.TP 
\fBA0\fP
キーはファイルディスクリプタ番号とオープンファイル記述 (open file description) の組である (オープンファイル記述は "open
file handle" とも 呼ばれ、オープンされたファイルのカーネルの内部表現である)。
.TP 
\fBQ1\fP
1 つの \fBepoll\fP インスタンスに同じファイルディスクリプタを 2 回登録するとどうなるか？
.TP 
\fBA1\fP
.\" But a descriptor duplicated by fork(2) can't be added to the
.\" set, because the [file *, fd] pair is already in the epoll set.
.\" That is a somewhat ugly inconsistency.  On the one hand, a child process
.\" cannot add the duplicate file descriptor to the epoll set.  (In every
.\" other case that I can think of, descriptors duplicated by fork have
.\" similar semantics to descriptors duplicated by dup() and friends.)  On
.\" the other hand, the very fact that the child has a duplicate of the
.\" descriptor means that even if the parent closes its descriptor, then
.\" epoll_wait() in the parent will continue to receive notifications for
.\" that descriptor because of the duplicated descriptor in the child.
.\"
.\" See http://thread.gmane.org/gmane.linux.kernel/596462/
.\" "epoll design problems with common fork/exec patterns"
.\"
.\" mtk, Feb 2008
たぶん \fBEEXIST\fP を受け取るだろう。 しかしながら、同じ \fBepoll\fP
インスタンスに対して複製されたディスクリプタを追加することは可能である (\fBdup\fP(2), \fBdup2\fP(2), \fBfcntl\fP(2)
\fBF_DUPFD\fP など)。 複製したファイルディスクリプタを異なる \fIevents\fP マスクで登録すれば、イベントをフィルタリングするのに
この機能は有用な手法である。
.TP 
\fBQ2\fP
2 つの \fBepoll\fP インスタンスが同じファイルディスクリプタを待ち受けることは可能か？ もし可能であれば、イベントは両方の \fBepoll\fP
ファイルディスクリプタに報告されるか？
.TP 
\fBA2\fP
イベントは両方に報告される。 しかしながら、これを正しく扱うには注意深くプログラミングする必要が あるかもしれない。
.TP 
\fBQ3\fP
\fBepoll\fP ファイルディスクリプタ自身は poll/epoll/select が可能か？
.TP 
\fBA3\fP
可能である。 \fBepoll\fP ファイルディスクリプタに処理待ちのイベントがある場合は、 読み出し可能だと通知されることだろう。
.TP 
\fBQ4\fP
\fBepoll\fP ファイルディスクリプタを自身のファイルディスクリプタ集合に 入れようとするとどうなるか？
.TP 
\fBA4\fP
\fBepoll_ctl\fP(2)  の呼び出しは (\fBEINVAL\fP で) 失敗するだろう。 ただし \fBepoll\fP ファイルディスクリプタを他の
\fBepoll\fP ファイルディスクリプタ集合の内部に追加することは可能である。
.TP 
\fBQ5\fP
\fBepoll\fP ファイルディスクリプタを UNIX ドメインソケットで他のプロセスに送ることは可能か？
.TP 
\fBA5\fP
可能だが、これをすることに意味はない。 なぜなら、受信側のプロセスが \fBepoll\fP 集合内のファイルディスクリプタのコピーを持っていないからである。
.TP 
\fBQ6\fP
ファイルディスクリプタをクローズすると、そのファイルディスクリプタは全ての \fBepoll\fP 集合から自動的に削除されるか？
.TP 
\fBA6\fP
削除されるが、以下の点に注意が必要である。 ファイルディスクリプタはオープンファイル記述 (\fBopen\fP(2)  参照) への参照である。
ディスクリプタの複製を \fBdup\fP(2), \fBdup2\fP(2), \fBfcntl\fP(2)  の \fBF_DUPFD\fP や \fBfork\fP(2)
経由で行う度に、同じオープンファイル記述を参照する新規のファイル ディスクリプタが生成される。
オープンファイル記述自体は、自身を参照する全てのファイルディスクリプタ がクローズされるまで存在し続ける。 ファイルディスクリプタが \fBepoll\fP
集合から削除されるのは、対応するオープンファイル記述を参照している 全てのファイルディスクリプタがクローズされた後である
(\fBepoll_ctl\fP(2)  \fBEPOLL_CTL_DEL\fP を使ってそのディスクリプタを明示的に削除した場合にも削除される)。 このことは、
\fBepoll\fP 集合に属しているあるファイルディスクリプタをクローズした後であっても、
同じファイル記述を参照する他のファイルディスクリプタがオープンされている間は、 クローズしたファイルディスクリプタ宛にイベントが報告される可能性があると
いうことを意味する。
.TP 
\fBQ7\fP
2 つ以上のイベントが \fBepoll_wait\fP(2)  コールの間に発生した場合、それらはまとめて報告されるか、 それとも別々に報告されるか？
.TP 
\fBA7\fP
まとめて報告されるだろう。
.TP 
\fBQ8\fP
ファイルディスクリプタに対する操作は、 既に集められているがまだ報告されていないイベントに影響するか？
.TP 
\fBA8\fP
既存のファイルディスクリプタに対して 2 つの操作を行うことができる。 この場合、削除には意味がない。 変更すると、使用可能な I/O
が再び読み込まれる。
.TP 
\fBQ9\fP
\fBEPOLLET\fP フラグ (エッジトリガ動作) を使っている場合、 \fBEAGAIN\fP を受け取るまで、
継続してファイルディスクリプタを読み書きする必要があるか？
.TP 
\fBA9\fP
\fBepoll_wait\fP(2)  からイベントを受け取ることは、 そのファイルディスクリプタが要求された I/O 操作に対して準備済みである、
ということをユーザに示すものである。 次の (ブロックしない) read/write で \fBEAGAIN\fP
を受け取るまではファイルディスクリプタは準備済みであると 考えなければならない。 そのファイルディスクリプタをいつどのように使うかは、
全くユーザに任されてる。
.sp
パケット指向やトークン指向のファイル (例えば、データグラムソケット、 canonical モードの端末) では、 読み込み用 / 書き込み用の I/O
空間の末尾を検知する唯一の方法は \fBEAGAIN\fP になるまで read/write を行うことである。
.sp
ストリーム指向のファイル (例えば、パイプ、FIFO、ストリームソケット) では、 読み込み用 / 書き込み用の I/O 空間が使い尽くされた状態は、
対象となるファイルディスクリプタから読み込んだデータ量または 書き込んだデータ量をチェックすることでも検知できる。
例えば、ある特定の量のデータを読み込むために \fBread\fP(2)  を呼んだときに、 \fBread\fP(2)
が返したバイト数がそれより少なかった場合、 そのファイルディスクリプタの読み込み用 I/O 空間が 使い尽くされたことが分かる。 \fBwrite\fP(2)
を使って書き込みをするときも、同じことが言える (監視しているファイルディスクリプタが常にストリーム指向のファイルを
参照していることを保証できない場合には、後者の手法の使用を避けること)。
.SS ありがちな落とし穴と回避方法
.TP 
\fBo 飢餓 (starvation) (エッジトリガ)\fP
.PP
大きな I/O 空間がある場合、 その I/O 空間のデータを全て処理 (drain) しようとすると、
他のファイルが処理されず、飢餓を発生させることがある (この問題は \fBepoll\fP に固有のものではない)。
.PP
この問題の解決法は、準備済み状態のリストを管理して、 関連する data 構造体の中でファイルディスクリプタが 利用可能であるとマークすることである。
それによって、利用可能なすべてのファイルの中で どのファイルを処理する必要があるかを憶えることができ、 しかも順番に処理 (round robin)
することができる。 既に利用可能であるファイルディスクリプタに対して それ以後に受け取るイベントを無視することもできる。
.TP 
\fBo イベントキャッシュを使っている場合\fP
.PP
イベントキャッシュを使っている場合、 または \fBepoll_wait\fP(2)  から返された全てのファイルディスクリプタを格納している場合、
クローズされたことを動的にマークする (つまり前のイベントの処理によってマークされる) 方法を提供すべきである。 \fBepoll_wait\fP(2)
から 100 個のイベントを受け取り、 イベント #47 ではある条件でイベント #13 が閉じられると仮定する。 イベント #13
の構造体を削除しファイルディスクリプタを \fBclose\fP(2)  すると、イベントキャッシュはそのファイルディスクリプタを待つイベントが
存在するといって、混乱が起きる。
.PP
この問題を解決する 1 つの方法は、イベント 47 の処理をしている間に、 ファイルディスクリプタ 13 を削除して \fBclose\fP(2)
するために \fBepoll_ctl\fP(\fBEPOLL_CTL_DEL\fP)  を呼び出し、関連付けられた data 構造体を削除済みとマークして、
クリーンアップリストにリンクすることである。 バッチ処理の中でファイルディスクリプタ 13 についての 他のイベントを見つけた場合、
そのファイルディスクリプタが以前に削除されたものであると分かるので、 混乱は起きない。
.SH バージョン
.\" Its interface should be finalized in Linux kernel 2.5.66.
\fBepoll\fP API は Linux カーネル 2.5.44 に導入された。 glibc でのサポートはバージョン 2.3.2 で追加された。
.SH 準拠
\fBepoll\fP API は Linux 固有である。 他のシステムでも同様の機構が提供されている場合がある。 例えば、FreeBSD の
\fIkqueue\fP や Solaris の \fI/dev/poll\fP などである。
.SH 関連項目
\fBepoll_create\fP(2), \fBepoll_create1\fP(2), \fBepoll_ctl\fP(2), \fBepoll_wait\fP(2)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.41 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
