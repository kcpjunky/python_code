.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (C) 2002 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\" FIXME . Add an example to this page
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH SHM_OPEN 3 2009\-02\-25 Linux "Linux Programmer's Manual"
.SH 名前
shm_open, shm_unlink \- POSIX 共有メモリ・オブジェクトの作成/オープン、 削除を行う
.SH 書式
\fB#include <sys/mman.h>\fP
.br
\fB#include <sys/stat.h>\fP /* mode 定数用 */
.br
\fB#include <fcntl.h>\fP /* O_* 定数の定義用 */
.sp
\fBvoid * shm_open(const char *\fP\fIname\fP\fB, int \fP\fIoflag\fP\fB, mode_t
\fP\fImode\fP\fB);\fP
.sp
\fBint shm_unlink(const char *\fP\fIname\fP\fB);\fP
.sp
\fI\-lrt\fP でリンクする。
.SH 説明
\fBshm_open\fP()  は、POSIX 共有メモリ・オブジェクトを新規に作成/オープンしたり、 すでに存在するオブジェクトをオープンしたりする。
POSIX 共有メモリ・オブジェクトは、実際には、関係のないプロセスが 共有メモリの同じ領域を \fBmmap\fP(2)
するために使用することができる手段である。 \fBshm_unlink\fP()  は、逆の操作、つまり以前に \fBshm_open\fP()
で作成されたオブジェクトの削除を行う。
.LP
.\" glibc allows the initial slash to be omitted, and makes
.\" multiple initial slashes equivalent to a single slash.
.\" This differs from the implementation of POSIX message queues.
.\" glibc allows subdirectory components in the name, in which
.\" case the subdirectory must exist under /dev/shm, and allow the
.\" required permissions if a user wants to create a shared memory
.\" object in that subdirectory.
\fBshm_open\fP()  の動作は \fBopen\fP(2)  とよく似ている。 \fIname\fP
で作成したりオープンしたりする共有メモリ・オブジェクトを指定する。 移植性を持たせるためには、共有メモリ・オブジェクトは \fI/somename\fP
という形式の名前で識別し、 その名前は、最大で \fBNAME_MAX\fP (すなわち 255) 文字の NULL 終端された文字列で、
スラッシュで始まり、スラッシュ以外の文字が 1 文字以上続く形式 にすべきである。
.LP
\fIoflag\fP はビットマスクで、 \fBO_RDONLY\fP と \fBO_RDWR\fP のいずれか一方と、以下に述べる他のフラグの論理和をとったもの
を指定する。
.TP  1.1i
\fBO_RDONLY\fP
読み出しアクセス用にオブジェクトをオープンする。 このフラグを指定してオープンされた共有メモリ・オブジェクトは、 読み出し (\fBPROT_READ\fP)
アクセスでのみ \fBmmap\fP(2)  することができる。
.TP 
\fBO_RDWR\fP
読み書きアクセス用にオブジェクトをオープンする。
.TP 
\fBO_CREAT\fP
.\" In truth it is actually the file system IDs on Linux, but these
.\" are nearly always the same as the effective IDs.  (MTK, Jul 05)
存在しない場合、共有メモリ・オブジェクトを作成する。 オブジェクトのユーザとグループの所有権は、 呼び出し元プロセスの対応する実効 ID が使われ、
オブジェクトの許可ビットは \fImode\fP の下位 9 ビットに基づいて設定される。ただし、 ファイルモード作成マスク (\fBumask\fP(2)
参照) に設定されている値は、新規オブジェクトに関してはクリアされる。 \fImode\fP を定義するために使用できるマクロ定数(群)は
\fBopen\fP(2)  に記載されている (これらの定数のシンボル定義は \fI<sys/stat.h>\fP
のインクルードにより得られる)。
.sp
新規に作成された共有メモリ・オブジェクトは長さ 0 で初期化される。 オブジェクトの大きさは \fBftruncate\fP(2)  を使って設定できる。
共有メモリ・オブジェクトとして新規に確保されたバイトは自動的に 0 に初期化される。
.TP 
\fBO_EXCL\fP
\fBO_CREAT\fP が一緒に指定されており、 \fIname\fP で指定された共有メモリ・オブジェクトが既に存在した場合、 エラーを返す。
オブジェクトの存在確認と、存在しなかった場合のオブジェクト作成は、 必ず一連の操作として実行される (performed atomically)。
.TP 
\fBO_TRUNC\fP
共有メモリ・オブジェクトがすでに存在した場合、 そのオブジェクトを 0 バイトに切り詰める。
.LP
これらのフラグ値の定義は \fI<fcntl.h>\fP のインクルードにより得られる。
.LP
成功して完了した場合、 \fBshm_open\fP()  は共有メモリ・オブジェクトを参照する新しいファイル・ディスクリプタを返す。
このファイル・ディスクリプタは、そのプロセス内で過去にオープンされていない ファイル・ディスクリプタの中で最も小さな数になることが保証される。
\fBFD_CLOEXEC\fP フラグ (\fBfcntl\fP(2)  を参照) が、このファイル・ディスクリプタに設定される。

通常、これらのファイル・ディスクリプタは、この後続けて実行される \fBftruncate\fP(2)  (新規に作成されたオブジェクトの場合のみ) と
\fBmmap\fP(2)  の呼び出しに使用される。 \fBmmap\fP(2)  を呼び出した後は、ファイル・ディスクリプタをクローズしてもよく、
クローズしてもメモリ・マッピングに影響を与えることはない。

\fBshm_unlink\fP()  の動作は \fBunlink\fP(2)  とよく似ている:
共有メモリ・オブジェクト名を削除し、すべてのプロセスが処理対象の オブジェクトをアンマップした時点でオブジェクトの割り当てを解除し、
対応するメモリ領域の内容を破棄する。 \fBshm_unlink\fP()  が成功した後で、同じ \fIname\fP を持つオブジェクトに対して
\fBshm_open\fP()  を行うと、 (\fBO_CREAT\fP が指定されていない場合) 失敗する。 (\fBO_CREAT\fP
が指定されている場合、新しく別のオブジェクトが作成される)。
.SH 返り値
成功した場合、 \fBshm_open\fP()  は非負のファイル・ディスクリプタを返す。 失敗した場合、 \fBshm_open\fP()  は \-1 を返す。
\fBshm_unlink\fP()  は、成功した場合 0 を、エラーが起こった場合 \-1 を返す。
.SH エラー
失敗した場合、エラーの原因を示すため \fIerrno\fP が設定される。 \fIerrno\fP に設定される値は以下の通りである:
.TP 
\fBEACCES\fP
共有メモリオブジェクトを \fBshm_unlink\fP()  する権限がなかった。
.TP 
\fBEACCES\fP
指定された \fImode\fP で \fIname\fP を \fBshm_open\fP()  する権限がなかった。もしくは、 \fBO_TRUNC\fP
が指定されたが、呼び出し元にはそのオブジェクトに対する書き込み権限が なかった。
.TP 
\fBEEXIST\fP
\fBO_CREAT\fP と \fBO_EXCL\fP の両方が \fBshm_open\fP()  に指定されたが、 \fIname\fP
で指定された共有メモリ・オブジェクトが既に存在した。
.TP 
\fBEINVAL\fP
\fBshm_open\fP()  に与えられた \fIname\fP 引き数が不正であった。
.TP 
\fBEMFILE\fP
プロセスがオープン可能なファイル数の上限にすでに達していた。
.TP 
\fBENAMETOOLONG\fP
\fIname\fP の長さが \fBPATH_MAX\fP を越えている。
.TP 
\fBENFILE\fP
ファイルシステムでオープンできるファイル数の上限に達した。
.TP 
\fBENOENT\fP
存在していない \fIname\fP のオブジェクトを \fBshm_open\fP()  しようとしたが、 \fBO_CREAT\fP が指定されていなかった。
.TP 
\fBENOENT\fP
存在しない \fIname\fP のオブジェクトを \fBshm_unlink\fP()  しようとした。
.SH バージョン
これらの関数は glibc 2.2 以降で提供されている。
.SH 準拠
POSIX.1\-2001.
.LP
POSIX.1\-2001 には、新規に作成される共有メモリオブジェクトのグループ所有権は、 呼び出し元プロセスの実効グループ ID か
「システムのデフォルトのグループ ID」 のどちらかに設定される、と書かれている。
.SH 注意
.LP
POSIX は \fBO_RDONLY\fP と \fBO_TRUNC\fP が一緒に指定された場合の動作を未定義にしている。Linux では、
既存の共有メモリ・オブジェクトに対する切り詰め (truncate) は成功する。 しかし、他の UNIX システムでも同じであるとは限らない。
.LP
Linux 2.4 における POSIX 共有メモリ・オブジェクトの実装は 専用のファイルシステムを使用する。そのファイルシステムは通常
\fI/dev/shm\fP にマウントされる。
.SH 関連項目
\fBclose\fP(2), \fBfchmod\fP(2), \fBfchown\fP(2), \fBfcntl\fP(2), \fBfstat\fP(2),
\fBftruncate\fP(2), \fBmmap\fP(2), \fBopen\fP(2), \fBumask\fP(2), \fBshm_overview\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.41 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
