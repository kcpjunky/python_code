.\" t
.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (C) 2006 Michael Kerrisk <mtk.manpages@gmail.com>
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH MQ_OVERVIEW 7 2009\-09\-27 Linux "Linux Programmer's Manual"
.SH 名前
mq_overview \- POSIX メッセージキューの概要
.SH 説明
POSIX メッセージキューを使用すると、プロセス間で メッセージの形でのデータのやり取りを行うことができる。 この API は System V
メッセージキューの API (\fBmsgget\fP(2), \fBmsgsnd\fP(2), \fBmsgrcv\fP(2)  など)
とは異なるものだが、同様の機能を提供する。

メッセージキューの作成とオープンは \fBmq_open\fP(3)  を使って行う。この関数は \fIメッセージキュー記述子 (message queue
descriptor)\fP (\fImqd_t\fP)  を返す。これ以降のコールでは、オープンされたメッセージキューは \fIメッセージキュー記述子\fP
を使って参照される。 各メッセージキューは \fI/somename\fP の形の名前で区別することができる。 その名前は、最大で \fBNAME_MAX\fP
(すなわち 255) 文字の NULL 終端された文字列で、 スラッシュで始まり、スラッシュ以外の文字が 1 文字以上続く形式である。
\fBmq_open\fP(3)  に同じ名前を渡すことで、2つのプロセスで同一のキューを 操作することができる。

メッセージのキューへの送受信は \fBmq_send\fP(3)  と \fBmq_receive\fP(3)
を使って行う。プロセスがキューの使用を終えるときには、 \fBmq_close\fP(3)
を使ってキューをクローズする。キューがもはや不要となった場合には、 \fBmq_unlink\fP(3)  を使ってキューを削除できる。キューの属性は
\fBmq_getattr\fP(3)  で取得でき、 (制限はあるが)  \fBmq_setattr\fP(3)  で変更できる。 \fBmq_notify\fP(3)
を使うことで、空のキューへのメッセージ到着を非同期で 通知するように要求することもできる。

メッセージキュー記述子は \fIオープンメッセージキュー記述 (open message queue description)\fP への参照である
(\fBopen\fP(2)  も参照)。 \fBfork\fP(2)  実行後は、子プロセスは親プロセスのメッセージキュー記述子のコピーを継承する。
これらの記述子は、親プロセスの対応する記述子と同じオープンメッセージキュー 記述を参照している。親プロセスと子プロセスの対応する記述子は、フラグ
(\fImq_flags\fP)  を共有する。なぜなら、フラグはオープンメッセージキュー記述に 関連付けられているからである。

各メッセージにはそれぞれ \fI優先度 (priority)\fP があり、メッセージの受信プロセスへの配送は常に 優先度の高いメッセージから順に行われる。
メッセージの優先度は 0 (低優先) から \fIsysconf(_SC_MQ_PRIO_MAX)\ \-\ 1\fP (高優先) の値を持つ。 Linux
では、 \fIsysconf(_SC_MQ_PRIO_MAX)\fP は 32768 を返すが、 POSIX.1\-2001 で要求されているのは 0 から
31 までの優先度を 実装することだけであり、実装によってはこの範囲の優先度しか 対応していない。
.PP
この節の残りでは、POSIX メッセージキューの Linux の実装の詳細 について説明する。
.SS ライブラリインタフェースとシステムコール
ほとんどの場合、上記の \fBmq_*()\fP ライブラリインタフェースは、同じ名前の下位層のシステムコールを
使って実装されている。この枠組みにあてはまらないものを 以下の表に示す。
.in +4n
.TS
lB lB
l l.
Library interface	System call
mq_close(3)	close(2)
mq_getattr(3)	mq_getsetattr(2)
mq_notify(3)	mq_notify(2)
mq_open(3)	mq_open(2)
mq_receive(3)	mq_timedreceive(2)
mq_send(3)	mq_timedsend(2)
mq_setattr(3)	mq_getsetattr(2)
mq_timedreceive(3)	mq_timedreceive(2)
mq_timedsend(3)	mq_timedsend(2)
mq_unlink(3)	mq_unlink(2)
.TE
.in
.SS バージョン
Linux では POSIX メッセージキューはカーネル 2.6.6 以降でサポートされている。 glibc ではバージョン 2.3.4
以降でサポートされている。
.SS カーネルの設定
POSIX メッセージキューのサポートは、カーネルの設定 (configuration)  オプション \fBCONFIG_POSIX_MQUEUE\fP
で設定可能である。このオプションはデフォルトでは有効である。
.SS 持続性
POSIX メッセージキューはカーネル内で保持される。 \fBmq_unlink\fP(3)  で削除されなければ、メッセージキューは
システムがシャットダウンされるまで存在し続ける。
.SS リンク
POSIX メッセージキュー API を使用したプログラムは \fIcc \-lrt\fP でコンパイルし、リアルタイムライブラリ \fIlibrt\fP
とリンクしなければならない。
.SS "/proc インタフェース"
以下のインタフェースを使って、POSIX メッセージキューが消費するカーネル メモリの量を制限することができる。
.TP 
\fI/proc/sys/fs/mqueue/msg_max\fP
このファイルを使って、一つのキューに入れられるメッセージの最大数の 上限値を参照したり変更したりできる。この値は、 \fBmq_open\fP(3)  に渡す
\fIattr\->mq_maxmsg\fP 引き数に対する上限値として機能する。 \fImsg_max\fP のデフォルト値は 10 で、 最小値は 1
(2.6.28 より前のカーネルでは 10) である。 上限は「埋め込みの固定値」 (\fBHARD_MAX\fP)  で \fI(131072\ /\ sizeof(void\ *))\fP (Linux/86 では 32768) である。 この上限は特権プロセス (\fBCAP_SYS_RESOURCE\fP)
では無視されるが、埋め込みの固定値による上限は どんな場合にでも適用される。
.TP 
\fI/proc/sys/fs/mqueue/msgsize_max\fP
このファイルを使って、メッセージの最大サイズの上限値を	 参照したり変更したりできる。	 この値は、	 \fBmq_open\fP(3)	 に渡す	
\fIattr\->mq_msgsize\fP 引き数に対する上限値として機能する。	 \fImsgsize_max	\fP のデフォルト値は 8192
バイトで、 最小値は 128 (2.6.28 より前のカーネルでは 8192) である。 \fImsgsize_max\fP の上限は 1,048,576
である (2.6.28 より前のカーネルでは、上限は \fBINT_MAX\fP (Linux/86 では 2,147,483,647) であった)。
この上限は特権プロセス	 (\fBCAP_SYS_RESOURCE\fP)	 では無視される。
.TP 
\fI/proc/sys/fs/mqueue/queues_max\fP
このファイルを使って、作成することができるメッセージキューの数に	 対するシステム全体での制限を参照したり変更したりできる。	
一度この上限に達すると、新しいメッセージキューを作成できるのは	 特権プロセス	 (\fBCAP_SYS_RESOURCE\fP)	 だけとなる。	
\fIqueues_max	\fP のデフォルト値は 256 であり、	 0 から INT_MAX の範囲の任意の値に変更することができる。
.SS リソース制限
リソース上限 \fBRLIMIT_MSGQUEUE\fP は、プロセスの実 UID に対応する全メッセージキューが消費する
メモリ空間の量に対して上限を設定する。 \fBgetrlimit\fP(2)  を参照。
.SS メッセージキュー・ファイルシステムのマウント
Linux では、メッセージキューは仮想ファイルシステム内に作成される (他の実装でも同様の機能が提供されているものもあるが、
詳細は違っているだろう)。 以下のコマンドを使うことで (スーパーユーザは)  このファイルシステムをマウントできる:
.in +4n
.nf

#\fB mkdir /dev/mqueue\fP
#\fB mount \-t mqueue none /dev/mqueue\fP

.fi
.in
マウントしたディレクトリのスティッキービット (sticky bit) は 自動的にオンとなる。

メッセージキュー・ファイルシステムのマウント後は、ファイルに対して 通常使うコマンド (例えば \fBls\fP(1)  や \fBrm\fP(1))
を使って、システム上のメッセージキューを表示したり 操作したりできる。

ディレクトリ内の各ファイルの内容は 1行であり、 キューに関する情報が表示される。
.in +4n
.nf

$\fB cat /dev/mqueue/mymq\fP
QSIZE:129     NOTIFY:2    SIGNO:0    NOTIFY_PID:8260

.fi
.in
各フィールドの詳細は以下の通りである:
.TP 
\fBQSIZE\fP
キューに入っている全メッセージの合計バイト数。
.TP 
\fBNOTIFY_PID\fP
この値が 0 以外の場合、この値の PID を持つプロセスが \fBmq_notify\fP(3)
を使って、非同期のメッセージ通知を行うように設定したことを示す。 どのように通知が行われるかは、以下のフィールドにより決定される。
.TP 
\fBNOTIFY\fP
通知方法: 0 は \fBSIGEV_SIGNAL\fP; 1 は \fBSIGEV_NONE\fP; 2 は \fBSIGEV_THREAD\fP
.TP 
\fBSIGNO\fP
\fBSIGEV_SIGNAL\fP に使用されるシグナル番号。
.SS メッセージキュー記述子のポーリング
Linux では、メッセージキュー記述子は実際はファイル記述子 (file descriptor)  であり、 \fBselect\fP(2),
\fBpoll\fP(2), \fBepoll\fP(7)  を使って監視することができる。 この機能の移植性はない。
.SH 準拠
POSIX.1\-2001.
.SH 注意
System V メッセージキュー (\fBmsgget\fP(2), \fBmsgsnd\fP(2), \fBmsgrcv\fP(2)  など)
はプロセス間でメッセージをやり取りするための古い API である。 POSIX メッセージキューは System V メッセージキューよりもうまく
設計されたインタフェースを提供している。 一方で、POSIX メッセージキューは System V メッセージキューと比べると
利用できるシステムが少ない (特に、古いシステムでは少ない)。

現在のことろ (バージョン 2.6.26 時点)、 Linux は POSIX メッセージキューに対するアクセス制御リスト (ACL) に
対応していない。
.SH 例
各種のメッセージキュー関数を使用した例が \fBmq_notify\fP(3)  に記載されている。
.SH 関連項目
\fBgetrlimit\fP(2), \fBmq_getsetattr\fP(2), \fBpoll\fP(2), \fBselect\fP(2),
\fBmq_close\fP(3), \fBmq_getattr\fP(3), \fBmq_notify\fP(3), \fBmq_open\fP(3),
\fBmq_receive\fP(3), \fBmq_send\fP(3), \fBmq_unlink\fP(3), \fBepoll\fP(7)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.41 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
