.\" Hey Emacs! This file is -*- nroff -*- source.
.\"
.\" Copyright (C) 2003 Andi Kleen
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH ARCH_PRCTL 2 2007\-12\-26 Linux "Linux Programmer's Manual"
.SH 名前
arch_prctl \- アーキテクチャ固有のスレッド状態を設定する
.SH 書式
.nf
\fB#include <asm/prctl.h>\fP
.br
\fB#include <sys/prctl.h>\fP
.sp
\fBint arch_prctl(int \fP\fIcode\fP\fB, unsigned long *\fP\fIaddr\fP\fB);\fP
.fi
.SH 説明
\fBarch_prctl\fP()  関数はアーキテクチャ固有のプロセス状態またはスレッド状態を設定する。 \fIcode\fP は副機能を選択し、引き数
\fIaddr\fP を副機能に渡す。 \fIaddr\fP は、"set" 操作では \fIunsigned long\fP として、"get" 操作では
\fIunsigned long *\fP として解釈される。
.LP
x86\-64 の副機能は以下の通り:
.TP 
\fBARCH_SET_FS\fP
\fIFS\fP レジスタの 64 ビットベースを \fIaddr\fP に設定する。
.TP 
\fBARCH_GET_FS\fP
現在のスレッドの \fIFS\fP レジスタの 64 ビットベース値を、 \fIaddr\fP が指す \fIunsigned long\fP の領域に格納する。
.TP 
\fBARCH_SET_GS\fP
\fIGS\fP レジスタの 64 ビットベースを \fIaddr\fP に設定する。
.TP 
\fBARCH_GET_GS\fP
現在のスレッドの \fIGS\fP レジスタの 64 ビットベース値を、 \fIaddr\fP が指す \fIunsigned long\fP の領域に格納する。
.SH 返り値
成功すると、 \fBarch_prctl\fP()  は 0 を返す。エラーの場合、\-1 を返し、 \fIerrno\fP をエラーを示す値に設定する。
.SH エラー
.TP 
\fBEFAULT\fP
\fIaddr\fP がアンマップされたアドレスを指しているか、プロセスのアドレス空間の外にある。
.TP 
\fBEINVAL\fP
\fIcode\fP が有効なサブコマンドでない。
.TP 
\fBEPERM\fP
.\" .SH AUTHOR
.\" Man page written by Andi Kleen.
\fIaddr\fP がプロセスのアドレス空間の外にある。
.SH 準拠
\fBarch_prctl\fP()  は Linux/x86\-64 拡張であり、移植性を意図したプログラムでは使うべきでない。
.SH 注意
\fBarch_prctl\fP()  は現在のところ Linux/x86\-64 上の 64 ビットプログラムでのみサポートされている。

新しい 32 ビットセグメントセレクタがロードされた場合、 64 ビットベースは変更される。

\fBARCH_SET_GS\fP が無効にされているカーネルもある。

64 ビットセグメントベースのコンテキストスイッチは、やや高価である。 LDT を \fBmodify_ldt\fP(2)
で設定してセグメントセレクタを使うか、 (カーネル 2.5 以降の)  \fBset_thread_area\fP(2)  システムコールを使うことにより、
32 ビットベースを設定するという高速な代替手段もある。 4GB より大きなベースを設定したい場合にのみ、 \fBarch_prctl\fP()
が必要である。 アドレス空間の最初の 2GB にあるメモリは、 \fBmmap\fP(2)  に \fBMAP_32BIT\fP
フラグを指定して割り当てることができる。

バージョン 2.7 時点では、glibc には \fBarch_prctl\fP()  のプロトタイプがない。
今のところユーザは自分自身で宣言する必要がある。 これは将来の glibc のバージョンで修正されるかもしれない。

\fIFS\fP はスレッドライブラリで既に使われているかもしれない。
.SH 関連項目
\fBmmap\fP(2), \fBmodify_ldt\fP(2), \fBprctl\fP(2), \fBset_thread_area\fP(2)
.sp
AMD X86\-64 Programmer's manual
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.41 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
