.\" Copyright (c) 2001 by John Levon <moz@compsoc.man.ac.uk>
.\" Based in part on GNU libc documentation.
.\"
.\" Permission is granted to make and distribute verbatim copies of this
.\" manual provided the copyright notice and this permission notice are
.\" preserved on all copies.
.\"
.\" Permission is granted to copy and distribute modified versions of this
.\" manual under the conditions for verbatim copying, provided that the
.\" entire resulting derived work is distributed under the terms of a
.\" permission notice identical to this one.
.\"
.\" Since the Linux kernel and libraries are constantly changing, this
.\" manual page may be incorrect or out-of-date.  The author(s) assume no
.\" responsibility for errors or omissions, or for damages resulting from
.\" the use of the information contained herein.  The author(s) may not
.\" have taken the same level of care in the production of this manual,
.\" which is licensed free of charge, as they might when working
.\" professionally.
.\"
.\" Formatted or processed versions of this manual, if unaccompanied by
.\" the source, must acknowledge the copyright and authors of this work.
.\" License.
.\"
.\" 2001-10-11, 2003-08-22, aeb, added some details
.\" 2012-03-23, Michael Kerrisk <mtk.manpages@mail.com>
.\"     Document pvalloc() and aligned_alloc()
.\"*******************************************************************
.\"
.\" This file was generated with po4a. Translate the source file.
.\"
.\"*******************************************************************
.TH POSIX_MEMALIGN 3 2012\-03\-23 GNU "Linux Programmer's Manual"
.SH 名前
posix_memalign, aligned_alloc, memalign, valloc, pvalloc \- アラインメント
されたメモリの割り当てを行う
.SH 書式
.nf
\fB#include <stdlib.h>\fP
.sp
\fBint posix_memalign(void **\fP\fImemptr\fP\fB, size_t \fP\fIalignment\fP\fB, size_t \fP\fIsize\fP\fB);\fP
\fBvoid *aligned_alloc(size_t \fP\fIalignment\fP\fB, size_t \fP\fIsize\fP\fB);\fP
\fBvoid *valloc(size_t \fP\fIsize\fP\fB);\fP
.sp
\fB#include <malloc.h>\fP
.sp
\fBvoid *memalign(size_t \fP\fIalignment\fP\fB, size_t \fP\fIsize\fP\fB);\fP
\fBvoid *pvalloc(size_t \fP\fIsize\fP\fB);\fP
.fi
.sp
.in -4n
glibc 向けの機能検査マクロの要件 (\fBfeature_test_macros\fP(7)  参照):
.in
.sp
.ad l
\fBposix_memalign\fP(): _POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600
.sp
\fBaligned_alloc\fP(): _ISOC11_SOURCE
.sp
\fBvalloc\fP():
.br
.PD 0
.RS 4
.TP  4
glibc 2.12 以降:
.nf
_BSD_SOURCE ||
    (_XOPEN_SOURCE\ >=\ 500 ||
        _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED) &&
    !(_POSIX_C_SOURCE\ >=\ 200112L || _XOPEN_SOURCE\ >=\ 600)
.br
.fi
.TP 
glibc 2.12 より前:
_BSD_SOURCE || _XOPEN_SOURCE\ >=\ 500 || _XOPEN_SOURCE\ &&\ _XOPEN_SOURCE_EXTENDED
.ad b
.br
((非標準の) ヘッダファイル \fI<malloc.h>\fP も
\fBvalloc\fP() の宣言も公開する。機能検査マクロは不要である。
.RE
.PD
.SH 説明
.\" glibc does this:
関数 \fBposix_memalign\fP()  は、 \fIsize\fP バイトのメモリを割り当て、割り当てられたメモリのアドレスを \fI*memptr\fP
に設定する。 割り当てられたメモリのアドレスは \fIalignment\fP の倍数になっているはずである。 \fIalignment\fP は 2
のべき乗で、かつ \fIsizeof(void *)\fP の倍数でなければならない。 \fIsize\fP が 0 の場合、
\fBposix_memalign\fP()  は NULL か一意なポインタ値を返す。 このポインタ値は、後で \fBfree\fP(3)
に問題なく渡すことができる。

.\" The behavior of memalign() for size==0 is as for posix_memalign()
.\" but no standards govern this.
廃止された関数である \fBmemalign\fP() は、 \fIsize\fP バイトのメモリを割り当て、
割り当てられたメモリへのポインタを返す。 メモリのアドレスは \fIalignment\fP
の倍数になっているはずである。 \fIalignment\fP は 2 のべき乗でなければならない。

関数 \fBaligned_alloc\fP() は \fBmemalign\fP() と同じだが、\fIsize\fP が \fIalignment\fP
の倍数でなければならないという追加の制限がある点が異なる。


廃止された関数である \fBvalloc\fP()  は \fIsize\fP バイトのメモリを割り当て、割り当てられたメモリへのポインタを返す。
メモリのアドレスはページサイズの倍数になっているはずである。 これは \fImemalign(sysconf(_SC_PAGESIZE),size)\fP
と等価である。

廃止された関数 \fBpvalloc\fP() は \fBvalloc\fP() と同様だが、
割り当てられるサイズがシステムのページサイズの倍数に切り上げられる。

これらの関数はいずれもメモリのゼロクリアを行わない。
.SH 返り値
\fBaligned_alloc\fP(), \fBmemalign\fP(), \fBvalloc\fP(), \fBpvalloc\fP() は割り当てられた
メモリへのポインタを返す。 割り当てに失敗した場合は NULL を返す。

\fBposix_memalign\fP()  は成功した場合は 0 を返し、 失敗した場合は次のセクションに記載されたエラー値のいずれかを返す。
\fIerrno\fP はセットされないことに注意すること。
.SH エラー
.TP 
\fBEINVAL\fP
\fIalignment\fP 引き数が 2 のべき乗でなかったか、 \fIsizeof(void *)\fP の倍数でなかった。
.TP 
\fBENOMEM\fP
割り当て要求を満たすのに十分なメモリがなかった。
.SH バージョン
関数 \fBmemalign\fP(), \fBvalloc\fP(), \fBpvalloc\fP() は
すべての Linux libc ライブラリで使用可能である。

関数 \fBaligned_alloc\fP() は glibc バージョン 2.16 で追加された。

関数 \fBposix_fallocate\fP() は glibc 2.1.91 以降で利用可能である。
.SH 準拠
関数 \fBvalloc\fP() は 3.0BSD で登場した。4.3BSD では廃止されたと記載されており、
SUSv2 では過去の名残だと記載されている。 POSIX.1\-2001 には存在しない。

関数 \fBpvalloc\fP() は GNU による拡張である。

関数 \fBmemalign\fP() は SunOS 4.1.3 で登場したが、4.4BSD にはない。

関数 \fBposix_memalign\fP() は POSIX.1d に由来する。

.\"
関数 \fIaligned_alloc\fP() は C11 標準で規定されている。
.SS ヘッダ
\fBposix_memalign\fP()  の宣言を \fI<stdlib.h>\fP で行うことに関しては、 皆の意見が一致している。

いくつかのシステムでは、 \fBmemalign\fP()  は \fI<malloc.h>\fP ではなく
\fI<stdlib.h>\fP で宣言されている。

SUSv2 によると、 \fBvalloc\fP() は \fI<stdlib.h>\fP で宣言される。 libc4,5
や glibc では \fI<malloc.h>\fP で宣言されており、 さらに適切な機能検査
マクロが定義された場合には \fI<stdlib.h>\fP でも宣言される(上記を参照)。
.SH 注意
多くのシステムでは、アラインメントに関して制限がある。例えば、 ブロックデバイスに対するダイレクト I/O に使用するバッファには
アラインメントに関する制限がある。 POSIX では、どんなアラインメントが必要かを知るために
\fIpathconf(path,_PC_REC_XFER_ALIGN)\fP コールを規定している。ここで \fBposix_memalign\fP()
を使うと、この必要条件を満たすことができる。

\fBposix_memalign\fP() は \fIalignment\fP が上で詳細に述べた必要条件を満たすか
どうかを確かめる。 \fBmemalign\fP() は \fIalignment\fP 引き数が正しいかどうかの
確認を行わないかもしれない。

.\" Other systems allow passing the result of
.\" .IR valloc ()
.\" to
.\" .IR free (3),
.\" but not to
.\" .IR realloc (3).
POSIX では \fBposix_memalign\fP() によって獲得したメモリは \fBfree\fP(3) を
使って解放することができる必要がある。 いくつかのシステムでは
\fBmemalign\fP() や\fBvalloc\fP() で割り当てられたメモリを再利用する手段が
提供されていない(なぜなら \fBfree\fP(3) に渡すことができるのは
\fBmalloc\fP(3) から受け取ったポインタだけだが、例えば \fBmemalign\fP() は
\fBmalloc\fP(3) を呼び出し、得た値をアラインメントしてしまうからである)。
glibc の実装では、 ここに述べた関数のいずれで獲得したメモリも
\fBfree\fP(3) で再利用することができる。

glibc の \fBmalloc\fP(3) は常に 8 バイトにアラインメントされたメモリアドレスを
返すので、ここで述べた関数が必要になるのは 8 バイトよりも大きなアラインメント
が必要な場合だけである。
.SH 関連項目
\fBbrk\fP(2), \fBgetpagesize\fP(2), \fBfree\fP(3), \fBmalloc\fP(3)
.SH この文書について
この man ページは Linux \fIman\-pages\fP プロジェクトのリリース 3.41 の一部
である。プロジェクトの説明とバグ報告に関する情報は
http://www.kernel.org/doc/man\-pages/ に書かれている。
